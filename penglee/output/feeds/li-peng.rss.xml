<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>路漫求索</title><link>http://king32783784.github.io/</link><description>生活不止眼前的苟且，还有诗和远方 &lt;a href="pages/aboutme.html"&gt;More...&lt;/a&gt;</description><lastBuildDate>Sat, 19 Aug 2017 00:00:00 +0800</lastBuildDate><item><title>Multue测试工具介绍</title><link>http://king32783784.github.io/2017/08/19/Multue/</link><description>&lt;h3&gt;基本介绍&lt;/h3&gt;
&lt;p&gt;本文介绍了本人前段时间开发的基站多UE的业务测试工具。&lt;/p&gt;
&lt;h3&gt;制作目的&lt;/h3&gt;
&lt;p&gt;基站产品开发过程中，会对基站的业务性能及稳定性进行测试。该测试项目在每个迭代版本中进行多次验证测试。测试环境比较复杂，涉及多个UE（比如32、96甚至更多).测试时需要对多个CPE进行业务传输测试。
测试过程中，还需要关注基站的状态、UE的状态、业务传输速率等指标。该测试一般持续比较长的时间如7*24H，单纯靠人工测试，比较浪费人力和精力。因此在此需求上开发了Multue的自动化测试工具。&lt;/p&gt;
&lt;h3&gt;支持功能&lt;/h3&gt;
&lt;p&gt;该工具主要支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1． 支持多UE（96UE，可扩展）进行FTP上传/下载业务测试；&lt;/li&gt;
&lt;li&gt;2． 支持测试时长设定，测试过程中，因UE或基站异常造成业务中断，环境恢复后，业务可以自动恢复（支持常用的排错处理）；&lt;/li&gt;
&lt;li&gt;3． 支持定制UE进行业务测试，支持指定UE进行上传/下载业务；&lt;/li&gt;
&lt;li&gt;4． 支持业务测试和监控分离，可以只进行测试或只进行监控
      监控内容包括：基站监控状态监控和UE监控，具体见下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;简单实现说明&lt;/h3&gt;
&lt;p&gt;该工具的实现主要包括：&lt;/p&gt;
&lt;h4&gt;1. 业务测试部分&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;由python ftp库进行文件的上传下载
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 监控部分&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通过ssh库登录基站后台，进行数据的抓取，分别将数据写入log文件和db文件；
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3. 控制部分&lt;/h4&gt;
&lt;p&gt;基站相关信息保存在xml文件中，主程序从xml文件读取CPE的imsi、ip、ftpip、下载或上传路径等参数。测试设置由主窗口进行设定，由pyqt实现，具体参见代码。&lt;/p&gt;
&lt;h3&gt;How to&lt;/h3&gt;
&lt;p&gt;使用方法如下：涉及产品信息，只做基本介绍。&lt;/p&gt;
&lt;h4&gt;1．测试环境搭建&lt;/h4&gt;
&lt;p&gt;该部分由测试人员设定。&lt;/p&gt;
&lt;p&gt;环境要求：
基站设置为待测环境（如LGW模式、时隙配比等）；
CPE已附着，设置相关路由使测试控制机通过指定CPE连接到FTP。&lt;/p&gt;
&lt;h4&gt;2．测试参数设置&lt;/h4&gt;
&lt;p&gt;测试相关设置参数主要保存在args.xml文件中。&lt;/p&gt;
&lt;h4&gt;3．测试执行&lt;/h4&gt;
&lt;p&gt;直接双击执行“Run.exe“执行程序(可以编译成可执行文件，减少环境依赖，增加通用性)，同样，开始时后台会进行一些文件的初始化及环境初始化的工作。然后出现以下窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/mute01.png?raw=true" height="320" width="480"&gt;&lt;/p&gt;
&lt;p&gt;该窗口第一个标签窗口，列出了配置文件中96UE的IMSI。可以在UE列表中勾选要进行测试的UE，默认进行下载业务，可以更改对应UE的业务模式，目前只支持UL/DL两种。选择UE及相应业务模式后，输入测试时间。另外点击全选，可以直接选中前32个UE，然后点击启动测试按钮，后台便开始进行相应的测试业务。
点击“监控设置“标签，可以切换到监控设置界面。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/mute02.png?raw=true" height="320" width="480"&gt;&lt;/p&gt;
&lt;p&gt;该界面列出了目前支持的监控类型，可以根据需要选择监控项目，直接勾选对应的监控类型即可。勾选完成后，点击启动监控，此时后台便开始进行相应的监控。生成的对于监控记录保存Result目录中对应的文件中。如果想实时查看监控信息，可以点击“查看监控“，可以弹出如下窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/mute03.png?raw=true" height="320" width="480"&gt;&lt;/p&gt;
&lt;p&gt;该窗口会将支持的监控类型全部显示出来，但监控设置中未选中的部分不会进行实时更新。和单UE测试工具一样，该监控信息也是在一定时间间隔下进行更新。
监控和测试已分开控制，所以支持只进行监控。&lt;/p&gt;
&lt;h3&gt;Todo List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.UI可以进行优化和完善，如将配置信息以UI形式进行设置等；&lt;/li&gt;
&lt;li&gt;2.测试前设置如基站相关的模式设置等，可以添加；&lt;/li&gt;
&lt;li&gt;3.告警功能，自动发送邮件、语音提示相关的代码已实现，但处于注销或未集成状态，明确告警条件后，可以添加；&lt;/li&gt;
&lt;li&gt;4.业务模型的扩展，根据测试需求增加测试时段设置、版本变更自动触发测试等功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;项目地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/king32783784/MultiueTest.git"&gt;MultiueTest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前该工具仍投入生产环境中使用，但仍然存在一些问题和需改进优化的地方，欢迎大家提出发现的bug和建议。谢谢：&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 19 Aug 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-08-19:2017/08/19/Multue/</guid><category>Multue</category></item><item><title>网络速率统计的几个示例</title><link>http://king32783784.github.io/2017/06/17/%E7%BD%91%E7%BB%9C/</link><description>&lt;p&gt;最近新换了工作，新公司是一家做通信领域的公司(baicells)。虽然仍旧是从事测试开发相关的工作，
但通信领域毕竟是新手，所以最近一直在恶补相关基础知识，耽误了文章的更新。&lt;/p&gt;
&lt;p&gt;本文主要分享几个系统下统计网络速率的几个小方法，供参考。&lt;/p&gt;
&lt;h3&gt;1.网络设备&lt;/h3&gt;
&lt;p&gt;该方法比较简单直接，不借助其他工具，直接读取一定时间间隔的网络收发数据量，然后进行速率计算。
优点是简单粗暴，通用性比较强。
缺点只能按照网络设备进行统计，不能按照接口进行划分。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env pythrn&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recive_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;test_args&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NetRate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;totalrx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ifstat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/proc/net/dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifstat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;totalrx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;rxdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rxtmp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;totalrx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;rxdata&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rxtmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rxdata&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;totaltx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ifstat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/proc/net/dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifstat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ifstat&lt;/span&gt;
                &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;totaltx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;txdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;txtmp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;totaltx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;txdata&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txtmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;txdata&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;beforerx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;afterrx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;afterrx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;beforerx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;beforetx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;aftertx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aftertx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;beforetx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;


&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recive_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetRate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;代码比较简单，不再分析哈，主要时间不多。&lt;/p&gt;
&lt;h3&gt;2. TCPdump&lt;/h3&gt;
&lt;p&gt;下面这个方法，是调用tcpdump工具，进行速率统计，tcpdump是比较常用的网络分析工具。
优点：可以按照端口进行统计
缺点：速率太高时，由于tcpdump打印过快，碍于python执行效率问题（更大可能是博主水平问题哈），速率统计可能不太准确&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-*coding=utf-8*-*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Queue&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recive_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;targetip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetip&lt;/span&gt;
    &lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;test_args&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Getrate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rate_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GET_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length (\d+):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;tcpdump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tcpdump -e -i p1p1 -nn host &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcpdump&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;rt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GET_LENGTH&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TIMEOUT&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;initlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo &amp;#39;&amp;#39; &amp;gt; /opt/tcp.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;LOGFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/opt/tcp.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_rate_ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TIMEOUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;killdump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;killall -9 tcpdump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sysargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;recive_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Getrate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;192.168.100.103&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sysargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;其他方法&lt;/h3&gt;
&lt;p&gt;比如借助sar,系统自带的log等&lt;/p&gt;
&lt;p&gt;部分代码如下：&lt;/p&gt;
&lt;p&gt;sar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _ftp_getrate_sar(self,expectspeed,mode,testtime,ratetime,clientip,
                           netdev,hostname,username, password,
                           port):
        port = int(port)
        testtime=int(testtime)
        ratetime = int(ratetime)
    client=paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(hostname,port,username, password)
    times = int(ratetime/3)
    if mode == &amp;quot;RX&amp;quot;:
        cmd = &amp;quot;sar -n DEV 3 %s | grep Average | grep %s | awk -F &amp;#39; &amp;#39; &amp;#39;{print $5}&amp;#39; | tr -d &amp;#39;\n&amp;#39;&amp;quot; % (times,netdev)
    elif mode == &amp;quot;TX&amp;quot;:
            cmd = &amp;quot;sar -n DEV 3 %s | grep Average | grep %s | awk -F &amp;#39; &amp;#39; &amp;#39;{print $6}&amp;#39; | tr -d &amp;#39;\n&amp;#39;&amp;quot; % (times,netdev)
        else:
            cmd = &amp;quot;sar -n DEV 3 %s | grep Average | grep %s | awk -F &amp;#39; &amp;#39; &amp;#39;{print $6 + $5}&amp;#39; | tr -d &amp;#39;\n&amp;#39;&amp;quot; % (times,netdev)
        starttime = time.time()
        time.sleep(ratetime)
    while time.time() - starttime &amp;lt; (testtime-ratetime):
            stdin,stdout,stderr=client.exec_command(cmd)
            testrate = float(stdout.read())
            rate = testrate * 8 * 1024
            print &amp;quot;test rate is %s&amp;quot; %rate
            if rate &amp;lt; expectspeed:
                 self.Status.put(&amp;quot;LOW&amp;quot;)
                 self.Status_rate.put(&amp;quot;LOW&amp;quot;)
                 print &amp;quot;test rate is below than expectspeed&amp;quot;
                 return False
        return True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后续会继续总结分享一些工作中用到的测试方法，敬请期待。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 17 Jun 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-06-17:2017/06/17/网络/</guid><category>rate</category></item><item><title>Robot Framework 用户手册(三)</title><link>http://king32783784.github.io/2017/04/01/Robot/</link><description>&lt;h2&gt;2.2 创建测试用例&lt;/h2&gt;
&lt;h3&gt;2.2.1  测试用例语法&lt;/h3&gt;
&lt;h4&gt;基本语法&lt;/h4&gt;
&lt;p&gt;测试用例是使用可用的关键字构造的测试用例表。关键字可以从测试库或资源文件中导入，或则通过测试用例的关键字表本身创建。&lt;/p&gt;
&lt;p&gt;测试用例表第一列包含了测试用例的名称。一个测试用例的开始是从包含测试用例名词的这一行到下一个用
例名称或表格的结束。在表头和第一个测试直接包含其他内容是错误的。&lt;/p&gt;
&lt;p&gt;第二列通常是关键字名称。这种规则的例外是设置关键字的返回值，在第二个或后续的列可能会包含变量
名和关键字跟随其后。在这两种用例中，列的内容包含的可能是参数或是特定的关键字。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Valid Login
    Open Login Page
    Input Username    demo
    Input Password    mode
    Submit Credentials 
    Welcome Page Should Be Open

Setting Variables
    Do Something    first argument    second argument 
    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; =    Get Some Value
    Should Be Equal    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    Expected value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;尽管测试用例名称可以包含任意字符，但是?和*不推荐使用，因为它们通常在选择测试用例时作为通配符使用。例如，试图运行一个名为Example*独立测试如--test 'Example*',但是这样会执行所有前缀为Example的测试。&lt;/p&gt;
&lt;h4&gt;测试用例表的设置&lt;/h4&gt;
&lt;p&gt;测试用例也有自己的设置。与关键字的位置一样,设置名称也是在表格的第二列，设置的值在后续的列
中。设置名称由方括号包围，以区别于关键字。以下是可用的设置名称，并将在本章的后面进行解释。&lt;/p&gt;
&lt;p&gt;[Documentation]&lt;/p&gt;
&lt;p&gt;用于说明测试用例的注释&lt;/p&gt;
&lt;p&gt;[Tags]&lt;/p&gt;
&lt;p&gt;用于标记测试用例&lt;/p&gt;
&lt;p&gt;[Setup], [Teardown]&lt;/p&gt;
&lt;p&gt;用于指定测试用例的Setup和Teardown,其同义词是[Precondition]和[Postcondition]&lt;/p&gt;
&lt;p&gt;[Template]
  用于指定测试用例模板。这个测试本身只包括用于关键字参数的数据。&lt;/p&gt;
&lt;p&gt;[Timeout]&lt;/p&gt;
&lt;p&gt;设置测试用例超时。&lt;/p&gt;
&lt;p&gt;测试用例设置例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Test With Settings
    [Documentation]    Another dummy test
    [Tags]    dummy    owner-johndoe
    Log    Hello, world!
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;测试表中测试用例相关设置&lt;/h4&gt;
&lt;p&gt;以下是设置表中测试用例的相关设置。在测试用例指定设置之前，这些值是设置的默认值。&lt;/p&gt;
&lt;p&gt;Force Tags, Default Tags&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tag的强制和默认值
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test Setup, Test Teardown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Test Setup ，Test Teardown的默认值。其同义词是 Test Precondition 和 Test Postcondition。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test Template&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;默认模板关键字
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test Timeout&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;测试用例超时的默认值。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.2.2 参数使用&lt;/h3&gt;
&lt;p&gt;前面已经展示了使用不同参数的关键字，这个章节将进一步介绍这一重要功能。关键字可以接受零或多个参数，并且有些参数可能会有默认值。关键字能接受哪种参数取决于其实现，通常可以搜索关键字注释获取这些信息。这里的例子，注释是通过libdoc.py生成的，同样的信息在javadoc之类的工具生成的注释中也能找到。&lt;/p&gt;
&lt;h4&gt;必选参数&lt;/h4&gt;
&lt;p&gt;大多数的关键字有指定数目的参数，这些是必需单独参数。在关键字文档中，通过逗号分隔的特定参数名称来制定其参数，如: first, second, third. 这些参数的名称不重要，除非需要解释这个参数的作用，但重要的是参数的数目必须同文档中规定的一致。。使用过多或过少的参数都将是错误的。下面的例子用到了OperatingSystem 库中的关键字 Create Directory 和 Copy File。第一个关键字有 1 个参数，用来指定路径；第二个关键字有 2 个参数，分别用来指定源文件和目标文件夹；最后一个关键字是来自 BuiltIn 库的 No
Operation，它不需要参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Example
    Create Directory    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/stuff
    Copy File    &lt;span class="nv"&gt;$P&lt;/span&gt;={CURDIR}/file.txt    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/stuff
    No Operation
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;默认值&lt;/h4&gt;
&lt;p&gt;有默认值的参数通常可以提供或不提供。在本文档中，参数名和默认值之间由等号分隔，如 name = default
value，但是对使用 Java 实现的关键字来说，同一个关键字可能会有多种实现方法，只是它们的参数不同。
所有的参数都可以有默认值，但是有默认值的参数后面不能再有参数了。&lt;/p&gt;
&lt;p&gt;下面的例子说明了默认值的使用，这个例子使用了 Create File 关键字，参数包括：path, content=,
encoding=UTF-8。如果试图不使用任何参数或者是超过三个参数，这个关键字都不能工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Example
    Create File    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/empty.txt
    Create File    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/utf-8.txt Hyvä esimerkki
    Create File    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/iso-8859-1.txt    Hyvä esimerkki    ISO-8859-1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;可变数目的参数&lt;/h4&gt;
&lt;p&gt;可以创建接受任意数目参数的关键字。这些参数可以由强制参数和有默认值的参数组成，但可变参数要放到最后。在本文档中，这种参数通常是在参数名前面加个*,如*varargs.&lt;/p&gt;
&lt;p&gt;Remove Files 和 Join Paths关键字在下面例子中分别使用这些参数：*paths 和base, *parts.前者可以使用任意数目的参数，后者则至少需要一个参数。&lt;/p&gt;
&lt;p&gt;使用可变数目参数的关键字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Example
    Remove Files    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/f1.txt    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/f2.txt    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/f3.txt
    @{paths} =    Join Paths    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;TEMPDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    f1.txt    f2.txt    f3.txt    f4.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;命名参数&lt;/h4&gt;
&lt;p&gt;命名参数语法使得使用带有默认值的参数更加灵活，并允许明确标注那些特定参数值的意义。技术实现上，命名参数和python中关键字参数相同。&lt;/p&gt;
&lt;h5&gt;基本语法&lt;/h5&gt;
&lt;p&gt;类似于arg=value,给一个参数名称定义一个关键字参数。当多个参数有默认值时，它可以列出一部分参数，让其他的参数使用默认值。
例如，一个关键字接受参数arg1=a, arg2=b, arg3=c,并且只调用一个参数arg3=override,参数arg1、arg2使用默认值，但arg３需要得到override。这听起来很复杂，但下面的命名参数例子会使它变得更简洁。&lt;/p&gt;
&lt;p&gt;命名参数语法，格式需要使用arg=value这种，而不是Arg=value或ARG=value.&lt;/p&gt;
&lt;p&gt;当命名参数语法使用用户关键字时，命名参数不能包含&lt;span class="math"&gt;\(\{\}修饰符。例如，用户关键字有\)&lt;/span&gt;{arg1}=first,${arg2}=second参数，必须像arg2=override这样使用。&lt;/p&gt;
&lt;p&gt;命名参数之后使用正常的位置参数，如　| Keyword | arg=value | positional |,是不能正常工作的。从2.8之后，这会导致explicit错误。命名参数的相对顺序并不重要。&lt;/p&gt;
&lt;h5&gt;使用变量命名参数&lt;/h5&gt;
&lt;p&gt;在命名参数的名字和值都可以使用变量。如果值是单一的scalar变量，它会原样传递给关键字。命名参数语法中值可以是任何对象，不仅仅是字符串。例如调用关键字arg=&lt;span class="math"&gt;\(\{object\},将通过变量\)&lt;/span&gt;{object}得到而并将其转为字符串。&lt;/p&gt;
&lt;p&gt;如果变量用于命名参数的名称时，变量要在匹配到参数名称前解决。&lt;/p&gt;
&lt;p&gt;命名参数语法要求使用＝号。这意味着，单独变量不能触发命名参数语法，甚至没有像foo=bar的值.在这进行关键字转换时，尤为重要。例如，一个关键字需要可变数量的参数@{args}，并传递使用相同语法的另一个关键字@{args},位置参数named=arg语法不被识别。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Case ***
Example
      Run Program    shell=True    # This will not come as a named argument to Run Process

*** Keywords ***
Run Program
    [Arguments]    @{args}
    Run Process    program.py    @{args}    # Named arguments are not recognized from inside @{args}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果关键字需要接受并传递着任何命名参数，它必须改为支持接受自由的关键字参数。&lt;/p&gt;
&lt;h5&gt;命名参数示例&lt;/h5&gt;
&lt;p&gt;下面的例子演示如何使用库关键字，用户关键字命名参数语法，导入的Telnet测试库时间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Settings ***
Library    Telnet    prompt=$    default_log_level=DEBUG

*** Test Cases ***
Example
    Open connection    10.0.0.42    port=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    alias=example
    List files    options=-lh
    List files    path=/tmp    options=-l

*** Keywords ***
List files
    [Arguments]    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;=.    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;=
    Execute command    ls &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;自由关键字参数&lt;/h4&gt;
&lt;p&gt;RF2.8版本增加了python风格的自由关键字参数(**kwargs).这意味着关键字可以接受任何使用name=value这种语法的参数，并且不匹配任何其他的kwargs参数。
自由关键字参数支持类似于命名参数的变量。在实践中，这意味着该变量可以作为名称和值，但使用显示的转义。例如，foo=&lt;span class="math"&gt;\(\{bar\}和\)&lt;/span&gt;{foo}=${bar}都有效，只要使用的变量存在。一个额外的限制是自由的关键字参数名必须是字符串。&lt;/p&gt;
&lt;h5&gt;Kwargs 例子&lt;/h5&gt;
&lt;p&gt;第一个使用kwargs的例子，我们看一下Process库中关键字的运行过程。它包括一个command签名，*arguments, **configuration，这意味着它需要执行的命令（command），其参数为可变的参数（*arguments），最后是由自由关键字(**configuration)作为可选的配置参数。这个例子可以看到，变量在自由关键字参数中可以和命名参数语法一样使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Using Kwargs
    Run Process    program.py    arg1    arg2    cwd=/home/user
    Run Process    program.p    argument    shell=True    env=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ENVIRON&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二个例子，创建一个封装用户关键字运用执行上面例子的program.py.该封装关键字运行程序接受任意数目的参数和kwargs，并向前为执行程序传递命令的名称进行执行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Using Kwargs
    Run Program    agr1    agr2    cwd=/home/user
    Run program    argument    shell=True    env=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ENVIRON&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
*** Keywords ***
Run Program
    [Arguments]    @{arguments}    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;{configuration}
    Run Process    program.py    @{arguments}    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;{configuration}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;关键字名称嵌入参数&lt;/h4&gt;
&lt;p&gt;一个完全不同的方法来指定参数被嵌入他们到关键字名称。这个语法支持测试库的关键字和用户的关键字。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 01 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-04-01:2017/04/01/Robot/</guid><category>Framework</category></item><item><title>Robot Framework 用户手册(二)</title><link>http://king32783784.github.io/2017/03/31/Robot/</link><description>&lt;h3&gt;2.1.3 测试数据表&lt;/h3&gt;
&lt;p&gt;测试数据为下表所示的４种结构。测试数据表通过表中第一个区域被识别。被识别的表名是Settings, Variables, Test Cases, Keywords.匹配区分大小写，并且支持Setting和Test Case的变体。&lt;/p&gt;
&lt;p&gt;不同的测试数据表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;th&gt;Used for&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Settings&lt;/td&gt;
&lt;td&gt;(1)导入测试库、资源文件和变量文件；(2)定义测试集和测试用例的元数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;定义可以用于测试数据任何地方的变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test Cases&lt;/td&gt;
&lt;td&gt;从可用的关键字中创建测试用例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keywords&lt;/td&gt;
&lt;td&gt;通过底层关键字创建用户关键字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;2.1.4 数据分析规则&lt;/h3&gt;
&lt;h4&gt;忽略数据&lt;/h4&gt;
&lt;p&gt;当RF分析测试数据时，以下将被忽略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分中所有不以可识别表头开始的内容&lt;/li&gt;
&lt;li&gt;第一部分除了表第一行之外的任何内容&lt;/li&gt;
&lt;li&gt;第一个表之外的所有内容。如果数据表之间插入的数据，也会被忽略&lt;/li&gt;
&lt;li&gt;所有用于增加表可读性的空行，也会被忽略&lt;/li&gt;
&lt;li&gt;所有行结束时的空单元格也被忽略&lt;/li&gt;
&lt;li&gt;所有单个(\)转义符&lt;/li&gt;
&lt;li&gt;所有(#)字符后面的字符，被当做注释忽略&lt;/li&gt;
&lt;li&gt;HTML/reST中格式内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RF忽略的数据，在结果报告同样不可见，RF调用的工具同样忽略。如果需要在结果中增加一些信息，需要在Builtln的keyword Log或Comment中添加。&lt;/p&gt;
&lt;h4&gt;空白处理&lt;/h4&gt;
&lt;p&gt;RF处理空白的方式和HTML源码处理方式相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换行符、回车和制表符转换为空格；&lt;/li&gt;
&lt;li&gt;所有表格开头和结尾的空白被忽略；&lt;/li&gt;
&lt;li&gt;多个连续的空格将合并为一个单一的空格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果前置或需要连续的空格，需要进行转义。换行符、回车、制表符和非换行空格分别通过\n \r \t和\xA0转义。&lt;/p&gt;
&lt;h4&gt;转义&lt;/h4&gt;
&lt;p&gt;RF测试数据中的转义字符为()和内建标量&lt;span SPACE="SPACE" class="math"&gt;\({EMPTY}和\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转义特殊字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;转义特殊字符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\\$&lt;/td&gt;
&lt;td&gt;美元符，当不是scalar变量开头时&lt;/td&gt;
&lt;td&gt;\${notvar}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\@&lt;/td&gt;
&lt;td&gt;at符合，当不是列表变量开头时&lt;/td&gt;
&lt;td&gt;\@{notvar}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\%&lt;/td&gt;
&lt;td&gt;百分号，当不是环境变量的开头时&lt;/td&gt;
&lt;td&gt;\%{notvar}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\#&lt;/td&gt;
&lt;td&gt;井号，当不是commnet开头时&lt;/td&gt;
&lt;td&gt;\# not comment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\=&lt;/td&gt;
&lt;td&gt;等号，当不是用于命名语法的一部分时&lt;/td&gt;
&lt;td&gt;not \=named&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\/&lt;/td&gt;
&lt;td&gt;管道符，当不是用于管道分隔格式时&lt;/td&gt;
&lt;td&gt;/ Run / ps \/ grep xxx /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\&lt;/td&gt;
&lt;td&gt;反斜杠，不用于转义时&lt;/td&gt;
&lt;td&gt;c:\\temp, \\${var}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;/代表"|"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转义序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反斜杠字符也允许创建被识别为字符，否则不能在测试数据来创建特殊的转义序列。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sequence&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;td&gt;first line\n2nd line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车符&lt;/td&gt;
&lt;td&gt;text\rmore text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;制表符&lt;/td&gt;
&lt;td&gt;text\tmore text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\xhh&lt;/td&gt;
&lt;td&gt;16进制字符hh&lt;/td&gt;
&lt;td&gt;null type: \x00, a: \xE4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\uhhhh&lt;/td&gt;
&lt;td&gt;16进制字符hhhh&lt;/td&gt;
&lt;td&gt;snowman: \u2603&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\uhhhhhhhh&lt;/td&gt;
&lt;td&gt;16进制字符hhhhhhhh&lt;/td&gt;
&lt;td&gt;love hotel: \U0001f3e9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在测试数据创建的所有字符串，包括系那个\x02，都是Unicode，如果有需要的必须转换为字符串。可以使用内建关键字和字符串库如Convert To Bytes或Encode String To Bytes keywords，或使用str(value)或value.encode('UTF-8').&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防止忽略空单元格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果空格作为关键字或其他类型的参数时，需要进行转义，以免被忽略。空格作为测试数据或分隔格式一部分时，必须要进行转义。
空格可以使用反斜杠或则内建变量${EMPTY}进行转义。通常建议使用后者，后者更容易理解。此建议一个例外情况是当使用分离格式的空格时。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;使用反斜杠&lt;/td&gt;
&lt;td&gt;Do Something&lt;/td&gt;
&lt;td&gt;first arg&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用${EMPTY}&lt;/td&gt;
&lt;td&gt;Do Something&lt;/td&gt;
&lt;td&gt;first arg&lt;/td&gt;
&lt;td&gt;${EMPTY}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非尾部空格&lt;/td&gt;
&lt;td&gt;Do Something&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;second arg&lt;/td&gt;
&lt;td&gt;# No escaping needed in HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;For loop&lt;/td&gt;
&lt;td&gt;:FOR&lt;/td&gt;
&lt;td&gt;${var}&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;@{VALUES}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;${var}&lt;/td&gt;
&lt;td&gt;# No escaping needed here either&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Test Cases ***
Using backslash
    Do Something    first arg    \
Using &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;EMPTY&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    Do Something    first arg    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;EMPTY&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
Non-trailing empty
    Do Something    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;EMPTY&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    second arg    # Escaping needed in space separated format
For loop
    :FOR    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    IN    @{VALUES}
    \    Log    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    # Escaping needed here too
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;防止忽略空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于前置或连续的空格会被忽略，但是当作为关键字或其他类型的参数时就需要进行转义。和单元格处理一样，要么使用反斜线要么使用内建变量${SPACE}&lt;/p&gt;
&lt;p&gt;转义示例&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escaping with backslash&lt;/th&gt;
&lt;th&gt;Escaping with ${SPACE}&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\ leading space&lt;/td&gt;
&lt;td&gt;${SPACE}leading space&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trailing space \&lt;/td&gt;
&lt;td&gt;trailing space${SPACE}&lt;/td&gt;
&lt;td&gt;反斜线必须在空格后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ \&lt;/td&gt;
&lt;td&gt;${SPACE}&lt;/td&gt;
&lt;td&gt;反斜线需要在两侧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;consecutive \  \ speces&lt;/td&gt;
&lt;td&gt;consecutive${SPACE * 3}spaces&lt;/td&gt;
&lt;td&gt;使用扩展变量语法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上面的例子可以看出使用变量比较容易理解，而且可以使用一些扩展变量语法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将测试数据分隔为多行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果数据超出了一行，下一行可以使用(...)继续。在测试用例或关键字表格中，省略号前必须有个空单元格。在settings和变量表中，可以直接添加到setting或变量表下面。在所有的表中，省略号前面的空单元都会被忽略。&lt;/p&gt;
&lt;p&gt;此外，settings的单一的值可以被分为多列。当测试数据解析时，会把空格分隔的值一起处理。&lt;/p&gt;
&lt;p&gt;测试数据没有分隔的表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Seting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Default Tags&lt;/td&gt;
&lt;td&gt;tag-1&lt;/td&gt;
&lt;td&gt;tag-2&lt;/td&gt;
&lt;td&gt;tag-3&lt;/td&gt;
&lt;td&gt;tag-4&lt;/td&gt;
&lt;td&gt;tag-5&lt;/td&gt;
&lt;td&gt;tag-6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@{LIST}&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;has&lt;/td&gt;
&lt;td&gt;quite&lt;/td&gt;
&lt;td&gt;many&lt;/td&gt;
&lt;td&gt;items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;th&gt;Arg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;td&gt;[Documentation&lt;/td&gt;
&lt;td&gt;Documentation for this test case.\n This can get quite long...&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;[Tags]&lt;/td&gt;
&lt;td&gt;t-1&lt;/td&gt;
&lt;td&gt;t-2&lt;/td&gt;
&lt;td&gt;t-3&lt;/td&gt;
&lt;td&gt;t-4&lt;/td&gt;
&lt;td&gt;t-5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Do X&lt;/td&gt;
&lt;td&gt;one&lt;/td&gt;
&lt;td&gt;two&lt;/td&gt;
&lt;td&gt;three&lt;/td&gt;
&lt;td&gt;four&lt;/td&gt;
&lt;td&gt;five&lt;/td&gt;
&lt;td&gt;six&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;${var}=&lt;/td&gt;
&lt;td&gt;Get X&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;测试数据分隔为多行&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Default Tags&lt;/td&gt;
&lt;td&gt;tag-1&lt;/td&gt;
&lt;td&gt;tag-2&lt;/td&gt;
&lt;td&gt;tag-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;tag-4&lt;/td&gt;
&lt;td&gt;tag-5&lt;/td&gt;
&lt;td&gt;tag-6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@{LIST}&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;has&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;quite&lt;/td&gt;
&lt;td&gt;many&lt;/td&gt;
&lt;td&gt;items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;td&gt;[Documentation]&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;td&gt;for this&lt;/td&gt;
&lt;td&gt;test case.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;This can get&lt;/td&gt;
&lt;td&gt;quite&lt;/td&gt;
&lt;td&gt;long...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;[Tags]&lt;/td&gt;
&lt;td&gt;t-1&lt;/td&gt;
&lt;td&gt;t-2&lt;/td&gt;
&lt;td&gt;t-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;t-4&lt;/td&gt;
&lt;td&gt;t-5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Do X&lt;/td&gt;
&lt;td&gt;one&lt;/td&gt;
&lt;td&gt;two&lt;/td&gt;
&lt;td&gt;three&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;Four&lt;/td&gt;
&lt;td&gt;five&lt;/td&gt;
&lt;td&gt;six&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;${var}=&lt;/td&gt;
&lt;td&gt;Get X&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-03-31:2017/03/31/Robot/</guid><category>Framework</category></item><item><title>Robot Framework 用户手册(一)</title><link>http://king32783784.github.io/2017/03/26/Robot/</link><description>&lt;p&gt;以下内容主要参考RobotFramework官方用户手册文档。&lt;/p&gt;
&lt;h3&gt;1.1 介绍&lt;/h3&gt;
&lt;p&gt;RF框架是用于验收测试和验收测试驱动开发（ATDD)的通用开源测试框架。它具备易于使用的表格测试数据语法，并且使用关键字驱动测试的方法。它的测试功能可以通过使用python或java实现的测试库来进行扩展，用户可以使用用于创建测试用例的相同语法从现有的关键字创建新的更高级别的关键字。&lt;/p&gt;
&lt;p&gt;RF框架独立于操作系统和应用程序。核心框架是使用python实现的，可以在jython(JVM)和IronPython(.NET)上运行。该框架具有丰富的生态系统，包括作为单独项目开发的各种通用测试库和工具。&lt;/p&gt;
&lt;p&gt;关于RF和其生态系统的更多信息，参阅http://robotframework.org.&lt;/p&gt;
&lt;h4&gt;1.1.1 为什么选择robot framework？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持使用简单的表格语法，采用统一的方式创建测试用例；&lt;/li&gt;
&lt;li&gt;支持从现有关键字创建可重用的高级关键字；&lt;/li&gt;
&lt;li&gt;提供了易于阅读的结果报告和html格式的日志；&lt;/li&gt;
&lt;li&gt;独立的平台和应用程序；&lt;/li&gt;
&lt;li&gt;提供一个简单测试库API,支持使用python或java语言自定义测试库；&lt;/li&gt;
&lt;li&gt;提供用于集成到现有基础框架（持续集成系统）中的命令行界面和基于xml的输出文件；&lt;/li&gt;
&lt;li&gt;提供selenium web测试、Java测试、多线程运行、Telnet、ssh等支持；&lt;/li&gt;
&lt;li&gt;支持创建数据驱动的测试用例；&lt;/li&gt;
&lt;li&gt;内置了对变量的支持，特别适用于不同环境下的测试；&lt;/li&gt;
&lt;li&gt;支持标签分类和选择性执行测试用例;&lt;/li&gt;
&lt;li&gt;实现与源代码控制的轻松集成： 测试套件只是可以使用生产代码进行版本化的文件和目录&lt;/li&gt;
&lt;li&gt;提供测试用例和测试套件级setup和teardown&lt;/li&gt;
&lt;li&gt;模块化的结构支持为应用程序不同接口创建测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.1.2 高级架构&lt;/h4&gt;
&lt;p&gt;Robot Framework是一种通用的，应用程序和技术独立的框架。它具有高度模块化的架构：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/architecture.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试数据是简单、易于编辑的表格格式。Robot Framework启动后，处理测试数据，执行测试并且生成测试log和报告。底层的核心框架不需要清除任何具体测试的内容，与之交互的辅助工作均由测试库完成。库可以直接使用应用程序接口或使用较低级别的测试工具作为驱动程序。&lt;/p&gt;
&lt;h3&gt;1.2 安装说明&lt;/h3&gt;
&lt;p&gt;Robot Framework由python实现，并支持Jython,IronPython和PyPY，所以在安装之前，确认系统支持以上解释器的任一一个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip安装：pip instal robotframework &lt;/li&gt;
&lt;li&gt;源码安装：通过从PyPI下载源代码并提取源代码，或通过克隆GitHub仓库来获取源代码，然后进行编译安装&lt;/li&gt;
&lt;li&gt;JAR版本：　如果使用Jython运行测试就足够了，最简单的方法是从Maven中心下载独立的robotframework- &lt;version&gt; .jar 。 JAR分发包含Jython和Robot Framework，因此只需要安装Java 。
具体的安装方式不再说明，可以参考对应的文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.创建测试数据&lt;/h3&gt;
&lt;h4&gt;2.1.1 文件和目录&lt;/h4&gt;
&lt;p&gt;安排测试用例的目录结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试用例在测试用例文件中创建&lt;/li&gt;
&lt;li&gt;测试用例文件自动创建一个包含测试用例的测试套件&lt;/li&gt;
&lt;li&gt;包含测试用例文件的目录形成一个更高级别的测试套件。这样的测试套件目录可以把测试用例文件创建的套件作为其子测试套件。&lt;/li&gt;
&lt;li&gt;测试套件目录可以包含其他测试套件目录，并且层次结构可以根据需要深入嵌套。&lt;/li&gt;
&lt;li&gt;测试套件目录可以有一个特殊的初始化文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试库包含最底层的关键字&lt;/li&gt;
&lt;li&gt;具有变量和高级别的用户关键字的资源文件&lt;/li&gt;
&lt;li&gt;变量文件提供比资源文件更灵活的变量创建方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.1.2 支持的文件格式&lt;/h4&gt;
&lt;p&gt;RF测试数据以表格格式定义，使用超文本标记语言(html),制表符分隔值(TSV), 纯文本或reStructureText格式。具体使用哪种格式取决于上下文，但如果没有特殊要求，建议使用纯文本格式。&lt;/p&gt;
&lt;p&gt;RF根据文件扩展名为测试数据文件选择一个解析器。扩展名不区分大小写，将.html,.htm和.xhtml识别为HTML,.tsv识别为TSV,.txt和.robot识别为纯文本，.rst和.rest识别为reStructuredText.&lt;/p&gt;
&lt;h5&gt;HTML格式&lt;/h5&gt;
&lt;p&gt;HTML文件支持格式化和表格周围的自由文本。 这使得可以在测试用例文件中添加附加信息，并允许创建看起来像正式测试规范的测试用例文件。 HTML格式的主要问题是使用普通文本编辑器编辑这些文件并不容易。另一个问题是HTML版本兼容问题，除对实际测试数据的更改之外，还包含html的语法差异。&lt;/p&gt;
&lt;p&gt;在html文件中，测试数据在单独的表中定义。RF根据第一个单元格中的文本识别这些测试数据表，表之外的内容均被忽略。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Library&lt;/td&gt;
&lt;td&gt;OperatingSystem&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;Hello, world!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;My Test&lt;/td&gt;
&lt;td&gt;[Documentation]&lt;/td&gt;
&lt;td&gt;Example test&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;My Keyword&lt;/td&gt;
&lt;td&gt;/tmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Another Test&lt;/td&gt;
&lt;td&gt;Should Be Equal&lt;/td&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;Hello, world!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;My Keyword&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;${path}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Directory Should Exist&lt;/td&gt;
&lt;td&gt;${path}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;编辑数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML格式的数据可以使用任何编辑器进行修改，最好使用图形的编辑器，因为可以看到表格。RIDE可以读写HTML文件，但它存在丢失除了表格之外内容的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编码和实体引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持html实体引用。另外，可以使用任何编码，假设它在数据文件中被指定。 正常的HTML文件必须使用META元素，如下例所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;XHTML文件需要使用XML前导码，如：
　
    &amp;lt;?xml version="1.0" encoding="Big5"?&amp;gt;&lt;/p&gt;
&lt;p&gt;如果编码没有指定，RF默认使用ISO-8859-1。&lt;/p&gt;
&lt;h4&gt;TSV格式&lt;/h4&gt;
&lt;p&gt;TSV文件可以在电子表格程序中编辑，且语法简单。可以使用正常的文本编辑器编辑，并且在版本控制中支持良好，纯文本格式更适合。
TSV格式可以用于RF的测试数据，与HTML相同，TSV文件中，所有数据都在一张大表中。测试数据从一个或多个星号(*)中识别,后跟正常表名和可选的关闭星号。和HTML忽略第一个表之外的内容类似，TSV忽略第一个表识别前的所有内容。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;*Setting*&lt;/th&gt;
&lt;th&gt;*Value*&lt;/th&gt;
&lt;th&gt;*Value*&lt;/th&gt;
&lt;th&gt;*Value*&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Libary&lt;/td&gt;
&lt;td&gt;OperatingSystem&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*Variable*&lt;/td&gt;
&lt;td&gt;*Value*&lt;/td&gt;
&lt;td&gt;*Value*&lt;/td&gt;
&lt;td&gt;*Value*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;Hello,wold!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*Test Case*&lt;/td&gt;
&lt;td&gt;*Action*&lt;/td&gt;
&lt;td&gt;*Argument*&lt;/td&gt;
&lt;td&gt;*Argument*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;My Test&lt;/td&gt;
&lt;td&gt;[Documentation]&lt;/td&gt;
&lt;td&gt;Example test&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;My Keyword&lt;/td&gt;
&lt;td&gt;/tmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Another Test&lt;/td&gt;
&lt;td&gt;Should Be Equal&lt;/td&gt;
&lt;td&gt;${MESSAGE}&lt;/td&gt;
&lt;td&gt;Hello, world!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*Keyword*&lt;/td&gt;
&lt;td&gt;*Action*&lt;/td&gt;
&lt;td&gt;*Argument*&lt;/td&gt;
&lt;td&gt;*Argument*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;My Keyword&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;${path}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Directory Should Exist&lt;/td&gt;
&lt;td&gt;${path}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;编辑测试数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以在任何电子表格程序（如Microsoft Excel）中创建和编辑TSV文件。 保存文件时选择标签分隔格式，并记住将文件扩展名设置为.tsv 。 关闭所有自动更正并配置工具以将文件中的所有值视为纯文本也是一个好主意。&lt;/p&gt;
&lt;p&gt;使用任何文本编辑器，TSV文件相对易于编辑，特别是如果编辑器支持从空格中分离选项卡。 RIDE也支持TSV格式。&lt;/p&gt;
&lt;p&gt;Robot Framework通过首先将所有内容分成行，然后根据表格字符将行分解为单元格来解析TSV数据。 电子表格程序有时用引号围住单元格（例如， "my value" ），而Robot Framework会删除它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TSV文件使用UTF-8编码.&lt;/p&gt;
&lt;h4&gt;纯文本格式&lt;/h4&gt;
&lt;p&gt;纯文本格式易于编辑，而且版本控制方面处理也比较好，因此是RF中最为常用的数据格式。&lt;/p&gt;
&lt;p&gt;纯文本格式技术上和TSV格式类似，但是单元格直接的分隔符不同。TSV格式使用选项卡，但纯文本格式，使用两个或更多空格或|包围的管道符合分隔。&lt;/p&gt;
&lt;p&gt;测试数据表必须在TSV格式之前的名称前必须有一个或多个星号。否则，表头中的星号和空格会被忽略，例如，***Setting***和*Settings工作方式相同。与TSV格式类似，第一个表之前的所有内容将被忽略。&lt;/p&gt;
&lt;p&gt;在纯文本文件中，选项卡将自动转换为两个空格。这允许使用单个选项卡作为分离器，类似于TSV格式。但注意，在纯文本格式中，多个选项卡被认为是单个分隔符，而在TSV格式中，每个选项卡都将是一个分隔符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;空格分隔格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要存在至少两个空格，用作分隔符的空格数可以有所不同，因此可以很好地对齐数据。 这对于在文本编辑器中编辑TSV格式是一个明显的好处，因为TSV无法控制对齐。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*** Settings ***
Library     OperatingSystem

*** Variables ***
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;  Hello, world!

*** Test Cases ***
My Test
    [Documentation]    Example test
    Log    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    My Keyword    /tmp

Another Test
    Should Be Equal    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;    Hello, world!

*** Keywords ***
My Keyword
    [Arguments] &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    Directory Should Exist &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为空格用作分隔符，所有空单元格必须使用${EMPTY}变量或单个反斜杠进行转义。否则处理空格与其他测试数据不同，因为前导，后跟和连续空格必须始终被转义。
建议在关键字和参数之间使用４个空格&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管道和空格分隔格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;空格分隔格式的最大问题是，视觉分离关键字表单参数处理比较棘手，特别是关键字需要很多参数和参数中包含空格。这种情况下，管道和空格分隔的变体就可以很好的解决这个问题，它可以使得单元格边界更可见。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| *Setting*  |     *Value*     |
| Library    | OperatingSystem |

| *Variable* |     *Value*     |
| &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; | Hello, world!   |

| *Test Case*  | *Action*        | *Argument*   |
| My Test      | [Documentation] | Example test |
|              | Log             | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;   |
|              | My Keyword      | /tmp         |
| Another Test | Should Be Equal | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;   | Hello, world!

| *Keyword*  |
| My Keyword | [Arguments] | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
|            | Directory Should Exist | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很像markdown的表格语法。&lt;/p&gt;
&lt;p&gt;纯文本文件可以包含空格和空格和管道分隔格式的测试数据，但是单行必须始终使用相同的分隔符。 管道和空间分隔的管线由强制引导管道识别，但管道末端的管道是可选的。 管道两侧必须至少有一个空间（除了在开始和结束之外），但是如果使数据更加清晰，则不需要对齐管道。&lt;/p&gt;
&lt;p&gt;当使用管道和空格分隔的格式时，不需要转义空单元格（除了空单元格之外 ）。 唯一需要考虑的是，实际测试数据中空格包围的可能管道必须使用反斜杠进行转义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| *** Test Cases *** |                 |                 |                      |
| Escaping Pipe      | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; = | Execute Command | ls -1 *.txt \| wc -l |
|                    | Should Be Equal | &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;   | 42                   |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;编辑和编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;纯文本和html及TSV之间最大的优点是使用普通文本编辑器进行编辑非常简单。
类似TSV测试数据，纯文本使用UTF-8编码。&lt;/p&gt;
&lt;p&gt;从Robot Framework 2.7.6开始，除了普通的.txt扩展名之外，还可以使用特殊的.robot扩展名保存纯文本测试数据文件。 新的扩展使得更容易将测试数据文件与其他纯文本文件区分开来。&lt;/p&gt;
&lt;h4&gt;reStructuredText的格式&lt;/h4&gt;
&lt;p&gt;reStructuredText的（REST）是通常用于Python项目（包括Python本身，以及本用户指南）的文档中的一个易于阅读纯文本标记语法。reST文档最常编译成HTML，也支持其他输出格式。&lt;/p&gt;
&lt;p&gt;使用rest格式可以使用简单的文本编辑编辑，支持比较工具和源代码控制系统。具体应用时，结合了很多的纯文本和HTML格式的特点。&lt;/p&gt;
&lt;p&gt;RF使用reST文件，有两种方式来定义测试数据，要么使用代码块，要么使用纯文本格式。
使用rest文件，需要python的docutils模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用代码块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;reST文档可以把代码示例包含在代码块宏。当这些文件被翻译成HTML或其他格式的代码时，可以用Pygments实现语法高亮。标准的reST代码块已开始使用code指令，但是Sphinx使用code-block或sourcecode替代。编程语言的名称在代码块中作为指令的参数。例如，下面的代码块包含了python和RF：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; python
    def example_keyword():
        print &amp;#39;Hello, world!&amp;#39;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;robotframework&lt;/span&gt;

    &lt;span class="gh"&gt;*** Test Case ***&lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;
    &lt;span class="gu"&gt;Example Test&lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;
    &lt;span class="p"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;Example Keyword&lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当RF解析reSt文件时，首先搜索code,code-block或sourcecode中包含RF的测试数据块。如果找到代码块，它们包含的数据被写入到内存中的文件执行，代码块外的数据忽略。
代码块中的测试数据必须使用被定义的纯文本格式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Example&lt;/span&gt;
&lt;span class="gh"&gt;-------&lt;/span&gt;
This text is outside code blocks and thus ignored.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; robotframework
    &lt;span class="gs"&gt;*** Settings **&lt;/span&gt;*
    Libary    OperatingSystem

    &lt;span class="gs"&gt;*** Variables **&lt;/span&gt;*
    ${MESSAGE}    Hello, world

    &lt;span class="gs"&gt;*** Test Cases **&lt;/span&gt;*
    My Test
        [Documentation]    Example test
        Log    ${MESSAGE}
        My Keyword    /tmp

Another Test
    Should Be Equal    ${MESSAGE}    Hello, world!

Also this text is outside code blocks and ignored. Above block used
the space separated plain text format and the block below uses the pipe
separated variant.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; robotframework

&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="gs"&gt;*** Keyword **&lt;/span&gt;*  |                        |         |
&lt;span class="o"&gt;|&lt;/span&gt; My Keyword       | [Arguments]            | ${path} |
&lt;span class="o"&gt;|&lt;/span&gt;                  | Directory Should Exist | ${path} |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;转义使用反斜杠字符在这种格式正常工作。没有双转义是需要使用REST表时一样。2.8.2版本之后支持代码块的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用表格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果reST文档包含RF测试数据没有代码块，包含了类似html格式的表格数据。这种情况下，RF将当做html文档进行处理。&lt;/p&gt;
&lt;p&gt;RF确定测试的数据表中第一个单元格的文本，其余的内容被忽略。如下面数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Example&lt;/span&gt;
&lt;span class="gh"&gt;-------&lt;/span&gt;

This text is outside tables and thus ignored.

============  ================  =======  =======
  Setting          Value         Value    Value
============  ================  =======  =======
Library       OperatingSystem
============  ================  =======  =======


============  ================  =======  =======
  Variable         Value         Value    Value
============  ================  =======  =======
${MESSAGE}    Hello, world!
============  ================  =======  =======


=============  ==================  ============  =============
  Test Case          Action          Argument      Argument
=============  ==================  ============  =============
My Test        [Documentation]     Example test
\              Log                 ${MESSAGE}
\              My Keyword          /tmp
\
Another Test   Should Be Equal     ${MESSAGE}    Hello, world!
=============  ==================  ============  =============

Also this text is outside tables and ignored. Above tables are created
using the simple table syntax and the table below uses the grid table
approach.

+-------------+------------------------+------------+------------+
&lt;span class="o"&gt;|&lt;/span&gt;   Keyword   |         Action         |  Argument  |  Argument  |
+-------------+------------------------+------------+------------+
&lt;span class="o"&gt;|&lt;/span&gt; My Keyword  | [Arguments]            | ${path}    |            |
+-------------+------------------------+------------+------------+
&lt;span class="o"&gt;|&lt;/span&gt;             | Directory Should Exist | ${path}    |            |
+-------------+------------------------+------------+------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在简单的表格的第一列空单元格需要进行转义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编辑和编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;reSt格式的文档中测试数据可以用任何文本编辑器进行编辑，并且很多编辑也提供了自动语法高亮显示它。但reST格式不支持通过RIDE编辑。&lt;/p&gt;
&lt;p&gt;RF需要使用UTF-8编码来保存含非ASCII字符的reST文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REST中源文件的语法错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果reStructuredText文档语法不正确（格式不正确的表为例），解析时会失败，并且找不到测试用例。当执行单一的reST文件时，RF会在终端显示错误。当执行一个目录，解析错误通常会被忽略。&lt;/p&gt;
&lt;p&gt;从机器人框架2.9.2开始，SEVERE级以下的错误，为避免对非标准指令和其他标记的影响被忽略。这样会掩盖真正的错误，但他们可以在正常处理文件时看到。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 26 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-03-26:2017/03/26/Robot/</guid><category>Framework</category></item><item><title>Robot Framework快速入门</title><link>http://king32783784.github.io/2017/03/24/Robot/</link><description>&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;本文主要介绍了Robot Framework的重要组件。可以快速浏览该文和相关示例来了解该框架。该框架重要的特性，本文都会涉及。本文主要翻译于RF官方快速文档及个人理解。&lt;/p&gt;
&lt;h3&gt;RF概述&lt;/h3&gt;
&lt;p&gt;RF框架是用于验收测试和验收测试驱动开发（ATDD)的通用开源测试框架。它具备易于使用的表格测试数据语法，并且使用关键字驱动测试的方法。它的测试功能可以通过使用python或java实现的测试库来进行扩展，用户可以使用用于创建测试用例的相同语法从现有的关键字创建新的更高级别的关键字。&lt;/p&gt;
&lt;p&gt;RF框架独立于操作系统和应用程序。核心框架是使用python实现的，可以在jython(JVM)和IronPython(.NET)上运行。该框架具有丰富的生态系统，包括作为单独项目开发的各种通用测试库和工具。&lt;/p&gt;
&lt;p&gt;关于RF和其生态系统的更多信息，参阅&lt;a href="http://robotframework.org"&gt;http://robotframework.org&lt;/a&gt;.后续，本站也会进行更详细的梳理。&lt;/p&gt;
&lt;h3&gt;应用演示&lt;/h3&gt;
&lt;p&gt;本文的应用示例程序是传统登录示例的一个变体：它是基于一个命令行的python编写的身份验证服务器。该应用程序允许用户做以下三件事：
 * 创建一个有效密码的账号
 * 使用有效的用户名和密码登陆
 * 更改现有账号的密码&lt;/p&gt;
&lt;p&gt;应用程序本身在sut/login.py文件中，可以使用命令python sut/login.py执行。尝试使用不存在的用户账号或密码无效登录会导致相同的错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python sut/login.py login nobody P4ssw0rd
Access Denied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建具有有效密码登陆的用户账号后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python sut/login.py create fred P4ssw0rd
SUCCESS

&amp;gt; python sut/login.py login fred P4ssw0rd
Logged In
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;密码必须符合两个要求：必须在7-12个字符之间，它必须包含大小写的字母和数字，但不能包含特殊字符。尝试创建无效密码的用户：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python sut/login.py create fred short
Creating user failed: Password must be 7-12 characters long

&amp;gt; python sut/login.py creadt fred invalid
Creating user failed: Password must be a combination of lowercase and uppercase letters and numbers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用无效凭据修改密码会导致和使用无效凭据登陆相同的报错信息。验证新密码的有效性，如果无效，则会显示错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python sut/login.py change-password fred wrong NewP4ss
Changing password failed: Access Denied

&amp;gt; python sut/login.py change-password fred P4ssw0rd short
Changing password failed: Password must be 7-12 characters long

&amp;gt; python sut/login.py change-password fred P4ssw0rd NewP4ss
SUCCESS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;应用程序使用简单的数据库文件来跟踪用户状态。该文件位于与操作系统相关的临时目录中。&lt;/p&gt;
&lt;h3&gt;执行指南&lt;/h3&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;在python上安装RF推荐使用pip。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install robotframework
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于其他的安装方式，请参考RF的安装说明。&lt;/p&gt;
&lt;p&gt;示例中的代码块中的RF测试数据采用reStructuredText标记语言（python中很多说明文档都采用该格式，类似markdown)编写。
执行该格式的用例需要安装docutils模块：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install docutils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：Robot Framework 3.0 是第一个支持Python3的RF版本。&lt;/p&gt;
&lt;h4&gt;执行&lt;/h4&gt;
&lt;p&gt;安装完成后，需要获取示例本身。最简单的方式就是&lt;a href="https://github.com/robotframework/QuickStartGuide.git"&gt;clone&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当安装完成并且所有准备就绪后，可以使用robot命令执行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;robot QuickStart.rst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你是RF2.9或更新版本，可以使用pybot来替代robot：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pybot QuickStart.rst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行log：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;==============================================================================
QuickStart                                                                    
==============================================================================
User can create an account and log in                                 | PASS |
------------------------------------------------------------------------------
User cannot log in with bad password                                  | PASS |
------------------------------------------------------------------------------
User can change password                                              | PASS |
------------------------------------------------------------------------------
Invalid password                                                      | PASS |
------------------------------------------------------------------------------
User status is stored in database                                     | PASS |
------------------------------------------------------------------------------
QuickStart                                                            | PASS |
5 critical tests, 5 passed, 0 failed
5 tests total, 5 passed, 0 failed
==============================================================================
Output:  /home/isoft_lp/Github/Testtool/QuickStartGuide/output.xml
Log:     /home/isoft_lp/Github/Testtool/QuickStartGuide/log.html
Report:  /home/isoft_lp/Github/Testtool/QuickStartGuide/report.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和python unittest很像啊。&lt;/p&gt;
&lt;p&gt;同样可以使用各种命令行参数进行执行设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;robot --log custom_log.html --name Custom_Name QuickStart.rst.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;--log 指定了log名称,默认为log.html, --name 指定了测试名称，默认为测试数据文件名。
关于pybot参数说明,可以运行pybot --help查看。后续会对这些参数进行详细说明。&lt;/p&gt;
&lt;h4&gt;查看结果&lt;/h4&gt;
&lt;p&gt;上面执行的过程，可以看到生成了3个结果文件。这些文件链接在线可执行文件，但是执行示例会在本地创建结果文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;report.html  测试报告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/rf-qsreport.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log.html 详细测试执行日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/rf-qsresult.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;out.xml 机器可读的xml格式结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;测试用例&lt;/h3&gt;
&lt;h4&gt;工作流测试&lt;/h4&gt;
&lt;p&gt;RF测试用例使用简单的表格语法创建。例如，下面有两个测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以创建一个账户并登录&lt;/li&gt;
&lt;li&gt;用户使用错误密码被拒绝登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;测试用例&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;User can create an account and log in&lt;/td&gt;
&lt;td&gt;Create Valid User&lt;/td&gt;
&lt;td&gt;fred&lt;/td&gt;
&lt;td&gt;P4ssw0rd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Attempt to Login with Credentials&lt;/td&gt;
&lt;td&gt;fred&lt;/td&gt;
&lt;td&gt;P4ssw0rd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status Should Be&lt;/td&gt;
&lt;td&gt;Logged In&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User cantnot log in with bad password&lt;/td&gt;
&lt;td&gt;Create Valid User&lt;/td&gt;
&lt;td&gt;betty&lt;/td&gt;
&lt;td&gt;P4ssw0rd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Attempt to Login with Credentials&lt;/td&gt;
&lt;td&gt;betty&lt;/td&gt;
&lt;td&gt;wrong&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status Should Be&lt;/td&gt;
&lt;td&gt;Access Denied&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;robot Framework 使用关键词驱动的方式，支持用自然语言来编写可以抓住动作和期望值的本质的测试。测试用例由关键词(通常在第二列)和它们可能的参数组成。&lt;/p&gt;
&lt;p&gt;测试用例由关键字及其参数构成。语法要求其关键字和参数，以及设置及其值至少有两个空格或制表符分隔。通常建议使用4个空格分隔符更明确（不同设置下制表符不一样）。关于语法方面后续文章会再介绍。&lt;/p&gt;
&lt;h4&gt;高级测试&lt;/h4&gt;
&lt;p&gt;测试用例可以仅使用不具有位置参数的高级关键字来创建。这种风格允许使用完全自由的文本，甚至适用于非技术人员或其他项目利益者进行沟通。当使用验收测试驱动开发(ATDD)方法或其他任何变体和创建测试时尤为重要。&lt;/p&gt;
&lt;p&gt;RF不强制编写测试用例的风格，它可以使用行为驱动开发（BDD）推荐的given-when-then格式的样例，如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Steps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;User can change password&lt;/td&gt;
&lt;td&gt;Given a user has a valid account&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;when she changes her password&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;then she can log in with new password&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;and she cannot use the old password anymore&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这种测试用例或用户故事风格的测试用例类型很适合用于acceptance test-driven development(ATDD).在ATDD中接收测试在实现实际产品特性前编写并且反映了需求。&lt;/p&gt;
&lt;h4&gt;数据驱动测试用例&lt;/h4&gt;
&lt;p&gt;通常，几个测试用例相似，但他们的输入和输出数据略有不同。在这种情况下，数据驱动的测试允许改变测试数据，而不会重复工作流程。使用RF的[Template]将测试用例转为数据驱动测试，当template关键字执行时使用测试用例主体中的定义的数据：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;th&gt;Expected error message&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Too short password&lt;/td&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;abCD5&lt;/td&gt;
&lt;td&gt;\${PWD INVALID LENGTH}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Too long password&lt;/td&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;abCD567890123&lt;/td&gt;
&lt;td&gt;\${PWD INVALID LENGTH}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Password without lowercase letters&lt;/td&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;123DEFG&lt;/td&gt;
&lt;td&gt;\${PWD INVALID CONTENT}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Password without capital letters&lt;/td&gt;
&lt;td&gt;Creating user with invalid passworld should fail&lt;/td&gt;
&lt;td&gt;abcd56789&lt;/td&gt;
&lt;td&gt;\${PWD INVALID CONTENT}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Password without numbers&lt;/td&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;AbCdEfGh&lt;/td&gt;
&lt;td&gt;\${PWD INVALID CONTENT}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Password without special characters&lt;/td&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;abCD56+&lt;/td&gt;
&lt;td&gt;\${PWD INVALID CONTENT}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了使用具有单独测试的[模板]设置以外，可以在设置表中使用“测试模块”设置一次，如本文中定义的setups和teardowns.这种情况下，为无效长度密码案例和其他无效案例创建单独的命令测试将变得很简单。然而，这需要将这些测试移动到独立的文件，否则模板将应用与此文件中其他的测试。&lt;/p&gt;
&lt;p&gt;注意，上述示例中的错误信息是使用变量指定的。&lt;/p&gt;
&lt;h3&gt;关键词&lt;/h3&gt;
&lt;p&gt;用于测试用例创建的关键字来源主要有两个，重要测试库中的库关键字和可以使用与创建测试用例相同语法创建的用户关键字。&lt;/p&gt;
&lt;h4&gt;库关键字&lt;/h4&gt;
&lt;p&gt;所有最低级别的关键字都在使用标准编程语言(python或java)实现的测试库中定义。RF附带了一些测试库，可以分为标准库，外部库和自定义库。标准库和核心框架一起分发，并包括通用库，如OperatingSystem, Screenshot和Builtln,特别之处在于它的关键字可以自动使用。外部库，如用于web测试的selenium2Libary,必须单独安装。如果可用的测试库不够满足需求，可以很容易的创建自定义测试库。&lt;/p&gt;
&lt;p&gt;为了能使用测试库提供的关键字，必须使用库设置导入关键字。本文中的测试需要标准OperatingSystem库（如删除文件）和定制LoginLibary(例如尝试常用凭据登陆）中的关键字。这两个库是在下面的设置表中导入的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Settings&lt;/strong&gt;
Library       OperatingSystem
Library       lib/LoginLibray.py&lt;/p&gt;
&lt;h4&gt;用户关键字&lt;/h4&gt;
&lt;p&gt;RF框架最强大的功能之一就是能够轻松地从其他关键字创建新的更高级别的关键字。创建这些所谓的用户定义关键字或用户关键字的语法类似于用于创建测试用例的语法。以前的测试用例中需要的更高级别的关键字都在此关键字表中创建：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Clear login database&lt;/td&gt;
&lt;td&gt;Remove file&lt;/td&gt;
&lt;td&gt;\${DATABASE FILE}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create valid user&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create user&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status should be&lt;/td&gt;
&lt;td&gt;SUCCESS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Creating user with invalid password should fail&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;td&gt;\${error}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create user&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status should be&lt;/td&gt;
&lt;td&gt;Creating user failed: \${error}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Login&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Attempt to login with credentials&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status should be&lt;/td&gt;
&lt;td&gt;Logged In&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# Used by BDD test cases(this is a comment&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Given a user has a valid account&lt;/td&gt;
&lt;td&gt;Create valid user&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${PASSWORD}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;\${NEW PASSWORD}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status should be&lt;/td&gt;
&lt;td&gt;SUCCESS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Then she can log in with the new password&lt;/td&gt;
&lt;td&gt;Login&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${NEW PASSWORD}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Status should be&lt;/td&gt;
&lt;td&gt;Access Denied&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用户定义的关键字可以包括由其他用户定义或库关键字定义的操作。从这个例子可以看出，用户定义的关键字可以作为参数。它们也可以返回值，甚至包含FOR循环。现在，重要的是要知道用户定义的关键字使得测试创建者能够为常见的动作序列创建可重复使用的步骤。用户自定义的关键字可以帮助作者将测试尽可能的读取，并在不同的情况下使用适当的抽象级别。&lt;/p&gt;
&lt;h3&gt;变量&lt;/h3&gt;
&lt;h4&gt;定义变量&lt;/h4&gt;
&lt;p&gt;变量是RF的组成部分，通常在测试中使用的任何可能发生变化的数据最好定义为变量。变量定义的语法很简单，如变量表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;janedoe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\${PASSWORD}&lt;/td&gt;
&lt;td&gt;J4n3D0e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\${NEW PASSWORD}&lt;/td&gt;
&lt;td&gt;e0D3n4j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\${DATABASE FILE}&lt;/td&gt;
&lt;td&gt;\&lt;span class="math"&gt;\(\{TEMPDIR\}\\\)&lt;/span&gt;{/}robotframework-quickstart-db.txt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\${PWD INVALID LENGTH}&lt;/td&gt;
&lt;td&gt;Password must be 7-12 characters long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\${PWD INVALID CONTENT}&lt;/td&gt;
&lt;td&gt;Password must be a combination of lowercase and uppercase letters and numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;变量还可以在命令行指定，如果测试需要在不同的环境中执行，这非常有用。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;robot --variable USERNAME:johndoe --variable PASSWORD:J0hnD0e QuickStart.rst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了用户定义的变量外，还有一些内置的变量始终可用。这些变量包括上面例子使用的\&lt;span class="math"&gt;\(\{TEMPDIR\}和\\)&lt;/span&gt;{/}。&lt;/p&gt;
&lt;h4&gt;使用变量&lt;/h4&gt;
&lt;p&gt;变量可以在测试数据的大部分地方使用。它们最常用作关键字的参数，如以下测试用例所示。来自关键字的返回值也可以分配给变量，可以作为以后使用。例如，以下数据库包含user关键字将数据库内容设置为${database}变量，然后使用BuiltIn关键字Should Contain来验证内容。库和用户关键字都可以返回值。&lt;/p&gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Test Case&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;User status is stored in database&lt;/td&gt;
&lt;td&gt;[Tags]&lt;/td&gt;
&lt;td&gt;variables&lt;/td&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create Valid User&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${PASSWORD}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Database Should Contain&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${PASSWORD}&lt;/td&gt;
&lt;td&gt;Inactive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Login&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${PASSWOED}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Database Should Contain&lt;/td&gt;
&lt;td&gt;\${USERNAME}&lt;/td&gt;
&lt;td&gt;\${PASSWORD}&lt;/td&gt;
&lt;td&gt;Active&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Database Should Contain&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;\${username}&lt;/td&gt;
&lt;td&gt;\${password}&lt;/td&gt;
&lt;td&gt;\${status}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;\${database}=&lt;/td&gt;
&lt;td&gt;Get File&lt;/td&gt;
&lt;td&gt;\${DATABASE FILE}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Should Contain&lt;/td&gt;
&lt;td&gt;\${database}&lt;/td&gt;
&lt;td&gt;\&lt;span class="math"&gt;\(\{username\}/t\\)&lt;/span&gt;{password}/t\${status}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;测试用例组织&lt;/h3&gt;
&lt;h4&gt;测试套件&lt;/h4&gt;
&lt;p&gt;RF中测试用例的集合称为测试套件。每个包含测试用例的输入文件构成测试套件。执行本指南时，你可以在终端输出中看到测试套件QuickStart.该名称源自文件名，并且在报告和日志中可见。&lt;/p&gt;
&lt;p&gt;可以通过将测试用例文件放入目录并将这些目录放入其他目录中来分层组织测试用例。所以这些目录自动创建更高级别的测试套件，从目录名称中获取其名称。由于测试套件只是文件和目录，他们被简单地放置到任何版本控制系统中。&lt;/p&gt;
&lt;h4&gt;Setups 和 teardowns&lt;/h4&gt;
&lt;p&gt;如果你希望在每次测试之前或之后执行某些关键字，请使用设置表中的setup 和 Teardown 设置。同样，可以使用“suite setup"和"suite Teardown”设置来指定整个测试套件之前和/或之后执行的关键字。&lt;/p&gt;
&lt;p&gt;使用测试用例表中的[setup]和[Teardown]，单个测试也可以进行自定义setup和teardown。这与早期使用数据驱动测试的[Template]相同。&lt;/p&gt;
&lt;p&gt;在这个演示中，我们希望在执行开始之前确保数据库被清除，并且每次测试也会在之后清除：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Test Setup&lt;/td&gt;
&lt;td&gt;Clear Login Database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test Teardown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RF允许将测试用例的标签设置为自由的元数据。可以在具有强制标签和默认标签设置的文件中为所有测试用例设置标签，如下表所示。还可以使用[Tags]设置为单个测试用例定义标签，如早期用户状态存储在数据库测试中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Force Tags&lt;/td&gt;
&lt;td&gt;quickstart&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Default Tags&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;smoke&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当你在测试执行后查看报告时，您可以看到测试已经指定了与它们相关联的标签，还有基于标签生成的统计信息。标签可以用于许多其他目的，最重要的是选择要执行的测试的可能性之一。例如，可以尝试以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;robot --include smoke QuickStart.rst
robot --exclude database QuickStart.rst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;RF提供了一个用于使用python或Java创建测试库的API,远程库接口还允许使用其他编程语言。RF用户指南包含有关库API的详细说明。&lt;/p&gt;
&lt;p&gt;例如，我们可以看一下本演示中使用的LoginLibrary测试库。该库位于lib/LoginLibary.py。下面是其代码，例如，关键字Create User如何映射到方法create_user的实际实现。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# *-*coding=utf-8*-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sut_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                      &lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;login.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_pwd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;change-password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;attempt_to_login_with_credentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;status_should_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excepted_status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expected_status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expected status to be &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; but was &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;.&amp;quot;&lt;/span&gt;
                                 &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sut_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;到此，相信大家对Robot Framework应该有了一个初步的认识了。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 24 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-03-24:2017/03/24/Robot/</guid><category>Framework</category></item><item><title>Itest测试工具介绍</title><link>http://king32783784.github.io/2017/03/22/itest/</link><description>&lt;h3&gt;基本介绍&lt;/h3&gt;
&lt;p&gt;本文介绍了itest(自研测试工具）的制作目的、测试范围、常用功能、测试方法。该工具目前处于开发阶段，仍有部分功能未实现，存在一些稳定性、兼容性的问题。&lt;/p&gt;
&lt;h3&gt;制作目的&lt;/h3&gt;
&lt;p&gt;进行linux系统测试时，需要进行系统信息抓取、功能性测试、性能测试、稳定性测试。其中信息抓取、性能测试、稳定性测试大部分情况下需要进行多轮次的测试。比如系统信息抓取包含系统软硬件信息的多个方面如 cpu信息、gcc信息等等；性能测试包括cpu、内存、内核等等；稳定性测试包括io、多线程、图形、内核等等；功能测试包括内核系统调用、常用服务/命令（主要包括目前自动化实现的部分）。这些可以自动化实现的测试，之前我们多多少少的都做了一些测试脚本进行了实现，itest制作的目的是为了整合这些测试，并且提供一个简单操作的GUI界面。主界面如下&lt;/p&gt;
&lt;h3&gt;测试范围&lt;/h3&gt;
&lt;p&gt;itest目前支持的测试包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统信息抓取 包括：硬件信息抓取和系统核心组件信息抓取。硬件信息主要包括：处理器、主板、BIOS、内存、北桥、南桥、显卡、网卡、无线网卡、SATA、硬盘、光驱、RAID、蓝牙、USB设备、键鼠等；核心组件信息包括：系统版本、内核版本、文件系统、GCC、GLIBC、桌面管理器、QT、XORG、MESA、Java、浏览器、北桥驱动、南桥驱动、显卡驱动、网卡驱动、声卡驱动、RAID卡驱动等信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能测试 目前只支持ltp内核功能测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能测试，包括：CPU运算（支持sysbench)、MEM操作（支持sysbench、stream）、I/0操作（支持iozone)、线程管理（支持pingpong )、系统基准(支持unixbench)、内核（支持lmbench）、浏览器（支持css、acid、V8、octane、html、dromaeo）、JAVA(支持specjvm)、2D（支持 x11perf、qtperf)、3D（gerars、GLmark）、网络(涉及两台机器，暂不支持）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压力测试,包括：系统压力测试、处理器压力测试、内存压力测试、多线程压力测试、IO压力测试、2D压力测试、3D压力测试。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;itest常用功能&lt;/h3&gt;
&lt;p&gt;itest 常用功能包括测试工具存放定制、邮件订阅结果功能、测试项目选择、测试项目参数指定、测试结果查看、测试报告查看、测试报告制作、系统资源监控、测试日志查看等。下面分别介绍这些功能。&lt;/p&gt;
&lt;p&gt;主界面如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-main.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试工具存放定制指的是，itest本身只是一个测试框架，并不包含测试过程中涉及的测试工具如iozone，这些工具是独立的。这就存在一个工具获取方式的问题，itest支持远程获取和本地目录两种形式，设置界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-seting.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;邮件订阅功能，性能测试和稳定性测试大部分需要较长的时间，而且都是无人值守的测试。为了实现第一时间掌握测试结果的需求，考虑实现邮件订阅功能，将需要了解测试结果人员的邮件添加到邮件订阅列表，测试完成后，itest会自动将测试报告以邮件的形式发送给订阅者，设置界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-mail.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试项目选择，itest可以根据自己的测试需求，选择对应的测试项目，如只进行性能测试中的cpu性能测试，只需勾选对应测试项目即可。如下图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-itemcheak.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;部分测试项目包含多个测试工具或测试点，可以根据需要进行定制，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-itemset.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;具体的测试项目同样支持测试参数的指定，如iozone,需要设置测试文件大小、测试模式、测试块大小、测试次数、测试线程数数等参数，设置方法如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-item.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试结果查看，测试完成后，可以进行测试结果的查看，如选择cpu性能测试中的sysbench进行测试，测试完成后，点击查看结果，会打开对应的结果管理器，结果如下图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-result?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试报告查看，如果进行了多次测试并且保存了多个测试报告，itest提供测试报告的查阅功能，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-resultsearch.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;测试报告制作，itest可以进行多次测试结果或不同系统测试结果进行对比测试报告的制作，计划支持的报告格式为html和xls，目前仅集成了html格式的报告，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-mkresult.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;系统资源监控，itest支持系统资源的实时监控，目前支持监控项目包括cpu负载、内存负载、SWAP负载、网络负载。在主界面点击查看负载，即可打开负载监视器，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/itest-load.png?raw=true" height="240" width="320"&gt;&lt;/p&gt;
&lt;p&gt;其他功能，界面中包含了一个测试任务执行的进度条，可以初步判断测试执行的进行，一个测试日志显示窗口，该测试日志显示当前测试的项目和已经完成的测试项目。设计包括测试详细日志的查看功能，目前未实现。&lt;/p&gt;
&lt;p&gt;工具其他说明&lt;/p&gt;
&lt;p&gt;目前该工具已在桌面4.0系列的产品进行了测试验证，其他产品暂未进行兼容测试。该工具后台主要由python实现，前端由pyqt实现。对系统的主要依赖包括pyqt(UI界面）、pandoc（报告制作）、selenium（浏览器测试）等模块。测试时依赖网络(部分测试工具需要进行依赖包的安装，测试工具的下载）。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/king32783784/itest"&gt;itest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/king32783784/itest/issues"&gt;已知bug&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 22 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-03-22:2017/03/22/itest/</guid><category>itest</category></item><item><title>位操作</title><link>http://king32783784.github.io/2017/02/23/python/</link><description>&lt;p&gt;最近碰到一个问题，是取一个数的反数，所以整理了一下位操作。
计算机系统中所有的数据都是以二进制的形式存储的。位运算其实就是直接对在内存中的二进制数据进行操作，因此数据处理会比较快。
在实际编程中，如果能合理运用位操作，能提高运行效率，解决一些复杂问题。&lt;/p&gt;
&lt;h3&gt;位操作基础&lt;/h3&gt;
&lt;p&gt;基本的位操作符有与、或、异或、取反、左移、右移。运算规则如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;运算规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;'&amp;amp;'&lt;/td&gt;
&lt;td&gt;与&lt;/td&gt;
&lt;td&gt;两个位都为１，结果为１&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'I'&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td&gt;两个位都为０，结果才为０（只要有1就为1）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'^'&lt;/td&gt;
&lt;td&gt;异或&lt;/td&gt;
&lt;td&gt;两个位相同为0， 相异为1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'～'&lt;/td&gt;
&lt;td&gt;取反&lt;/td&gt;
&lt;td&gt;0变1， 1变0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'&amp;lt;&amp;lt;'&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;td&gt;各个二进制位全部左移若干位，高位丢弃，低位补0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'&amp;gt;&amp;gt;'&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;td&gt;各二进位全部右移若干位，对无符号数，高位补0， 有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有～为单目运算符，其他的为双目运算符&lt;/li&gt;
&lt;li&gt;位操作只能作用于整型数据&lt;/li&gt;
&lt;li&gt;位操作符的运算优先级比较低，因此使用时注意括号的添加&lt;/li&gt;
&lt;li&gt;位算符可以复合操作，比如&amp;amp;=、|=、^=、&amp;lt;&amp;lt;=、&amp;gt;&amp;gt;=。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;常用位操作例子&lt;/h3&gt;
&lt;h4&gt;1.判断奇偶&lt;/h4&gt;
&lt;p&gt;显然的，最末位为0的为偶数，为1的为奇数。因此可以使用a &amp;amp; 1是否为0来判断，如果为0则表明为偶数，为1表明为奇数&lt;/p&gt;
&lt;p&gt;下面的程序，将输出0到100之间的所有偶数&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* utf-8 *-*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;geteven&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="n"&gt;geteven&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;2.交换两数&lt;/h4&gt;
&lt;p&gt;一般的写法为，借助第三个变量来保存其中一个变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def change(x,y):
    z=x
    x=y
    y=z
    return x,y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用位操作，可以不借助第三个变量&lt;/p&gt;
&lt;p&gt;首先 a^=b 即 a=(a^b)
然后 b^=a 即b = b^a 将a替换为(a^b)得到 b=b^(a^b),由于^满足交换率，b^(a^b)=b^b^a 由于一个数和自己异或的结果为0，并且任何书和0异或都不会变。因此
b=b^(a^b)=b^b^a=0^a。 b=a
最后a^=b即 a=a^b 前面已得到a=(a^b), b=a 所以 a=a^b即a=(a^b)^a = a^a^b=0^b=b
故代码还可以这样写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def change(x,y)
    x^=y
    y^=x
    x^=y
    return x,y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以具体的实例来说明一下：&lt;/p&gt;
&lt;p&gt;比如x=7 y=5
7的二进制为 4+2+1 即0111
5的二进制为 4+1   即0101
第一步 x^=y x = 0111 ^ 0101 = 1101 
第二步 y^=x y = 0101 ^ 1101 = 0111; 这时y为0111即7，也就是x
第三步 x^=y x = 1101 ^ 0111 = 0101; 这时x为0101即5，也就是y&lt;/p&gt;
&lt;h4&gt;3.交换符号&lt;/h4&gt;
&lt;p&gt;交换符号，顾名思义，即为正变负。
其实用普通方法也很简单：
x=-x 例如 1 -1 -12 12 
但通过位操作也很方便
比如 -11
11110101(-11) 取反为0001010 加1 为00001011 即11
00001011(11) 取反11110100 加1 为11110101 即-11
正负切换，只需原数取反后加1&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def signchange(x):
    return ~x+1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.求绝对值&lt;/h4&gt;
&lt;p&gt;位操作可以用来求绝对值，负数可以取反后加1.和前面讲的一样
如果32位有符号整型，右移31位得到最后一位符号位，如果为0，则为正数，如果为-1，为负数 正数直接返回，否则取反加1&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; def getabs(x):
     sign = x &amp;gt;&amp;gt; 31
     if sign is 0:
         return x
     else:
         return ~x + 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于任何数，和0异或都会保存不变。与-1异或相当于取反。因此 x与sign异或后再减sign(sign要么为0，要么为-1，-sign要么减0或减-1等于+1）也可以得到绝对值，代码可以改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getabs(x):
    sign = x &amp;gt;&amp;gt; 31
    return (x^sign) - sign
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;5.高低位交换&lt;/h4&gt;
&lt;p&gt;比如一个16位的无符号整数，前8位可以作为“高位”，后8位可以为“低位”，将其高低互换。
如34520:
10000110 11011000
变为
11011000 10000110
55430
将10000110 11011000 右移8位，即得到00000000 10000110，左移8位得到，11011000 00000000，然后将两个数相或得到11011000 10000110 
代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def changesite(x):
    return (x &amp;gt;&amp;gt; 8) | (x &amp;lt;&amp;lt; 8)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此处 python可能得到值不同，python默认为有符号数，且为64位&lt;/p&gt;
&lt;h4&gt;6.二进制逆序&lt;/h4&gt;
&lt;p&gt;逆序就是将34520
10000110 11011000变为
00011011 01100001 &lt;/p&gt;
&lt;p&gt;类似于归并排序的分组处理，可以通过4步进行16位数据的二进制逆序：
第1步：2位一组，每位高低交换：
10000110 11011000
01001001 11100100
第2步：4位一组，每2位高低交换
01001001 11100100
00010110 10110001
第3步：8位一组，每4位高低交换
00010110 10110001
01100001 00011011
第4步，16位一组，8位高低交换
01100001 00011011
00011011 01100001
这样就得到了二进制交换的目的&lt;/p&gt;
&lt;p&gt;第一步如何进行交换？&lt;/p&gt;
&lt;p&gt;先分别取其奇数位和偶数位，空位以0补位
奇数位：10000010 10001000
偶数为：00000100 01010000
然后将奇数位右移1位得到
01000001 01000100
偶数位左移1位得到
00001000 10100000
两则相或得到：
01001001 11100100 这样就得到了奇偶位的数据交换&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getnum(x):
    x = ((x&amp;amp;0XAAAA) &amp;gt;&amp;gt; 1) | ((x&amp;amp;0X5555) &amp;lt;&amp;lt;1);
    x = ((x&amp;amp;0XCCCC) &amp;gt;&amp;gt; 2) | ((x&amp;amp;0X3333) &amp;lt;&amp;lt;2);
    x = ((x&amp;amp;0XF0F0) &amp;gt;&amp;gt; 4) | ((x&amp;amp;0X0F0F) &amp;lt;&amp;lt;4);
    x = ((x&amp;amp;0XFF00) &amp;gt;&amp;gt; 8) | ((x&amp;amp;0X00FF) &amp;lt;&amp;lt;8);
    return x
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;7.二进制按位取反&lt;/h4&gt;
&lt;p&gt;例如 5=101 变为010 2
1=1 变为0 
7=111 变为000
变化可以简单归结为1变0 0变1 
异或的特点是相同为0，不同为1；如果和1相异或，1就会变成0，0就会变成1，也就是将原数的每位和1相异或就能得到对应的取反
比如 101: 101 ^ 111 得到 010 111： 111^111得到000
现在问题转为如何获取和原数相同的全数为1的数
获取原数的位数，如111可由1000 - 1 获取
方法1
1左移获得，1移位后右边补0
代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getnum(num):
    i = 1
    while i &amp;lt;= num:
        i = i &amp;lt;&amp;lt; 1
        print(i)
    return (i - 1) ^ num
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.获取原数的位数，求相同位数的最大数
代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getnum(num):
    n = int(math.log(num,2)) + 1
    m = 2**n
    return (m-1) ^ num
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;8 二进制中１的个数&lt;/h4&gt;
&lt;p&gt;统计二进制数中１的个数，这个方法比较多，可由转成字符进行统计。这里采用位操作的方法。
下面还是以34520为例，进行分析
１.２位一组高低位相加
　10 00 01 10 11 01 10 00
-&amp;gt;01 00 01 01 10 01 01 00
2.4位一组高低位相加
  01 00 01 01 10 01 01 00
  00 01 00 10 00 11 00 01
3.8位一组高低位相加
  00 01 00 10 00 11 00 01
  00 00 00 11 00 00 01 00
4.16位一组高低位相加
　00 00 00 11 00 00 01 00
　00 00 00 00 00 00 01 11
　
这方法的套路在于二进制无非０和１，第一步相当于分别把８组里面的１进行了统计，第二步又把４组里面的１进行了统计，然后2组，然后1组
代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getsum(x):
     x = ((x &amp;amp; 0xaaaa) &amp;gt;&amp;gt; 1) + (x &amp;amp; 0x5555)
     x = ((x &amp;amp; 0xcccc) &amp;gt;&amp;gt; 2) + (x &amp;amp; 0x3333)
     x = ((x &amp;amp; 0xf0f0) &amp;gt;&amp;gt; 4) + (x &amp;amp; 0x0f0f)
     x = ((x &amp;amp; 0xff00) &amp;gt;&amp;gt; 8) + (x &amp;amp; 0x00ff)
     return x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分组处理可以解决很多二进制问题。&lt;/p&gt;
&lt;h4&gt;9.落单的数字&lt;/h4&gt;
&lt;p&gt;一组数字，大部分都是出现了偶数次，而缺失的数字出现了奇数次，现在要找出这个数。
利用异或运算的两个特性，１．自己和自己异或为０（和０异或为本身）　２．异或满足交换率
也就是将所有的数进行异或，成对的数就会变成０，最后就变成了一堆０和落单的数异或，也就找到了它&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getnum(numlist):
    num=0
    for i in numlist:
        num ^= i
    return num
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如getnum([7,6,4,3,3,4,6,3,3,7,7])
将输出7&lt;/p&gt;
&lt;p&gt;要是两个落单了呢
比如[2,3,4,5,6,7,8,9,9,8,7,5,3,2]
如果按照上面的做法，最终得到的是两个落单数字的异或结果。
如果将整组数分成两组，并且将两个落单的数分别分到两组中，两组分别异或就能把两个落单的数孤立出来。
如何分组呢，相同的数在每个二进制上的位都相同，两个相同的数异或后，每位上都是０，而不同的数异或后至少有一位为１,我们就按这一位为０的分为１组，为１的分为１组
例子中异或结果为6^4  0110^0100 为0010 也就是７和４在第１位不同，然后将整个数组按照第１位　１和０进行分组
２　0010　第一组
３　0011 第一组
４　0100 第二组
５　0101 第二组
６　0110 第一组
７　0111 第一组
８　1000 第二组
９　1001 第二组
这样 ２、３、６、７、７、３、２为１组　 4、５、８、９、９、５为２组
这样每组分别异或就得到了6和４&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getdouble(numlist):
    num = 0
    for i in numlist:
        num ^= i
    n = int(math.log(num,2)) + 1
    for j in range(n):
        if((num &amp;gt;&amp;gt; j)&amp;amp;1 ==1):
            break
    list1=[]
    list2=[]
    for temp in numlist:
        if ((temp &amp;gt;&amp;gt; j)&amp;amp;1 ==1):
            list1.append(temp)
        else:
            list2.append(temp)
    print getsingle(list1)
    print getsingle(list2)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-02-23:2017/02/23/python/</guid><category>Python</category></item><item><title>python实现awk域简单例子</title><link>http://king32783784.github.io/2017/02/20/python/</link><description>&lt;h3&gt;问题&lt;/h3&gt;
&lt;p&gt;ltp功能验证测试的结果的文本（截取片段）格式为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Test Start Time: Tue Feb 14 15:47:55 2017&lt;/span&gt;
&lt;span class="gh"&gt;-----------------------------------------&lt;/span&gt;
Testcase                       Result     Exit Value
--------                       ------     ----------
abort01                        PASS       0
accept01                       PASS       0
accept4_01                     PASS       0
acct01                         PASS       0
add_key01                      PASS       0
add_key02                      PASS       0
adjtimex01                     PASS       0
bind01                         PASS       0
capset02                       PASS       0
cacheflush01                   CONF       32
chdir01                        PASS       0
chdir01A                       PASS       0
fork10                         PASS       0
fork11                         PASS       0
fork13                         FAIL       2
dio28                          CONF       32
aio01                          PASS       0
aio02                          PASS       0
&lt;span class="gh"&gt;memcg-stress                   FAIL       1&lt;/span&gt;
&lt;span class="gh"&gt;-----------------------------------------------&lt;/span&gt;
Total Tests: 1884
Total Skipped Tests: 157
Total Failures: 28
Kernel Version: 4.9.0-10
Machine Architecture: x86_64
Hostname: test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在处理测试结果时，一般想得到的数据包括”Fail case的数量、CONF case的数量， PASS case的数量，测试case的总数， Fail case的列表， Conf case的列表，
Pass case的列表。虽然测试log最后会给出部分数据，但不准确，需要进行处理。下面分别用shell、python实现获取这些数据。&lt;/p&gt;
&lt;h4&gt;Shell版本&lt;/h4&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runalltest.log&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# CASE 数量&lt;/span&gt;
&lt;span class="nv"&gt;FAILNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep FAIL &lt;span class="nv"&gt;$FILE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PASSNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep PASS &lt;span class="nv"&gt;$FILE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;CONFNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep CONF &lt;span class="nv"&gt;$FILE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FAILNUM&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="nv"&gt;$PASSNUM&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="nv"&gt;$CONFNUM&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; bc&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# CASE 列表&lt;/span&gt;
&lt;span class="nv"&gt;FAILLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep FAIL runalltest.log &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# awk打印第一列&lt;/span&gt;
&lt;span class="nv"&gt;CONFLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep CONF runalltest.log &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PASSLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep PASS runalltest.log &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fail case num is &lt;/span&gt;&lt;span class="nv"&gt;$FAILNUM&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Pass case num is &lt;/span&gt;&lt;span class="nv"&gt;$PASSNUM&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Conf case num is &lt;/span&gt;&lt;span class="nv"&gt;$CONFNUM&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Total case num is &lt;/span&gt;&lt;span class="nv"&gt;$TOTAL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fail case list is &lt;/span&gt;&lt;span class="nv"&gt;$FAILLIST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Conf case list is &lt;/span&gt;&lt;span class="nv"&gt;$CONFLIST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Pass case list is &lt;/span&gt;&lt;span class="nv"&gt;$PASSLIST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Fail case num is 2
Pass case num is 15
Conf case num is 2
Total case num is 19
Fail case list is fork13
memcg-stress
Conf case list is cacheflush01
dio28
Pass case list is abort01
accept01
accept4_01
acct01
add_key01
add_key02
adjtimex01
bind01
capset02
chdir01
chdir01A
fork10
fork11
aio01
aio02
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Python版本&lt;/h4&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-*coding=utf-8*-*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_process&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;PASSNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# PASS case 数量&lt;/span&gt;
    &lt;span class="n"&gt;FAILNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# FAIL case 数量&lt;/span&gt;
    &lt;span class="n"&gt;CONFNUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# CONF case 数量&lt;/span&gt;
    &lt;span class="n"&gt;PASSLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# PASS case 列表&lt;/span&gt;
    &lt;span class="n"&gt;FAILLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# FAIL case 列表&lt;/span&gt;
    &lt;span class="n"&gt;CONFLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# CONF case 列表&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/ltp/results/runalltest.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;linelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\W+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 通过正则表达式将字符串分离&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="c1"&gt;# 拆分后，PASS字段可能不在第二列，判断改行是否存在PASS&lt;/span&gt;
                &lt;span class="n"&gt;PASSNUM&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;PASSLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;PASSLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  &lt;span class="c1"&gt;# 将本行PASS所在列前面的字符串拼接&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;FAILNUM&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;FAILLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;FAILLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CONF&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;CONFNUM&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CONF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;CONFLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CONF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;CONFLIST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linelist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;TOTALNUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PASSNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fali case num is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;FAILNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pass case num is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;PASSNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Conf case num is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;CONFNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total case num is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;TOTALNUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fail case list is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;FAILLIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Conf case list is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;CONFLIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pass case list is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;PASSLIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Fali case num is 2
Pass case num is 15
Conf case num is 2
Total case num is 19
Fail case list is [&amp;#39;fork13&amp;#39;, &amp;#39;memcg-stress&amp;#39;]
Conf case list is [&amp;#39;cacheflush01&amp;#39;, &amp;#39;dio28&amp;#39;]
Pass case list is [&amp;#39;abort01&amp;#39;, &amp;#39;accept01&amp;#39;, &amp;#39;accept4_01&amp;#39;, &amp;#39;acct01&amp;#39;, &amp;#39;add_key01&amp;#39;, &amp;#39;add_key02&amp;#39;, &amp;#39;adjtimex01&amp;#39;, &amp;#39;bind01&amp;#39;, &amp;#39;capset02&amp;#39;, &amp;#39;chdir01&amp;#39;, &amp;#39;chdir01A&amp;#39;, &amp;#39;fork10&amp;#39;, &amp;#39;fork11&amp;#39;, &amp;#39;aio01&amp;#39;, &amp;#39;aio02&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两则执行的效率差不多，python版本稍快。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 20 Feb 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-02-20:2017/02/20/python/</guid><category>Python</category></item><item><title>类常用内置方法(二）</title><link>http://king32783784.github.io/2017/02/13/python/</link><description>&lt;p&gt;python的类中包含很多内置的方法。&lt;/p&gt;
&lt;h3&gt;内置方法列表&lt;/h3&gt;
&lt;p&gt;以下是一些基本的内置方法，后面还会列举一些其他的方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内置方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;(self,...)&lt;/td&gt;
&lt;td&gt;初始化对象，在创建新对象时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;del&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;释放对象，在对被删除之前调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;new&lt;/strong&gt;(cls, &lt;em&gt;args, &lt;/em&gt;*kwd)&lt;/td&gt;
&lt;td&gt;实例的生成操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;str&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;在使用print语句时被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getitem&lt;/strong&gt;(self, key)&lt;/td&gt;
&lt;td&gt;获取序列的索引key对应的值，等价于seq[key]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;len&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;在调用内联函数len()时被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;cmp&lt;/strong&gt;(stc, dst)&lt;/td&gt;
&lt;td&gt;比较两个对象src和dst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getattr&lt;/strong&gt;(s, name)&lt;/td&gt;
&lt;td&gt;获取属性的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;setattr&lt;/strong&gt;(s, name,value)&lt;/td&gt;
&lt;td&gt;设置属性的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;delattr&lt;/strong&gt;(s, name)&lt;/td&gt;
&lt;td&gt;删除name属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getattribute&lt;/strong&gt;()&lt;/td&gt;
&lt;td&gt;功能与__getattr__()类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;gt&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否大于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;lt&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否小于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ge&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否大于或则等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;le&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否小于或等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;eq&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;call&lt;/strong&gt;(self,*args)&lt;/td&gt;
&lt;td&gt;把实例对象作为函数调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;strong&gt;del&lt;/strong&gt;()&lt;/h4&gt;
&lt;p&gt;在实例即将销毁时调用。它也被称作析构器。如果一个基类具有一个__del__()方法，继承类的__del__()方法，如果存在，必须显式的调用它以确保实例的基类部分的正确删除。注意__del__()方法可以（虽然不推荐）通过创建该实例的一个新的引用以推迟它的销毁。它可以在以后该新的引用被删除时调用。不能保证在解释器退出时仍然存在的对象的__del__()被调用。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;getattr&lt;/strong&gt;()、&lt;strong&gt;setattr&lt;/strong&gt;()和__getattribute__():&lt;/h4&gt;
&lt;p&gt;当读取对象的某个属性时，python会自动调用__getattr__()方法。例如,fruit.clor将转换为fuit.&lt;strong&gt;getattr&lt;/strong&gt;(color). 当使用赋值语句对属性进行设置时，python会自动调用__getattr__
&lt;strong&gt;setattr&lt;/strong&gt;()方法。&lt;strong&gt;getattribute&lt;/strong&gt;()的功能与__getattr__()类似，用于获取属性的值。但是__getattribute__()能提供更好的控制，代码更健壮。注意，python中并不存在
&lt;strong&gt;setattribute&lt;/strong&gt;()方法&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*-coding:UTF-8-*-*&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 获取属性的方法&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;quot;:&lt;/span&gt;
    &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_Fruit_color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 获取color属性&lt;/span&gt;
    &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_Fruit__price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_Fruit__price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 获取price属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;&lt;strong&gt;getitem&lt;/strong&gt;():&lt;/h4&gt;
&lt;p&gt;如果类把某个属性定义为序列， 可以使用__getitem__()输出序列属性中某个元素。假设水果店中销售多种水果，可以通过__getitem__()方法获取水果店中的每种水果&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FruitShop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 获取水果店的水果&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;shop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FruitShop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;shop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;shop&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;shop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 输出水果店的水果&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;&lt;strong&gt;str&lt;/strong&gt;():&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;str&lt;/strong&gt;()用于表示对象代表的含义，返回一个字符串。实现了__str__()方法后，可以直接使用print语句输出对象，也可以通过函数str()触发__str__()的执行。这样
就把对象和字符串关联起来，便于某些程序的实现，可以用这个字符串来表示某个类&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*-coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Fruit类&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# 为Fruit类&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 定义对象的字符串表示&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;quot;:&lt;/span&gt;
    &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 调用内置函数str()出发__str__()方法， 输出结果为：Fruit类&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;        &lt;span class="c1"&gt;# 直接输出对象fruit, 返回__str__()方法的值， 输出结果为：Fruit类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;&lt;strong&gt;call&lt;/strong&gt;():&lt;/h4&gt;
&lt;p&gt;在类中实现__call__()方法，可以在对象创建时直接返回__call__()的内容。使用该方法可以模拟静态方法。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# 内部类&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;grow...&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 调用Growth(), 此时将类Growth作为函数返回，即为外部类Fruit定义方法 grow(),grow()将执行__call__()内的代码&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 输出结果： grow...&lt;/span&gt;
    &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 输出结果： grow...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 13 Feb 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-02-13:2017/02/13/python/</guid><category>Python</category></item><item><title>类常用内置方法</title><link>http://king32783784.github.io/2017/01/23/python/</link><description>&lt;p&gt;python的类中包含很多内置的方法。&lt;/p&gt;
&lt;h3&gt;内置方法列表&lt;/h3&gt;
&lt;p&gt;以下是一些基本的内置方法，后面还会列举一些其他的方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内置方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;(self,...)&lt;/td&gt;
&lt;td&gt;初始化对象，在创建新对象时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;del&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;释放对象，在对被删除之前调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;new&lt;/strong&gt;(cls, &lt;em&gt;args, &lt;/em&gt;*kwd)&lt;/td&gt;
&lt;td&gt;实例的生成操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;str&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;在使用print语句时被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getitem&lt;/strong&gt;(self, key)&lt;/td&gt;
&lt;td&gt;获取序列的索引key对应的值，等价于seq[key]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;len&lt;/strong&gt;(self)&lt;/td&gt;
&lt;td&gt;在调用内联函数len()时被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;cmp&lt;/strong&gt;(stc, dst)&lt;/td&gt;
&lt;td&gt;比较两个对象src和dst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getattr&lt;/strong&gt;(s, name)&lt;/td&gt;
&lt;td&gt;获取属性的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;setattr&lt;/strong&gt;(s, name,value)&lt;/td&gt;
&lt;td&gt;设置属性的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;delattr&lt;/strong&gt;(s, name)&lt;/td&gt;
&lt;td&gt;删除name属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;getattribute&lt;/strong&gt;()&lt;/td&gt;
&lt;td&gt;功能与__getattr__()类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;gt&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否大于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;lt&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否小于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ge&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否大于或则等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;le&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否小于或等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;eq&lt;/strong&gt;(self, other)&lt;/td&gt;
&lt;td&gt;判断self对象是否等于other对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;call&lt;/strong&gt;(self,*args)&lt;/td&gt;
&lt;td&gt;把实例对象作为函数调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;strong&gt;init&lt;/strong&gt;()&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt;()方法是最常用的内置方法。它在一个类的对象被创建时，首先运行。这个方法可以用来做一些初始化工作，比如参数传入等。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# Filename: class_init.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hi, my name is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Swaroop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;输出：&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Swaroop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;说明： __init__方法定义为传入一个参数name. 在__init__里，我们只是创建一个新的域，也成为name.两个name是两个不同的变量。在类的其他方法可以使用self.name。self.name成了该类的
属性。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;new&lt;/strong&gt;():&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;()是在新式类中新出现的方法，它作用在构造方法建造实例之前，Python中存在于类里面的构造方法__init__负责将类实例化，而在__init__启动之前，&lt;strong&gt;new__决定是否使用该__init__方法，因为
__new&lt;/strong&gt;()可以调用其他类的构造方法或返回别的对象类作为本类的实例。&lt;/p&gt;
&lt;p&gt;如果将类比喻为工厂，那么__init__()方法则是该工厂的生成工人，&lt;strong&gt;init&lt;/strong&gt;()方法接受的初始化参数则是生成所需原料，&lt;strong&gt;init&lt;/strong&gt;()方法会按照方法中的语句负责将原料进行加工成实例产品。&lt;strong&gt;new__的角色为
生产经理，__new__方法可以决定是否将原料提供给该生产部工人，同时决定着出货产品是否为为该生产部的产品。因为该生产经理(__new&lt;/strong&gt;)可以以该工厂的名义出售其他工厂的产品。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;()方法的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt;()方法是在类准备将自身实例化时调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt;()方法始终是类的静态方法，即使没有被加上静态方法装饰器&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的实例化和它的构造方法通常为：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类定义
class MyClass(object):
    def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;args, &lt;/em&gt;*kwargs):
        ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例化
myclass = MyClass(&lt;em&gt;args, &lt;/em&gt;*kwargs)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如以上所示，一个类可以有多个位置参数和多个命名参数，而在实例化开始之后，在调用__init__()方法之前，python首先调用__new__()方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def __new__(cls, *args, **kwargs):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个参数cls是当前正在实例化的类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要得到当前类的实例，应当在当前类中__new__()方法语句中调用当前类的父类的__new__()方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果当前类是直接继承自object, 那当前类的__new__()方法返回的对象应该为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def __new__(cls, *args, **kwargs):
    ...
    return object.__new__(cls)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上如果(新式)类中没有重写__new__()方法，即在定义新式类时没有重新定义__new__()时，python默认是调用该类的直接父类的__new__()方法来构造该类的实例，如果该类的父类也没有重写__new__(),
那么将一直按此规矩追溯至object的__new__()方法，因为object是所有的新式类的基类。&lt;/p&gt;
&lt;p&gt;而如果新式类中重写了__new__()方法，那么你可以自由选择任意一个其他的新式类(必定要是新式类，只有新式类有__new__(),因为新式类都是object的后代，经典类则没有__new__()方法来制造实例，包括这个新式类的所有前代类和后代类，只要他们不会造成递归死循环。具体看以下代码解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;以上&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt;等同于&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="err"&gt;中没有重新定义&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法，那么会自动调用其父类的&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法来制造实例，即&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;在任何新式类的&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法，不能调用自身的&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;来制造实例，因为这会造成死循环。因此必须避免类似一下的写法：&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="err"&gt;中避免：&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="err"&gt;同理。&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="err"&gt;或者没有血缘关系的新式类的&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;是安全的，但是如果是在继承关系的两个类之间，应避免互调造成死循环，例如：（&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;在制造&lt;/span&gt;&lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="err"&gt;实例时，会自动调用&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;通常来说，新式类开始实例化时， &lt;strong&gt;new&lt;/strong&gt;()方法会返回cls(cls指代当前类）的实例，然后该类的__init__()方法作为构造方法会接收这个实例(即self)作为自己的第一个参数，然后依次传入__new__方法中
 接收的位置参数和命名参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意： 如果__new__()没有返回cls(即当前类）的实例，那么当前类的__init__()方法是不会被调用的。如果__new__()返回其他类(新式类或经典类均可)的实例，那么只会调用被返回的那个类的构造方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;打印结果显示&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="err"&gt;其实是&lt;/span&gt;&lt;span class="nx"&gt;Stranger&lt;/span&gt;&lt;span class="err"&gt;类的实例&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;因此可以这么描述&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;的区别，在新式类中&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法才是真正的实例化方法，为类提供外壳制作出实例框架，然后调用该框架内的构造方法&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;使其丰满。&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果以建房子做比喻，&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="err"&gt;方法负责开发地皮，打下地基，并将原料存放在工地。而&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法负责从工地取材料建造出地皮开发招标书中规定的大楼，&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;负责大楼的详细设计建造，装修使其可交付给客户。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 23 Jan 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-01-23:2017/01/23/python/</guid><category>Python</category></item><item><title>python metaclass(下）</title><link>http://king32783784.github.io/2017/01/15/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Python/</link><description>&lt;h3&gt;自定义元类&lt;/h3&gt;
&lt;p&gt;元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。&lt;/p&gt;
&lt;p&gt;幸运的是，__metaclass__实际上可以被任意调用，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;元类会自动将你通常传给“&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;的参数作为自己的参数传入&lt;/span&gt;
&lt;span class="s2"&gt;def upper_attr(future_class_name, future_class_parents, future_class_attr)&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;返回一个类对象，将属性都转为大写形式”“”&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;选择所有不以“&lt;/span&gt;&lt;span class="nx"&gt;__&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;的属性&lt;/span&gt;
&lt;span class="s2"&gt;    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith(&amp;#39;__&amp;#39;))&lt;/span&gt;

&lt;span class="s2"&gt;# 将他们转为大写形式&lt;/span&gt;
&lt;span class="s2"&gt;uppercase_attr = dict((name.upper(), value) for name, value in attrs)&lt;/span&gt;

&lt;span class="s2"&gt;# 通过type来做类对象的创建&lt;/span&gt;
&lt;span class="s2"&gt;return type(future_class_name, future_class_parents, uppercase_attr)&lt;/span&gt;

&lt;span class="s2"&gt;__metaclass__ = upper_attr # 这会作用到这个模块所有的类&lt;/span&gt;

&lt;span class="s2"&gt;class Foo(object):&lt;/span&gt;
&lt;span class="s2"&gt;    # 我们可以只在这里定义__mataclass__,这样就只会作用于这个类中&lt;/span&gt;
&lt;span class="s2"&gt;    bar = &amp;#39;bip&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;输出&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;输出&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BAR&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;打印&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bip&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是用一个真正的class作为元类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;记住，&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;实际上是一个类， 就像‘str&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;和’&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;一样&lt;/span&gt;
&lt;span class="s1"&gt;# 所以，可以从type继承&lt;/span&gt;
&lt;span class="s1"&gt;class UpperAttrMetaClass(type):&lt;/span&gt;
&lt;span class="s1"&gt;    # __new__是在__init__之前被调用的特殊方法&lt;/span&gt;
&lt;span class="s1"&gt;    # __new__是用来创建对象并返回的方法&lt;/span&gt;
&lt;span class="s1"&gt;    # 而__init__只是用来将传入的参数初始化给对象&lt;/span&gt;
&lt;span class="s1"&gt;    # __new__很少用到，除非你希望能够控制对象的创建&lt;/span&gt;
&lt;span class="s1"&gt;    # 这里创建的对象是类，我嫩希望能够自定义它， 所以我们这里改写__new__&lt;/span&gt;
&lt;span class="s1"&gt;    # 如果你希望的话，可以在__init__中做些事情&lt;/span&gt;
&lt;span class="s1"&gt;    # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用&lt;/span&gt;

&lt;span class="s1"&gt;    def __new__(upperattr_metaclass, future_class_name,&lt;/span&gt;
&lt;span class="s1"&gt;                future_class_parents, future_class_attr):&lt;/span&gt;
&lt;span class="s1"&gt;        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith(&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;future_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这种方法其实不是oop。我们直接调用了type, 而且我们没有改写父类的__new__方法。 现在我们这样处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;upperattr_metaclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upperattr_metaclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;future_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;future_class_attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;复用&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="err"&gt;方法&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;这就是&lt;/span&gt;&lt;span class="nx"&gt;OOP&lt;/span&gt;&lt;span class="err"&gt;编程&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upperattr_metaclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;futurn_class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                            &lt;span class="nx"&gt;future_class_parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能已经注意到了有个额外的参数upperattr_metaclass, 这并没有什么特别的。类方法的第一个参数总是表示当前的实例， 就像在普通的类方法中的self参数一样。当然，为了清晰起见，
这里的名字我起的比较长。但是就像self一样，所有的参数都有他们的传统的名称。因此在一个真实产品中的一个元类应该像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UpperAttrMetaclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UpperAttrMetaclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;supper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UpperAttrMetaclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uppercase_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于自身，
控制继承等等。确实，用元类搞些”黑魔法“是特别有用的，因而会搞出复杂的东西来。但就元类本身而言，其实是很简单的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) 拦截类的创建&lt;/li&gt;
&lt;li&gt;2) 修改类&lt;/li&gt;
&lt;li&gt;3) 返回修改之后的类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;为什么要用metaclass类而不是函数？&lt;/h3&gt;
&lt;p&gt;由于__metaclass__ 可以接受任何可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) 意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来会发生什么&lt;/li&gt;
&lt;li&gt;2) 可以使用oop编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类&lt;/li&gt;
&lt;li&gt;3) 可以把代码组织的更好。当你使用元类的时候肯定不会向上面的这种简单场景，通常都是针对比较复杂的问题。将多个方法归并到一个类中会很有帮助。&lt;/li&gt;
&lt;li&gt;4) 可以使用__new__, __init__已经__call__这样的特殊方法。他们能帮你处理不同的任务。通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得__init__更舒服。&lt;/li&gt;
&lt;li&gt;5) 哇哦，这东西的名字是metaclass, 肯定非善类，要小心&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什么地方使用元类？&lt;/h3&gt;
&lt;p&gt;现在回到主题，究竟为什么会使用这样一种容易出错而且晦涩的特效？一般来说，根本就用不上它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”  —— Python界的领袖 Tim Peters
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元类的主要用途是创建API。一个典型的例子是Django ORM. 它允许你像这样定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是如果你像这样做的话：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;guy = Person(name=&amp;#39;bob&amp;#39;, age=&amp;#39;35&amp;#39;)
print guy.age
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这并不会返回一个IntegerField对象， 而是会返回一个int， 甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了__metaclass__,并且使用了一些魔法能够将你刚刚定义的
简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。&lt;/p&gt;
&lt;h3&gt;最后&lt;/h3&gt;
&lt;p&gt;首先，类其实是能够创建出类实例的对象。当然，类本身也是实例，是元类的实例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;class Foo(object): pass
&amp;gt;&amp;gt;&amp;gt;id(Foo)
38082608
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python中的一切都是对象，他们要么是类的实例，要么是元类的实例，除了type.type实际上是它自己的元类，在纯Python环境中不能做到的，需要在实现层面通过一些手段做到的。
其次，元类是很复杂的。 对应非常简单的类，你可能不希望通过元类来对类做修改。你可以通过其他两种技术来修改类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) Monkey patching&lt;/li&gt;
&lt;li&gt;2) class decorators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你需要动态修改类时，最好使用上面的两种技术。当然，绝大部分情况下是不需要动态修改类的。&lt;/p&gt;
&lt;p&gt;《完》&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/10/03/python/"&gt;python metaclass(上)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/WBB0EXYSWE.jpg" height="320" width="540"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 15 Jan 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2017-01-15:2017/01/15/编程语言-Python/</guid><category>Python</category></item><item><title>python shelve</title><link>http://king32783784.github.io/2016/12/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Python/</link><description>&lt;p&gt;本文对shelve模块进行说明。&lt;/p&gt;
&lt;p&gt;shelve模块实现了对任意可被pickle的python对象进行持久存储，并提供了类字典的API使用。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/4C0XUNHJ7C.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;当使用关系数据库太重时，shelve模块可以为python对象提供了一个简单的持久的存储选择。它就像字典一样，通过关键字访问shelf对象，其值经过pickle,写入anydbm创建和管理的数据库。在使用时，可以自己定义一些存储结构使其存储较复杂的数据。&lt;/p&gt;
&lt;h3&gt;创建shelf对象&lt;/h3&gt;
&lt;p&gt;最简单的使用shelve模块的方式是通过DbfilenameShelf类。使用函数shelve.open()(使用的是anydbm）来存储数据。可以使用类或简单的调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_shelf.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 创建test_shelf.db文件进行存储&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;9.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sample Data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;#　写入key1，值可以是python支持的对象，看起来和字典的用法一样&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;访问已存储的数据，打开shelf,可以像字典一样进行使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = shelve.open(&amp;#39;test_shelf.db&amp;#39;)  # 打开已存在的数据文件
try:
    existing = s[&amp;#39;key1&amp;#39;] # 获取之前存储的key1
finally:
    s.close()

print(existing)  # 打印s[&amp;#39;key1&amp;#39;],会得到刚才存储的数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python shelve_create.py
$ python shelve_existing.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dbm模块不支持多个应用同时写入同一数据库，如果客户端或程序不会修改shelf,请指定shelve以只读方式打开数据库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = shelve.open(&amp;#39;test_shelf.db&amp;#39;, flag=&amp;#39;r&amp;#39;)   # 打开时指定flag＝‘r&amp;#39;，只读模式打开
try:
    existing =  s[&amp;#39;key1&amp;#39;]
finally:
    s.close()

print existing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当数据库以只读模式打开，但又试图更改数据库时，会引起一个访问出错异常。这一异常类型依赖于在创建数据库时被anydbm选择的数据库模块。&lt;/p&gt;
&lt;h3&gt;写回&lt;/h3&gt;
&lt;p&gt;默认情况下，Shelves不去追踪可变对象的修改。意思就是，如果你改变了已存储在shelf中的一个项目的内容，就必须重新存储该项目来更新shelf.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = shelve.open(&amp;#39;test_shelf.db&amp;#39;)
try:
    print s[&amp;#39;key1&amp;#39;]
    s[&amp;#39;key&amp;#39;][&amp;#39;new_value&amp;#39;] = &amp;#39;this is not here before&amp;#39;
finally:
    s.close()

s = shelve.open(&amp;#39;test_shelf.db&amp;#39;, writeback = True) # 设置写回或同步
try:
   print s[&amp;#39;key1&amp;#39;]
finally:
    s.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中，没有对字典的关键字key1的内容进行存储，虽然打开时设置了writeback,因此重新打开shelf时，key1内容没有改变。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python shelve_create.py
$ python shelve_withoutwriteback.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了自动捕捉存储在shelf中的可变对象所发生的改变，需改变前设置writeback可用.writeback标志导致shelf使用一缓存来记住从数据库中调出的所有对象。当shelf关闭的时候，每一个缓存中的对象也重新写回数据库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = shelve.open(&amp;#39;test_shelf.db&amp;#39;, writeback=True)
try:
    print(s[&amp;#39;key1&amp;#39;])
    s[&amp;#39;key1&amp;#39;][&amp;#39;new_value&amp;#39;] = &amp;#39;this was not here before&amp;#39;
    print(s[&amp;#39;key1&amp;#39;])
finally;
    s.close()

s = shelve.open(&amp;#39;test_shelf.db&amp;#39;, writeback=True)
try:
    print(s[&amp;#39;key1&amp;#39;])
finally:
    s.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python shelve_create.py
$ python shelve_writeback.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;new_value&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;this was not here before&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;new_value&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;this was not here before&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;.5, &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Sample data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然使用writeback模式可用减少出错几率，也能更加透明化对象的持久性。但是，不是每种情况都要使用writeback模式。原因看到前面的示例，应该能猜到。当shelf打开时，缓存就要占用额外的内存。
并且，当shelf关闭时，同样会对缓存中的对象再次写回数据库，增加了开销。即使没有进行改变，仍然会进行数据写回。比较好的方式是，确认需要写入数据时，再设置writeback,读数据时设置只读或默认即可。&lt;/p&gt;
&lt;h3&gt;指定shelf类型&lt;/h3&gt;
&lt;p&gt;上面的例子全部使用默认的shelf实现。使用shelve.open()直接代替一种shelf实现，是常见用法, 尤其是在不关心用哪种数据库存储数据的时候. 然而, 有时常会关心它. 如果是在这种情况下, 通常就会直接使用DbfilenameShelf或者BsdDbShelf, 更或者是通过Shelf的子类来解决问题.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 27 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-12-27:2016/12/27/编程语言-Python/</guid><category>Python</category></item><item><title>sqlite3 - SQLite数据库DB-API 2.0接口</title><link>http://king32783784.github.io/2016/12/25/python/</link><description>&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;SQLite 是一个Ｃ库，它提供了一个轻量级的基于磁盘的数据库，不需要一个单独的服务进程。允许使用非标准的SQL查询语言的变体访问数据库。
一些应用程序可以使用SQLite进行存储内部数据。也可以使用SQLite建立应用原型，随后再将数据或代码移植到大型的数据库，比如PostgreSQL或Ｏracle.&lt;/p&gt;
&lt;p&gt;sqlite3模块由Gerhard Haring编写，提供了一个sql接口，该接口和&lt;a href="https://www.python.org/dev/peps/pep-0249/"&gt;PEP 249&lt;/a&gt;描述的DB-API 2.0规范兼容。&lt;/p&gt;
&lt;p&gt;若要使用该模块，必须首先创建一个表示数据库的连接/connection对象。例如这边的例子，将数据存储到example.db文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以使用特殊名称:memory:在RAM(内存）中创建数据库。&lt;/p&gt;
&lt;p&gt;一旦有了一个连接／connection,就可以创建cursor/游标对象并调用其execute()方法来执行SQL命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = conn.cursor()
# Create table
c.execute(&amp;#39;&amp;#39;&amp;#39;CREATE TABLE stocks
             (data text, trans text, symbol text, qty real, price real)&amp;#39;&amp;#39;&amp;#39;)

# Insert a row of data
c.execute(&amp;quot;INSERT INTO stocks VALUES(&amp;#39;2006-01-05&amp;#39;, &amp;#39;BUY&amp;#39;, &amp;#39;RHAT&amp;#39;, 100, 35.15)&amp;quot;)

# Save(commit) the changes
conn.commit()

# We can also close the connection if we　are done with it.
# Just be sure any changes have been committed or they will be lost.
conn.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存过的数据是持久的并在以后的会话中可用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常的SQL操作需要使用Python变量中的值。不应该使用Python的字符串操作来组装查询，因为这样是不安全的。容易受到SQL注入攻击。&lt;/p&gt;
&lt;p&gt;相反，应该使用DB API参数替代。对于你想使用的值，用？作为一个占位符，给游标的execute()方法的第二个参数提供一个值的元组。其他的数据库模块可能使用不同的占位符，如％s或:1。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Never do this -- insecure!
symbol = &amp;#39;RHAT&amp;#39;
c.execute(&amp;quot;SELECT * FROM stocks WHERE symbol = &amp;#39;%s&amp;#39;&amp;quot; % symbol)

# Do this instead
t = (&amp;#39;RHAT&amp;#39;)
c.execute(&amp;quot;SELECT * FROM stocks WHERE symbol = ?&amp;#39;, t)
print c.fetchone()

# Larger example that inserts many records at a time
purchases = [(&amp;#39;2006-03-28&amp;#39;, &amp;#39;BUY&amp;#39;, &amp;#39;IBM&amp;#39;, 1000, 45.00),
             (&amp;#39;2006-04-05&amp;#39;, &amp;#39;BUY&amp;#39;, &amp;#39;MSFT&amp;#39;, 1000, 72.00),
             (&amp;#39;2006-04-06&amp;#39;, &amp;#39;SELL&amp;#39;, &amp;#39;IBM&amp;#39;, 500, 53.00),
             ]
c.executemany(&amp;#39;INSERT INTO stocks VALUES(?,?,?,?,?)&amp;#39;, purchases)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了取回select语句的执行结果，可以把游标cursor当做一个迭代器，通过调用游标的fetchone()方法来获取单行结果；或者通过调用fetchall()方法获取结果集列表。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for row in c.execute(&amp;#39;SELECT * FROM stocks ORDER BY price&amp;#39;):
        print row
(u&amp;#39;2006-01-05&amp;#39;, u&amp;#39;BUY&amp;#39;, u&amp;#39;RHAT&amp;#39;, 100, 35.14)
(u&amp;#39;2006-03-28&amp;#39;, u&amp;#39;BUY&amp;#39;, u&amp;#39;IBM&amp;#39;, 1000, 45.0)
(u&amp;#39;2006-04-06&amp;#39;, u&amp;#39;SELL&amp;#39;, u&amp;#39;IBM&amp;#39;, 500, 53.0)
(u&amp;#39;2006-04-05&amp;#39;, u&amp;#39;BUY&amp;#39;, u&amp;#39;MSFT&amp;#39;, 1000, 72.0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ghaering/pysqlite"&gt;https://github.com/ghaering/pysqlite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pysqlite web page – sqlite3 is developed externally under the name “pysqlite”.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sqlite.org/"&gt;http://www.sqlite.org/&lt;/a&gt;
The SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.w3schools.com/sql/"&gt;http://www.w3schools.com/sql/&lt;/a&gt;
Tutorial, reference and examples for learning SQL syntax.&lt;/p&gt;
&lt;h3&gt;相关模块函数和常量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该模块的字符串形式的版本号，不是SQLite库的版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.version_info&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该模块的整数元组形式的版本号，不是SQLite库的版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.sqlite_version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQLite库的版本号，字符串形式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.sqlite_version_info&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQLite库的版本号，整数元组形式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.PARSE_DECLTYPES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该常量用于connect()函数的detect_typed参数&lt;/p&gt;
&lt;p&gt;设置它使得sqlite3模块解析每个返回列的声明的类型。它将解析出声明的类型的第一个单词，比如，　“inter primary key", 它将解析出"integer", 而"number(10)",将解析出”number"。然而对应那列，它将查询转换器字典并对类型使用对应注册的转换器函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.PARSE_COLNAMES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该常量用于connect()函数的detect_typed参数&lt;/p&gt;
&lt;p&gt;设置它使得SQLite接口解析每个返回列的列名。它将查找[mytype]形式的字符串，然后决定'mytype'是列的类型。将会尝试在转换器字典中找到对应于“mytype"的转换器，然后将转换器函数应用于返回的值。Cursor.description中找到的列名只是列名的第一个单词，即，如果SQL中有类似 &lt;t3&gt;&lt;t4&gt;'as&lt;/t4&gt; &lt;t5&gt;"x&lt;/t5&gt; &lt;t6&gt;[datetime]"'&lt;/t6&gt;&lt;/t3&gt;的内容，那么第一个单词将会解析成列名，知道有空格为止，列名只是简单的"x".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.connect(database[,timeout, detect_types, isolation_level,check_same_thread, factory, cached_statements])&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开到SQLite数据库文件database的连接。可以使用:memory: 打开内存的数据库连接。&lt;/p&gt;
&lt;p&gt;当多个连接访问数据库，其中一个进程修改了数据库，SQLite数据库会锁定，直到事务被提交。timeout参数指明为了得到锁，连接最多等待的时间，如果超时会抛出异常。超时参数默认为5s.&lt;/p&gt;
&lt;p&gt;对于isolation_level参数，请参阅connection对象的Connection.isolation_level属性。&lt;/p&gt;
&lt;p&gt;SQLite原生只支持文本、整数、实数、BLOB和NULL类型。如果想使用其他类型，需要自行添加。detect_types参数和使用由register_converter()函数注册的自定义转换器。&lt;/p&gt;
&lt;p&gt;detect_types默认为0（即关闭），可以设置为PARSE_DECLTYPES和PARSE_COLNAMES的任意组合用来打开类型检测。&lt;/p&gt;
&lt;p&gt;默认情况下，sqlite3模块使用Connection类以调用connect.然而，可以继承Connection类，通过将子类提供给factory参数，使得connect()使用你的子类&lt;/p&gt;
&lt;p&gt;SQLite3模块内部使用语句缓存来避免SQL解析开销。如果想要显示设置连接所缓存的语句的数量，可以设置cached_statements参数。在当前实现中的默认设置是缓存100条语句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.register_converter(typename, callable)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册可调用对象用来将来自数据库的bytestring转换成为自定义的python类型。对数据库所有有typename类型的值调用该可调用的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.register_converter(typename, callable)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册可调用对象用来将来自数据库的bytestring转换成为自定义的Python类型。对数据库所有有typename类型的值调用该可调用对象。参见connect()函数的detect_types参数以了解类型检测是如何工作的。请注意typename的大小写和查询中类型的名称必须匹配 ！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.register_adapter(type, callable)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册可调用对象用来将自定义的 Python 类型type转换为 SQLite 的支持的类型。可调用对象callable接受一个Python值为参数，返回值的类型必须为如下类型之一：int，long，float，str （UTF-8 编码）， unicode 或缓冲。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlite3.complete_statement(sql)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果字符串sql包含一个或多个以分号结束的完整的SQL语句则返回True 。它不验证SQL的语法正确性，只是检查没有未关闭的字符串常量以及语句是以分号结束的。&lt;/p&gt;
&lt;p&gt;这可以用于生成一个 sqlite shell，如以下示例所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A minimal SQLite shell for experiments&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:memory:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isolation_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter your SQL commands to execute in sqlite3.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter a blank line to exit.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete_statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;An error occurred:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;sqlite3.enable_callback_tracebacks(flag)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下你不会在用户定义的函数、 聚合、 转换器、 授权者回调等地方得到回溯对象（调用栈对象）。如果想要调试它们，将flag设置为True调用此函数。之后可以在sys.stderr通过回调得到回溯。使用False来再次禁用该功能。&lt;/p&gt;
&lt;p&gt;&amp;lt;未完待续&amp;gt;    &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 25 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-12-25:2016/12/25/python/</guid><category>Python</category></item><item><title>python数据存储</title><link>http://king32783784.github.io/2016/12/24/python/</link><description>&lt;h3&gt;存储方式&lt;/h3&gt;
&lt;p&gt;Python的数据存储主要是以下六类：普通文件、DBM文件、Pickled对象存储、shelve对象存储、对象数据库存储、关系数据库存储。&lt;/p&gt;
&lt;h4&gt;DBM文件&lt;/h4&gt;
&lt;p&gt;普通文件不解释了，DBM就是把字符串的键值对存储在文件里：&lt;/p&gt;
&lt;p&gt;Python代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;anydbm&lt;/span&gt;                             
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anydbm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;movie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# make a DBM file called &amp;#39;movie&amp;#39; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pow!&amp;#39;&lt;/span&gt;                 &lt;span class="c1"&gt;# store a string under key &amp;#39;Batman&amp;#39; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;                                 &lt;span class="c1"&gt;# get the file&amp;#39;s key directory&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                          &lt;span class="c1"&gt;# fetch value for key &amp;#39;Batman&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;Pow!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Pickled对象存储&lt;/h4&gt;
&lt;p&gt;Pickled就是把对象序列化到文件，可以存储复杂类型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
         &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
         &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mydb&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是反序列化：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mydb&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mydb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;shelve存储&lt;/h4&gt;
&lt;p&gt;shelve存储差不多就是DBM和Pickled方式的结合，以键值对的形式把对象序列化到文件：&lt;/p&gt;
&lt;p&gt;数据存储：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mydbase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;object1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;side&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;of&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;life&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;object2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Brian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;motto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;brian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object2&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;motto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ni!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;取数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mydbase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="c1"&gt;# entries  &lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="c1"&gt;# index  &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                        &lt;span class="c1"&gt;# fetch  &lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;motto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ni!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对象数据库的存储没怎么了解，因为不习惯用它存储数据。感觉应该和shelve差不多吧，只是把数据保存到了数据库里（其实还是一个文件嘛），然后增加了些事务之类的高级功能。&lt;/p&gt;
&lt;p&gt;Python中关系数据库的存储是重点，操作关系数据库最“简单”的就是直接用DB-API，就像Java里的JDBC；当然，数据结构复杂了、设计要求高了，就得找些ORM框架偷懒了，主要有独立的SQLAlchemy，Django的自带ORM等。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/8N5QJCOLP7.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;简单比较Python的数据操作&lt;/h3&gt;
&lt;p&gt;Python中操作关系数据库最直接的就是用DB-API了，流程一般是：连接、执行SQL语句、提交、断开。以MySQL为例，下面是各步骤的代码示例：&lt;/p&gt;
&lt;p&gt;首先是连接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着便可以执行语句了，但在执行SQL语句前要先获取指针：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; curs = conn.cursor( )  
&amp;gt;&amp;gt;&amp;gt; curs.execute(&amp;#39;create database peopledb&amp;#39;)  
1L  
&amp;gt;&amp;gt;&amp;gt; curs.execute(&amp;#39;use peopledb&amp;#39;)  
0L  
&amp;gt;&amp;gt;&amp;gt; tblcmd = &amp;#39;create table people (name char(30), job char(10), pay int(4))&amp;#39; 
&amp;gt;&amp;gt;&amp;gt; curs.execute(tblcmd)  
0L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; curs.execute(&amp;#39;insert people values (%s, %s, %s)&amp;#39;, (&amp;#39;Bob&amp;#39;, &amp;#39;dev&amp;#39;, 5000))  
1L  
&amp;gt;&amp;gt;&amp;gt; curs.executemany(&amp;#39;insert people values (%s, %s, %s)&amp;#39;,  
...          [ (&amp;#39;Sue&amp;#39;, &amp;#39;mus&amp;#39;, &amp;#39;70000&amp;#39;),  
...            (&amp;#39;Ann&amp;#39;, &amp;#39;mus&amp;#39;, &amp;#39;60000&amp;#39;)])  
2L  
&amp;gt;&amp;gt;&amp;gt; conn.commit( )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行查询：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; curs.execute(&amp;#39;select * from people&amp;#39;)  
6L  
&amp;gt;&amp;gt;&amp;gt; curs.fetchall( )  
((&amp;#39;Bob&amp;#39;, &amp;#39;dev&amp;#39;, 5000L), (&amp;#39;Sue&amp;#39;, &amp;#39;mus&amp;#39;, 70000L), (&amp;#39;Ann&amp;#39;, &amp;#39;mus&amp;#39;, 60000L), (&amp;#39;Tom&amp;#39;,  
&amp;#39;mgr&amp;#39;, 100000L))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完数据库操作记得断开连接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conn.close( )        # close, _ _del_ _ call rollback if changes not committed yet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果数据结构不是很复杂，配合Python强大的列表解析能力，不用ORM框架也是很方便的；或者自己封装对象映射也不是很难。&lt;/p&gt;
&lt;p&gt;如果使用了Django框架，可以使用它自带的ORM工具来操作数据库。首先当然是编写实体类（或者叫模型）了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Musician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;instrument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Album&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;release_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;num_stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python的代码已经很清楚了，类对应表，成员变量对应表的列，列属性由models.XXXField(…)定义。如果实体类没有显式定义主键，Django会默认加上一句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id = models.AutoField(primary_key=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django里可以这样定义枚举型数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;GENDER_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Male&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Female&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
    &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;GENDER_CHOICES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于关联关系，在做列的映射定义时可以这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poll = models.ForeignKey(Poll)  
sites = models.ManyToManyField(Site)  
place = models.OneToOneField(Place&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Django里定义关联关系还有更多功能，后面的文件再介绍。&lt;/p&gt;
&lt;p&gt;Django的Model基类中已经定义了基本的数据库操作，因为所有的实体类都是继承自Model类，所以也就有了这些操作。例如新建并保存一个person只需要这么做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Person(name=&amp;quot;Fred Flinstone&amp;quot;, gender=&amp;quot;M&amp;quot;)  
&amp;gt;&amp;gt;&amp;gt; p.save()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django会通过查询对象的主键是否存在来决定该UPDATE还是INSERT，当然你也可以强制框架执行某种操作。如果你不满意框架自带的方法，可以重写它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;tagline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;real&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
        &lt;span class="nx"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现没，Django里存取数据不需要那种session，最讨厌Hibernate里的session了，总是报“Session Closed”错误……&lt;/p&gt;
&lt;p&gt;Python还有一个独立的ORM框架——SQLAlchemy。功能更强大，支持的数据库也比Django自带的ORM工具要多。它有两种建立实体类的方法。&lt;/p&gt;
&lt;p&gt;一种是分开定义，再将表定义和类定义映射起来。首先是建立表的定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;users_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_id_seq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着定义实体类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class User(object):  
...     def __init__(self, name, fullname, password):  
...         self.name = name  
...         self.fullname = fullname  
...         self.password = password
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这还没完，还要把他们映射起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;users_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的过程有点像Hibernate里将XML的Map文件和实体类的映射。Hibernate中还可以方便的直接用注释在实体类中完成与表的映射，当然SQLAlchemy也有直接的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt; 
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;作为一个独立的ORM框架，实体类的存取当然就不会像Django那样集成的那么完美了，SQLAlchemy里存取数据也是要Session的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的engine对象需要这样建立：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;span style=&amp;quot;font-family: monospace; white-space: normal; color: #333333; line-height: 20px;&amp;quot;&amp;gt;dialect+driver://user:password@host/dbname[?key=value..]&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于存取操作，如果是保存就这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ed_user = User(&amp;#39;ed&amp;#39;, &amp;#39;Ed Jones&amp;#39;, &amp;#39;edspassword&amp;#39;)  
&amp;gt;&amp;gt;&amp;gt; session.add(ed_user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要查询，就是类似的这种形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; our_user = session.query(User).filter_by(name=&amp;#39;ed&amp;#39;).first()
执行完一些数据操作，必要的时候要提交或是回滚：
&amp;gt;&amp;gt;&amp;gt; session.rollback()  
或者  
&amp;gt;&amp;gt;&amp;gt; session.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SQLAlchemy框架还有一个衍生产品——Elixir，在SQLAlchemy的基础上对其映射方式做了些封装，使得实体类的定义有点类似Django中的定义方式。&lt;/p&gt;
&lt;p&gt;话说Django的ORM与它的其他模块结合的很紧密，不好单独使用；SQLAlchemy虽然强大，但风格不太喜欢，所以下一步打算深入两个ORM框架的代码，看看他们是怎么实现的。一方面好抉择用哪一个，另外也可以看看在自己的应用中能否自己做一个简单的ORM。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 24 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-12-24:2016/12/24/python/</guid><category>Python</category></item><item><title>pyqt基本操作(三）</title><link>http://king32783784.github.io/2016/11/15/python/</link><description>&lt;h3&gt;对话框&lt;/h3&gt;
&lt;p&gt;PyQT提供基本的消息框和标准对话框。在PyQt也可以根据需要创建自定义的对话框。&lt;/p&gt;
&lt;p&gt;使用PyQt提供的类和方法可以创建和使用消息框、标准对话框等。标准对话框包含基本的打开，关闭，字体选择对话框和颜色选择对话框等。&lt;/p&gt;
&lt;h4&gt;消息框&lt;/h4&gt;
&lt;p&gt;使用QtGui.QMessageBox类中的方法可以创建简单的消息框，用于向用户传递信息。QtGui.QMessageBox类中包含一下方法：
　
&lt;em&gt; about():创建关于消息框
&lt;/em&gt; aboutQt(): 创建关于Qt消息框
&lt;em&gt; critical():　创建错误处理对话框
&lt;/em&gt; infomation():　创建信息消息框
&lt;em&gt; question(): 创建询问消息框
&lt;/em&gt; warning(): 创建警告消息框&lt;/p&gt;
&lt;p&gt;以下是示例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb_i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 创建布局组件&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MessBox example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#添加标签&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;About&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 生成button1&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 添加button到布局组件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AboutQt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 生成button2&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Critical&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button4&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spacer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QSpacerItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spacer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 向窗口中添加布局组件&lt;/span&gt;

                         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# button1事件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Onbutton6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# button1插槽函数&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pyQt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;About&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 创建About消息框&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aboutQt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PyQt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;critical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PyQt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Critical&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Retry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ignore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Abort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Retry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Pyqt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;information&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PyQt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Onbutton6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PyQT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：
&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt8.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;标准对话框&lt;/h4&gt;
&lt;p&gt;PyQt使用QtGui.QFileDialog提供的方法可以创建文件打开、关闭对话框。使用QtGui.QFontDialog可以创建文章选择对话框，使用QtGui.QColorDialog可以创建颜色选择对话框。
其中QtGui.QFileDialog:
&lt;em&gt; getExistingDirectory(): 创建选取路径对话框
&lt;/em&gt; getOpenFileName(): 创建打开文件对话框
&lt;em&gt; getOpenFileNames(): 创建打开文件对话框，可以同时打开多个文件
&lt;/em&gt; getSaveFileNmae(): 创建保存文件对话框&lt;/p&gt;
&lt;p&gt;对于QtGui.QFontDialog,静态方法只有getFont,创建字体选择对话框。QtGui.QColorDialog，可以使用getColor创建颜色选择对话框。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb_i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;StandarDialog example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 生成button1&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Font&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 生成button2&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spacer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QSpacerItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spacer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 向窗口添加布局组件&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QFileDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOpenFileName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 创建文件打开对话框&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QFontDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFont&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 创建字体选择对话框&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QColorDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 创建颜色选择对话框&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：
&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt9.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;自定义对话框&lt;/h4&gt;
&lt;p&gt;通过继承QtGui.QDialog类可以创建自定义的对话框。所创建的对话框和窗口一样，可以向其添加组件。使用connect方法响应组件时间。&lt;/p&gt;
&lt;p&gt;自定义对话框例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QDialog&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;MyDialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Input:&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLineEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#　创建单行文本框&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加文本框到布局组件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;okButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 创建OK按钮&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;okButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#添加按钮到布局组件　　&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancelButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cancel&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 创建cancel按钮&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancelButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;okButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnOk&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancelButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnCancel&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnOk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 获取文本框中的内容&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;# 结束对话框返回１&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creatDialogButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Create a new Dialog&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#生成button&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creatDialogButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creatDialogButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyDialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creatDialogButton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt9.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;资源文件&lt;/h3&gt;
&lt;p&gt;Qt中资源文件是以'.ui'为后缀的文件。Qt提供Qt Designer用于创建资源文件。使用Qt Designer创建的资源文件可以在pyqt中使用。使用资源文件可以简化界面设计，也可以将界面和代码分离，提高程序的可维护性。&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#coding=utf-8&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uic&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QDialog&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;uic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;res.ui&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 载入资源文件&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Lpb_i&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 创建布局组件&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CreateDialog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 生成button1&lt;/span&gt;
            &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyDialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineEdit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 15 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-15:2016/11/15/python/</guid><category>pyqt</category></item><item><title>pyqt基本操作(二）</title><link>http://king32783784.github.io/2016/11/14/python/</link><description>&lt;h3&gt;单行文本和多行文本&lt;/h3&gt;
&lt;p&gt;PyQt中提供了单行文本框和多行文本框。使用QtGui.QLineEdit可以创建单行文本框。使用QtGui.QTextEdit可以创建多行文本框。&lt;/p&gt;
&lt;h4&gt;单行文本框&lt;/h4&gt;
&lt;p&gt;使用QtGui.QLineEdit可以创建单行文本框，通过修改其属性可以将其设置为密码框。当创建单行文本后，可以使用以下的方法设置文本框的属性或对文本框中的内容进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clear() :清除文本框中的内容&lt;/li&gt;
&lt;li&gt;contextMenuEvent: 右键菜单事件&lt;/li&gt;
&lt;li&gt;copy(): 复制文本框中的内容&lt;/li&gt;
&lt;li&gt;cut(): 剪切文本框中的内容&lt;/li&gt;
&lt;li&gt;paste(): 向文本框中粘贴内容&lt;/li&gt;
&lt;li&gt;redo(): 重做&lt;/li&gt;
&lt;li&gt;selectAll(): 全选&lt;/li&gt;
&lt;li&gt;selectedText(): 获取选中的文本&lt;/li&gt;
&lt;li&gt;setAlignment(): 设置文本对齐方式&lt;/li&gt;
&lt;li&gt;setEchoMode:　设置文本框类型&lt;/li&gt;
&lt;li&gt;setMaxLength()：设置文本框中最大字符数&lt;/li&gt;
&lt;li&gt;setText():设置文本框中的文字&lt;/li&gt;
&lt;li&gt;undo(): 撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的例子，创建一个单行文本框和密码框 &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# - coding=utf-8 &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#　创建布局组件&lt;/span&gt;

        &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;开始测试&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;label1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;#　创建标签&lt;/span&gt;
        &lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 设置标签样式&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;edit1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLineEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;#　创建单行文本框&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edit1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;label2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;edit2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLineEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;edit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setEchoMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLineEdit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 将其设置为密码框&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edit2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt5.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;多行文本&lt;/h4&gt;
&lt;p&gt;使用QtGui.QTextEdit可以创建多行文本框。以下方法可以用作文本框属性或文本框内容的设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;append(): 向文本框追加内容&lt;/li&gt;
&lt;li&gt;clear(): 清除文本框中的内容&lt;/li&gt;
&lt;li&gt;contextMenuEvent():右键菜单事件&lt;/li&gt;
&lt;li&gt;copy(): 复制文本框中的内容&lt;/li&gt;
&lt;li&gt;cut(): 剪切文本框中的内容&lt;/li&gt;
&lt;li&gt;find(): 查找文本&lt;/li&gt;
&lt;li&gt;paste(): 向文本框中粘贴内容&lt;/li&gt;
&lt;li&gt;redo(): 重做&lt;/li&gt;
&lt;li&gt;selectAll(): 全选&lt;/li&gt;
&lt;li&gt;selectedText(): 获取选中的文本&lt;/li&gt;
&lt;li&gt;setAlignment():设置文本对齐方式&lt;/li&gt;
&lt;li&gt;setText(): 设置文本框中的文字&lt;/li&gt;
&lt;li&gt;undo(): 撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;多行文本示例&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PyQt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TextEdit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#　设置标签&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QTextEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;            &lt;span class="c1"&gt;# 创建多行文本&lt;/span&gt;
        &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;PyQt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# 设置文本框中的文字&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt05.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;单选和复选框&lt;/h4&gt;
&lt;p&gt;使用QtGui.QRadioButton可以创建单选框，使用QtGui.QCheckBox可以创建复选框。单元框和复选框都可以通过setChecked()设置状态，通过isChecked()获取状态。&lt;/p&gt;
&lt;p&gt;下面是创建一组单选框和复选框的例子&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding=utf-8 *-*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb_i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# 创建布局组件&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Label1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 创建标签&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Label2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Label3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#添加标签到组件&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRadioButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spec2000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#创建单选框&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRadioButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRadioButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unixbench&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#将Radio1默认选中&lt;/span&gt;

        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 添加单选框&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QCheckBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;All&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 创建复选框&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;# 将复选框默认未选中&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加复选框到布局组件&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start Test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 创建按钮&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加按钮到布局组件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 添加布局组件到窗口&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;# 按钮事件&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="c1"&gt;# 按钮信号槽函数&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   &lt;span class="c1"&gt;# 判断单选按钮是否被选中&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stream test start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spec2000 test start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spec2000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unixbench test1 start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unixbench&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;      &lt;span class="c1"&gt;#  判断复选按钮是否选中&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spec2000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unixbench&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt16.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;菜单项&lt;/h3&gt;
&lt;p&gt;PyQt中可以使用QMenuBar创建菜单条，使用QMenu创建菜单。菜单单击事件也可以像按钮事件一样通过信号/插槽的形式绑定到类的方法中。&lt;/p&gt;
&lt;h4&gt;创建菜单&lt;/h4&gt;
&lt;p&gt;当使用QMenuBar创建菜单条后，可以使用其addMenu方法向其中添加菜单。然后通过菜单的addAction方法向菜单中添加菜单命令。对于QtGui.QMainWindow可以直接使用其menuBar方法获得菜单条，无需使用QMenuBar创建菜单条。&lt;/p&gt;
&lt;p&gt;下面的例子创建了一组菜单&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;menubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menuBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;# 获得窗口的菜单条&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;menubar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;File&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　＃&lt;/span&gt; &lt;span class="err"&gt;添加&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="err"&gt;菜单&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 添加Open命令&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 添加save命令&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSeparator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　　&lt;/span&gt;&lt;span class="c1"&gt;# 添加分隔符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;file.addAction('Close') #　添加close命令
　　　　　    edit = menubar.addMenu('&amp;amp;Edit') # 添加Edit菜单
　　　　　    edit.addAction('Copy') # 添加copy命令
　　　　　    edit.addAction('Paste') # 添加Paste命令
　　　　　    edit.addAction('Cut') # 添加cut命令
            edit.addAction('SelectAll')　# 添加selectall命令
            help = menubar.addMenu('&amp;amp;Help')　＃ 添加help菜单
            help.addAction（'About')　# 创建ＭyWindow对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = QtGui.QApplication(sys.argv)
win = Window()
win.show()
app.exec_()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt6.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;菜单事件&lt;/h4&gt;
&lt;p&gt;菜单事件和按钮事件的处理方式相同，均使用connect方法将信号绑定到插槽事件处理函数上。不同的是，菜单事件需要绑定其"triggered()"信号。&lt;/p&gt;
&lt;p&gt;下面是菜单事件处理的例子，并增加了右键菜单&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Menu Action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 创建标签&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#　设置标签对齐样式&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 添加标签&lt;/span&gt;

        &lt;span class="n"&gt;menubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menuBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# 获得窗口的菜单条&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;menubar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;File&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加file菜单&lt;/span&gt;
        &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加Open命令&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;triggered()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 菜单信号&lt;/span&gt;
        &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加save命令&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;triggered()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnSave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# save命令信号&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSeparator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 添加分隔符&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加close命令&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;triggered()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     &lt;span class="c1"&gt;# open的信号槽函数       &lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Menu Action: Open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Menu Actio: Save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contextMenuEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;             &lt;span class="c1"&gt;#　重载弹出式菜单事件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globalPos&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 14 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-14:2016/11/14/python/</guid><category>pyqt</category></item><item><title>pyqt基本操作</title><link>http://king32783784.github.io/2016/11/13/python/</link><description>&lt;p&gt;pyqt是对Qt的封装。Ｑt是面向对象的图形用户界面库，可以在多个操作系统上使用。&lt;/p&gt;
&lt;h3&gt;PyQt基本操作&lt;/h3&gt;
&lt;h4&gt;基本的界面：&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#*-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="err"&gt;　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 导入PyQt模块&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 通过继承QtGui.QMainWindow创建类&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 初始化方法&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 调用父类的初始化方法　&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pyQt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 设置窗口标题&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　&lt;/span&gt; &lt;span class="c1"&gt;# 设置窗口大小&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 创建QApplication对象&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 创建MyWindow对象&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 显示窗口&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;#　进入消息循环&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt1.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;添加一个标签：&lt;/h4&gt;
&lt;p&gt;PyQt提供了丰富的组件进行GUI编程，可以方便的使用组件，并使用信号/插槽进行组件的通信，处理组件事件。&lt;/p&gt;
&lt;p&gt;使用QtGui.QLabel可以创建标签。使用setText方法可以设置标签的文字。使用setTextFormat可以设置中文字的格式。当创建标签后使用QMainWindow
的setCentralWidget方法将标签添加到窗口中。常见的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setPicture():设置标签中的图片&lt;/li&gt;
&lt;li&gt;setText():设置标签中的文字&lt;/li&gt;
&lt;li&gt;setTextFormat:设置标签文字的格式&lt;/li&gt;
&lt;li&gt;setAlignment:设置标签中文本的对齐方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将创建一个标签&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb_i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#添加标签&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;start test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 创建标签&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 设置标签文字的对齐样式&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span class="c1"&gt;# 向窗口添加标签&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplicatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt2.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;布局组件和空白项&lt;/h4&gt;
&lt;h5&gt;布局组件&lt;/h5&gt;
&lt;p&gt;在窗口中使用setCentralWidget只能添加一个组件。如果想添加多个组件，可以使用布局组件。空白项用于占位，配合布局组件更好的控制界面。&lt;/p&gt;
&lt;p&gt;布局组件：主要用于控制内部组件的大小、位置等。布局组件可以包含其他的组件，也可以嵌套其他的布局组件。&lt;/p&gt;
&lt;p&gt;常见的布局组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QLayout: 基本的布局组件，只能被继承&lt;/li&gt;
&lt;li&gt;QHBoxLayout:　横向Box布局组件&lt;/li&gt;
&lt;li&gt;QVBoxLayout: 竖向Box布局组件&lt;/li&gt;
&lt;li&gt;QGridLayout:　Grid布局组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;布局组件共有的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addWidget():添加组件&lt;/li&gt;
&lt;li&gt;addLayout():添加其他布局组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个使用布局组件布置标签的例子。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;

        &lt;span class="n"&gt;label1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sysbench&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　&lt;/span&gt;&lt;span class="c1"&gt;# 创建标签&lt;/span&gt;
        &lt;span class="n"&gt;label2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iozone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lmbench&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;netperf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pingpong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unixbench&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gridLayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#　创建网格布局组件&lt;/span&gt;

        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;#　向布局中添加标签，第１行第一列&lt;/span&gt;
        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　　　＃&lt;/span&gt; &lt;span class="err"&gt;设置布局组件&lt;/span&gt;

&lt;span class="c1"&gt;#       添加水平布局&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1 = QtGui.QHBoxLayout()   #　创建横向布局组件&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label1)&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label2)&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label3)&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label4)&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label5)&lt;/span&gt;
&lt;span class="c1"&gt;#        hBoxLayout1.addWidget(label6)&lt;/span&gt;

&lt;span class="c1"&gt;#        self.setLayout( hBoxLayout1)&lt;/span&gt;

&lt;span class="c1"&gt;#　　　　　 添加垂直布局&lt;/span&gt;

&lt;span class="c1"&gt;#         vBoxLayout = QtGui.QVBoxLayout()　# 创建垂直布局组件&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label1)&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label2)&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label3)&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label4)&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label5)&lt;/span&gt;
&lt;span class="c1"&gt;#         vBoxLayout.addWidget(label6)&lt;/span&gt;

&lt;span class="c1"&gt;#         self.setLayout(vBoxLayout)&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt3.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h5&gt;空白项&lt;/h5&gt;
&lt;p&gt;PyQt中的空白项可以占据位置，这样就可以更好的布置其他的组件。使用QtGui.QSpaerItem创建空白项，可以使用宽度和高度进行设置。
使用布局组件的addItem方法将其添加到布局组件中。&lt;/p&gt;
&lt;p&gt;下面看一个例子：
    #!/usr/bin/env python
    # -&lt;em&gt;- coding:utf-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#　创建布局组件&lt;/span&gt;
        &lt;span class="n"&gt;spacer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QSpacerItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#　创建空白项&lt;/span&gt;
        &lt;span class="n"&gt;spacer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QSpacerItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#　创建标签&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlignCenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#设置标签文本样式&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spacer1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 添加空白项&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 添加标签&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spacer2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 向窗口中添加布局组件&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt03.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;按钮基本使用&lt;/h4&gt;
&lt;p&gt;使用PyQt中的QtGui.QPushButton可以创建按钮。在PyQt中按钮事件是以信号/插槽的形式进行的，将按钮事件绑定到类的方法上。&lt;/p&gt;
&lt;h5&gt;创建按钮&lt;/h5&gt;
&lt;p&gt;当使用QtGui.QPushButton创建按钮后可以使用一下几种方法设置按钮的样式、属性等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setDefault():将按钮设置为默认按钮&lt;/li&gt;
&lt;li&gt;setFlat(): 将按钮设置为平坦模式&lt;/li&gt;
&lt;li&gt;setMenu(): 设置按钮关联的菜单。&lt;/li&gt;
&lt;li&gt;menu(): 获得按钮关联的菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面例子创建两个按钮&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding=utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lpb-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;# 创建布局组件&lt;/span&gt;

        &lt;span class="n"&gt;button1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spec2000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 生成button1&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 添加button1&lt;/span&gt;

        &lt;span class="n"&gt;button2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iozone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFlat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 向窗口中添加布局组件&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果　&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt4.png" height="280" width="420"&gt;&lt;/p&gt;
&lt;h5&gt;信号和信号槽&lt;/h5&gt;
&lt;p&gt;Qt中的组件使用信号和信号槽的形式来进行通信。Qt的组件中有很多预定义的信号，当事件触发时，组件发出对应的信号。信号被发送给信号槽进行处理。信号槽是处理特定信号的函数。在PyQt同样，需要使用组件的connect方法将组件信号绑定到其处理插槽上。connect方法的原型如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;connect(QObject, SIGNAL(), SLOT(), Qt.ConnectionType)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参数含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QObject: 发送信号的组件&lt;/li&gt;
&lt;li&gt;SIGNAL(): 组件发送的信号&lt;/li&gt;
&lt;li&gt;SLOT(): 信号槽函数&lt;/li&gt;
&lt;li&gt;Qt.ConnectionType:　可选参数，连接类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的例子使用connect方法将按钮的“clicked()"信号连接到事件处理信息槽的函数。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGridLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#　创建布局组件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Button1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Button2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gridlayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# 向窗口添加布局组件　　　&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;# button1事件&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;           &lt;span class="c1"&gt;# clicked()信号&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="c1"&gt;# 信号处理函数&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c1"&gt;#　button2事件&lt;/span&gt;
            &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;# clicked()信号&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnButton2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;#　信号处理函数&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;button1 is cliecked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;OnButton2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clicked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;button2 is cliecked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mywindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/pyqt04.png" height="280" width="420"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 13 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-13:2016/11/13/python/</guid><category>pyqt</category></item><item><title>Avocado-编写Avocado测试</title><link>http://king32783784.github.io/2016/11/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>&lt;h3&gt;编写Avocado测试&lt;/h3&gt;
&lt;p&gt;现在我们开始使用python编写Avocado测试，测试继承于avocado.Test.&lt;/p&gt;
&lt;h4&gt;基本例子&lt;/h4&gt;
&lt;p&gt;创建一个时间测试，sleeptest,测试非常简单，只是sleep一会：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;avocado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SleepTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sleep_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep_length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sleep for &lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s2"&gt; seconds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sleep_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是为avocado编写的一个简单示例，可以使用其他power API编写。&lt;/p&gt;
&lt;p&gt;从上面的例子可以看出，avocado测试从avocado.Test继承的test方法入手。&lt;/p&gt;
&lt;h5&gt;多个测试和命名约定&lt;/h5&gt;
&lt;p&gt;可以在一个类中存在多个测试。&lt;/p&gt;
&lt;p&gt;要想做多个测试，只需要在命名方法前加test,例如test_foo,test_bar等。建议遵守这个命名风格，就像&lt;a href="https://www.python.org/dev/peps/pep-0008/#function-names"&gt;PEP8 Function Names&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;对于class名称，可以任意命名，当最好还是遵从CamelCase命名，参考PEP8 中&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Class Names&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;方便属性&lt;/h5&gt;
&lt;p&gt;测试类提供了一定数量的方便属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为测试添加测试log,可以使用self.log.可以定义log debug,info,error和warning信息。&lt;/li&gt;
&lt;li&gt;参数解析系统，可以访问self.parms使用。可以在后面的Test variants - Mux文章查看更多信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;保存生成的数据&lt;/h4&gt;
&lt;p&gt;每个测试都提供一个所谓的whiteboard,可以通过self.whiteboard访问。Witeboard是一个可以自动保存到测试结果（可以支持的output格式）字符串。你同样可以选择保存二进制数据到whiteboard,但你需要先进行编码转换（base64).&lt;/p&gt;
&lt;p&gt;基于上面的sleeptest，假设想保存sleep_length用于其他脚本或数据分析工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test(self):
    sleep_length = self.params.get(&amp;#39;sleep_length&amp;#39;, default=1)
    self.log.debug(&amp;quot;Sleeping for %.2f second&amp;quot;, sleep_length)
    time.sleep(sleep_length)
    slef.writeboard = &amp;quot;%.2f&amp;quot; % sleep_length
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whiteboard可以并应当接收由可用的测试结果插件生成的文件。Result.json文件已经为每个测试包含了whiteboard.此外，会用一个命名为whiteboard的文件保存和results.json相同级别的信息（也许你想使用与你定制的脚本配套的结果处理工具，该文件会保存白板内容的原始副本）。&lt;/p&gt;
&lt;h4&gt;访问测试参数&lt;/h4&gt;
&lt;p&gt;每个测试都有一组可以通过self.params.get($name, $path=None, $default=None)访问的参数.Avocado会从Multiplex 配置文件中发现所有参数并填充到self.params.比如上面的例子，sleeptest的multiplex文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Mux&lt;/span&gt;
        &lt;span class="n"&gt;short&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sleep_length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;medium&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sleep_length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sleep_length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们用avocado run $test --mux-yaml $file.yaml运行这个例子，3个variants会执行并且内容会插入/run的命名空间。每个variant包含变量的“type"和"sleep_length"。要获取有效值，需要名称（”sleep_length)和path。需要选择路径 ,在这个例子：/run/sleeptest/length/&lt;em&gt;或sleeptest/&lt;/em&gt;,取决于如何设置。&lt;/p&gt;
&lt;p&gt;默认的参数是可选的，但是要处理好这部分。可能有人运行你的测试时选择不同的参数或没有参数，它仍然能够很好的运行。&lt;/p&gt;
&lt;p&gt;所以关于如何访问"sleep_length"的完整示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.params.get(&amp;quot;sleep_length&amp;quot;, &amp;quot;/*/sleeptest/*&amp;quot;, 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有一种更简单的方式。它用于定义解析顺序，简单的查询可以简单的指定路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.params.get(&amp;quot;sleep_length&amp;quot;, None, 1)
self.params.get(&amp;quot;sleep_length&amp;quot;, &amp;#39;*&amp;#39;, 1)
self.params.get(&amp;quot;sleep_length&amp;quot;, default=1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;应该避免参数冲突（不同的匹配值应该指定不同的路径）。如果不能这样（例如使用复合yaml文件）可以通过 --mux-path进行默认路径的修改。它将对参数和操作通过路径进行一个接一个的切片。当第一个切片匹配后会返回，不再尝试其他切片。虽然相对查询只匹配来自--mux-path的切片。&lt;/p&gt;
&lt;p&gt;有很多方式使用paths分离存在冲突的params或只是使查询更清晰。通常tests中使用"*"就足够了，namespacing不是必须的，但是有助于高级用法更清晰简单。&lt;/p&gt;
&lt;p&gt;关于路径的考虑基本是从用户角度。更多信息参考&lt;a href="http://avocado-framework.readthedocs.io/en/43.0/Mux.html"&gt;The variants-Mux&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;使用multplex文件&lt;/h4&gt;
&lt;p&gt;Ａvocado可以使用multplex文件提供params和生成generation来运行sleeptest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run sleeptest.py --mux-yaml examples/tests/sleeptest.py.date/sleeptest.yaml
JOB ID     : d565e8dec576d6040f894841f32a836c751f968f
JOB LOG    : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.44-d565e8de/job.log
TESTS      : &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; sleeptest.py:SleepTest.test&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.50 s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; sleeptest.py:SleepTest.test&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; sleeptest.py:SleepTest.test&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
RESULTS    : PASS &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
TESTS TIME : &lt;span class="m"&gt;6&lt;/span&gt;.50 s
JOB HTML   : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.44-d565e8de/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The --mux-yaml accepts either only &lt;span class="math"&gt;\(FILE_LOCATION or $INJECT_TO:\)&lt;/span&gt;FILE_LOCATION. As explained in Test variants - Mux without any path the content gets injected into /run in order to be in the default relative path location. The &lt;span class="math"&gt;\(INJECT_TO can be either relative path, then it’s injected into /run/\)&lt;/span&gt;INJECT_TO location, or absolute path (starting with '/'), then it’s injected directly into the specified path and it’s up to the test/framework developer to get the value from this location (using path or adding the path to mux-path). To understand the difference execute those commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado multiplex -t -m examples/tests/sleeptest.py.data/sleeptest.yaml
$ avocado multiplex -t -m duration:examples/tests/sleeptest.py.data/sleeptest.yaml
$ avocado multiplex -t -m /my/location:examples/tests/sleeptest.pt.data/sleeptest.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，因为multiplex文件为sleeptest指定了所有参数，所以不能将ID留空：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ scripts/avocado run --mux-yaml examples/tests/sleeptest/sleeptest.yaml
Empty &lt;span class="nb"&gt;test&lt;/span&gt; ID. A &lt;span class="nb"&gt;test&lt;/span&gt; path or &lt;span class="nb"&gt;alias&lt;/span&gt; must be provided
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用同一个multiplex文件启动多个测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;$avocado&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;synctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mux-yaml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;examples/tests/sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data/sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd20fc8d1714da6d4791c19322374686da68c45c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$HOME/avocado/job-results/job-2016-05-04T09&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd20fc8/job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SleepTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SleepTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SleepTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sleeptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SleepTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;4&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;synctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SyncTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.38&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;synctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SyncTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.47&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;synctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SyncTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.46&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;synctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SyncTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test;4&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.45&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;RESULTS&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;SKIP&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INTERRUPT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;26.26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$HOME/avocado/job-results/job-2016-05-04T09&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd20fc8/html/results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;高级日志功能&lt;/h4&gt;
&lt;p&gt;Avocado 在测试的同时提供高级日志功能。这些可以和标准python API库组合。&lt;/p&gt;
&lt;p&gt;一个常见的例子是需要在更长或更复杂的测试中遵循具体的进展。 让我们看一个非常简单的测试示例，但在单个测试中有一个多个明确的阶段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;avocado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;

&lt;span class="n"&gt;progress_log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;progress&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_plant_organic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#Preparing soil&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;progress_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: Preparing soil on row &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Letting soil rest&lt;/span&gt;
        &lt;span class="n"&gt;progress_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: letting soil rest before throwing seeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Throwing seeds&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;progress_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: throwing seeds on row &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Let them grow&lt;/span&gt;
        &lt;span class="n"&gt;progress_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: waiting for Avocados to grow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Harvest them&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;progress_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: harvesting organic avocados on row &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时，可以请求avocaod显示你的日志流，独占或则加入其他内建流：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado --show app, progress run plant.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果类似于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;af786f86db530bff26cd6a92c36e99bedcdca95b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home/cleber/avocado/job-results/job-2016-03-18T10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;af786f8/job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preparing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;soil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preparing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;soil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preparing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;soil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;letting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;soil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throwing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seeds&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throwing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seeds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throwing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seeds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throwing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seeds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;waiting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Avocados&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grow&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;\progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;harvesting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;organic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avocados&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;harvesting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;organic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avocados&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Plant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_plant_organic&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;harvesting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;organic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avocados&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;RESULTS&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;SKIP&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INTERRUPT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home/cleber/avocado/job-results/job-2016-03-18T10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;af786f8/html/results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自定义的progress流和app输出混合在一起，可能不太适合。如果想让progress流输入到一个独立文件，这样会清晰。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run plant.py --store-loggin-stream progress
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，除了所有其他日志文件通常生成，会有另一个名为日志文件progress.INFO在作业结果目录。 在测试运行期间，可以观察进度：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail -f ~/avocado/job-results/latest/progress.INFO

&lt;span class="m"&gt;10&lt;/span&gt;:36:59 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: preparing soil on row &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:36:59 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: preparing soil on row &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:36:59 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: preparing soil on row &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:36:59 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: letting soil rest before throwing seeds
&lt;span class="m"&gt;10&lt;/span&gt;:37:01 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: throwing seeds on row &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:37:01 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: throwing seeds on row &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:37:01 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: throwing seeds on row &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:37:01 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: waiting &lt;span class="k"&gt;for&lt;/span&gt; Avocados to grow
&lt;span class="m"&gt;10&lt;/span&gt;:37:06 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: harvesting organic avocados on row &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:37:06 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: harvesting organic avocados on row &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;:37:06 INFO &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-plant.py:Plant.test_plant_organic: harvesting organic avocados on row &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同一个progress日志记录器，可以在多个测试方法和在多个测试模块一起使用。 在给出的示例中，测试名称用于给出额外的上下文。&lt;/p&gt;
&lt;p&gt;&amp;lt;未完待续&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/4C0XUNHJ7C.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-12:2016/11/12/自动化测试/</guid><category>Avocado</category></item><item><title>Avocado-入门</title><link>http://king32783784.github.io/2016/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>&lt;h3&gt;1.Avocado 安装&lt;/h3&gt;
&lt;h4&gt;1.1 通过包安装&lt;/h4&gt;
&lt;p&gt;像&lt;span id = 'avocado02'&gt;Fedora&lt;/span&gt;可以通过rpm包进行安装，其他通过RPM管理的发行版需要自己制作相关包。Avocado同样支持DEP包的安装可以在contrib/packages/debian找到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fedora&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先通过下面的命令获取仓库配置文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo curl https://repos-avocadoproject.rhcloud.com/static/avocado-fedora.repo -o /etc/yum.repos.d/avocado.repo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;检查是否有了Avocodo和Avocado-lts的仓库配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf repolist avocado avocado-lts 
...
repo id      repo name                          status
avocado      Avocado                            50
avocado-lts  Avocado LTS (Long Term Stability)  disabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Avocao了解更多的LTS信息，参考&lt;a href="https://www.redhat.com/archives/avocado-devel/2016-April/msg00038.html"&gt;Avocado Long Term Stability&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来，可以进行avocado安装啦：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; sudo dnf install avocado
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外还有两个包需要安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avocado-examples: 包含测试例子和示例文件&lt;/li&gt;
&lt;li&gt;avocado-plugins-output-html: HTML job 报告的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;RHEL7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要运行在红帽商业版或CentOS上，需要进行下面设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# If not already, enable epel (for RHEL7 it&amp;#39;s following cmd)
sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
# Add avocado repository and install avocado
sudo curl https://repos-avocadoproject.rhcloud.com/static/avocado-el.repo -o /etc/yum.repos.d/avocado.repo
sudo yum install avocado
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同fedora一样，需要安装以下包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avocado-examples: 包含测试例子和示例文件&lt;/li&gt;
&lt;li&gt;avocado-plugins-output-html: HTML job 报告的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenSUSE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Avocado同样支持，执行运行以下命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo zypper install avocado
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.2 源码安装&lt;/h4&gt;
&lt;p&gt;首先确保系统有基本的编译环境，如fedora：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y git gcc python-devel python-pip libvirt-devel libyaml-devel redhat-rpm-config xz-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，获取源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/avocado-framework/avocado.git
cd avocado
sudo make requirements
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，python和pip需要2.7.x版本。如果安装出现问题，需要指明python2.7 和 pip2.7.&lt;/p&gt;
&lt;p&gt;Avocodo可能需要一些插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd optional_plugins/html
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;安装python依赖工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;avocado可以通过pip安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install avocado-framework
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：只有基本的avocado基本的test runner安装，导入插件时可能会失败，需要根据不同的系统安装不同的依赖。&lt;/p&gt;
&lt;p&gt;如果想安装全部插件，需要执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r https://raw.githubusercontent.com/avocado-framework/avocado/master/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Avocado使用&lt;/h3&gt;
&lt;p&gt;&lt;span id = 'avocado03'&gt;首先&lt;/span&gt;要使用命令行工具test runner,用来运行你的测试和收集测试结果。&lt;/p&gt;
&lt;h4&gt;2.1 运行测试&lt;/h4&gt;
&lt;p&gt;可以运行avocado加 run子命令，后面跟一个测试，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run /bin/true
JOB ID    : 381b849a62784228d2fd208d929cc49f310412dc
JOB LOG   : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.39-381b849a/job.log
TESTS     : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="o"&gt;)&lt;/span&gt; /bin/true: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01 s&lt;span class="o"&gt;)&lt;/span&gt;
RESULTS    : PASS &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
TESTS TIME : &lt;span class="m"&gt;0&lt;/span&gt;.01 s
JOB HTML  : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.39-381b849a/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，我们把/bin/true作为一个测试运行，并记录了测试过程。这是一个简单的例子，这是支持测试的一种类型。&lt;a href="http://avocado-framework.readthedocs.io/en/43.0/ReferenceGuide.html#test-types"&gt;Test Types&lt;/a&gt;了解更多的测试类型。&lt;/p&gt;
&lt;p&gt;注意： 尽管可以通过 avocao run &lt;span class="math"&gt;\(test1 $test3... 运行多个测试，但可以导致崩溃。一个安全的方式为： avocodo run --\)&lt;/span&gt;argument1 --$argument2 -- $test1 $test2.  后面所有内容都会当做位置参数。&lt;/p&gt;
&lt;h4&gt;2.2 列出测试项&lt;/h4&gt;
&lt;p&gt;有两种方式覆盖这些测试。可以通过--dry-run 参数模拟：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;avocado&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin/true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dry-run&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0000000000000000000000000000000000000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp/avocado-dry-runSeWniM/job-2015-10-16T15&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0000000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin/true&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;SKIP&lt;/span&gt;&lt;span class="o"&gt;&lt;/span&gt;
&lt;span class="n"&gt;RESULTS&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;SKIP&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INTERRUPT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TESTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;JOB&lt;/span&gt;&lt;span class="o"&gt; &lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp/avocado-dry-runSeWniM/job-2015-10-16T15&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0000000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html/results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一个方式是使用list参数列出支持的测试参数。如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado list
INSTRUMENTED /usr/share/avocado/tests/abort.py
INSTRUMENTED /usr/share/avocado/tests/datadir.py
INSTRUMENTED /usr/share/avocado/tests/doublefail.py
INSTRUMENTED /usr/share/avocado/tests/doublefree.py
INSTRUMENTED /usr/share/avocado/tests/errortest.py
INSTRUMENTED /usr/share/avocado/tests/failtest.py
INSTRUMENTED /usr/share/avocado/tests/fiotest.py
INSTRUMENTED /usr/share/avocado/tests/gdbtest.py
INSTRUMENTED /usr/share/avocado/tests/gendata.py
INSTRUMENTED /usr/share/avocado/tests/linuxbuild.py
INSTRUMENTED /usr/share/avocado/tests/multiplextest.py 
INSTRUMENTED /usr/share/avocado/tests/passtest.py
INSTRUMENTED /usr/share/avocado/tests/sleeptenmin.py
INSTRUMENTED /usr/share/avocado/tests/sleeptest.py
INSTRUMENTED /usr/share/avocado/tests/synctest.py
INSTRUMENTED /usr/share/avocado/tests/timeouttest.py
INSTRUMENTED /usr/share/avocado/tests/trinity.py
INSTRUMENTED /usr/share/avocado/tests/warntest.py 
INSTRUMENTED /usr/share/avocado/tests/whiteboard.py
 ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些测试文件被Avocodo视为包含在INSTRUMENTED测试。&lt;/p&gt;
&lt;p&gt;我们可以只列出可执行shell脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado list &lt;span class="p"&gt;|&lt;/span&gt; grep ^SIMPLE
SIMPLE       /usr/share/avocado/tests/env_variables.sh
SIMPLE       /usr/share/avocado/tests/output_check.sh
SIMPLE       /usr/share/avocado/tests/simplewarning.sh
SIMPLE       /usr/share/avocado/tests/failtest.sh
SIMPLE       /usr/share/avocado/tests/passtest.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如前面说的那样，SIMPLE表示这些文件是一些简单的可执行的测试。
可以通过--verbose 或 -V,列出avocado中不是测试的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado list examples/gdb-prerun-scripts/ -V
Type       file
NOT_A_TEST examples/gdb-prerun-scripts/README
NOT_A_TEST examples/gdb-prerun-scripts/pass-sigusr1

SIMPLE: &lt;span class="m"&gt;0&lt;/span&gt;
INSTRUMENTED: &lt;span class="m"&gt;0&lt;/span&gt;
MISSING: &lt;span class="m"&gt;0&lt;/span&gt;
NOT_A_TEST: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.编写一个简单的测试&lt;/h3&gt;
&lt;p&gt;下面是一个&lt;span id = 'avocado04'&gt;simple&lt;/span&gt;测试的简单示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#!/bin/bash&amp;#39;&lt;/span&gt; &amp;gt; /tmp/simple_test.sh
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exit 0 &amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/simple_test.sh
$ chmod +x /tmp/simple_test.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，我们给这个文件增加了执行权限，它会被avocado当做一个simple test.&lt;/p&gt;
&lt;h3&gt;4.运行一个较复杂的测试&lt;/h3&gt;
&lt;p&gt;&lt;span id = 'avocado05'&gt;你&lt;/span&gt;可以以任意顺序执行任意数量的测试，而且可以混合不同类型的测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run failtest.py sleeptest.py synctest.py failtest.py synctest.py /tmp/simple_test.sh
JOB ID    : 86911e49b5f2c36caeea41307cee4fecdcdfa121
JOB LOG   : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.42-86911e49/job.log
TESTS     : &lt;span class="m"&gt;6&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; failtest.py:FailTest.test: FAIL &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; sleeptest.py:SleepTest.test: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; synctest.py:SyncTest.test: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.43 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; failtest.py:FailTest.test: FAIL &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; synctest.py:SyncTest.test: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.44 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; /bin/true: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; /tmp/simple_test.sh.1: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02 s&lt;span class="o"&gt;)&lt;/span&gt;
RESULTS    : PASS &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
TESTS TIME : &lt;span class="m"&gt;5&lt;/span&gt;.88 s
JOB HTML  : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2014-08-12T15.42-86911e49/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5.出现fail后中断测试&lt;/h3&gt;
&lt;p&gt;Avocado &lt;span id = 'avocado06'&gt;run&lt;/span&gt;命令包含 --failfast on 参数，当出现错误是会退出测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run --failfast on /bin/true /bin/false /bin/true /bin/true
JOB ID     : eaf51b8c7d6be966bdf5562c9611b1ec2db3f68a
JOB LOG    : &lt;span class="nv"&gt;$HOME&lt;/span&gt;/avocado/job-results/job-2016-07-19T09.43-eaf51b8/job.log
TESTS      : &lt;span class="m"&gt;4&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/4&lt;span class="o"&gt;)&lt;/span&gt; /bin/true: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/4&lt;span class="o"&gt;)&lt;/span&gt; /bin/false: FAIL &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01 s&lt;span class="o"&gt;)&lt;/span&gt;
 Interrupting job &lt;span class="o"&gt;(&lt;/span&gt;failfast&lt;span class="o"&gt;)&lt;/span&gt;.
 RESULTS    : PASS &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
 TESTS TIME : &lt;span class="m"&gt;0&lt;/span&gt;.02 s
 JOB HTML   : /home/apahim/avocado/job-results/job-2016-07-19T09.43-eaf51b8/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6.通过外部Runner 运行测试&lt;/h3&gt;
&lt;p&gt;&lt;span id = 'avocado07'&gt;大&lt;/span&gt;部软件都存在自己的测试集。通常包括一个定制的runner,它可以找到并运行自己的测试。&lt;/p&gt;
&lt;p&gt;Avocado能支持运行这些测试，而且可以支持生成不同格式的结果，收集系统信息以及这些测试（Avocado的sysinfo功能）等等。&lt;/p&gt;
&lt;p&gt;大部分方式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$avocado run --external -runner=/path/to/external_runner foo bar baz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子，avocado会产生foo bar baz的测试结果。实际结果将来源于执行 /path/to/external_runner foo /path/to/external_runner bar和/path/to/external_runner baz&lt;/p&gt;
&lt;p&gt;另一种方式展示这一特性，就是思考“外部runner"可以是解释器和可以解释执行任何测试。UNIXshell,/bin/sh就可以被当做外部执行引擎，而且shell脚本就可以当成它的测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exit 0&amp;quot;&lt;/span&gt; &amp;gt; /tmp/pass
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exit 1&amp;quot;&lt;/span&gt; &amp;gt; /tmp/fail
$ avocado run --external-runner&lt;span class="o"&gt;=&lt;/span&gt;/bin/sh /tmp/pass /tmp/fail
JOB ID     : 4a2a1d259690cc7b226e33facdde4f628ab30741
JOB LOG    : /home/&amp;lt;user&amp;gt;/avocado/job-results/job-&amp;lt;date&amp;gt;-&amp;lt;shortid&amp;gt;/job.log
TESTS      : &lt;span class="m"&gt;2&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; /tmp/pass: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01 s&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; /tmp/fail: FAIL &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.01 s&lt;span class="o"&gt;)&lt;/span&gt;
RESULTS    : PASS &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
TESTS TIME : &lt;span class="m"&gt;0&lt;/span&gt;.01 s
JOB HTML   : /home/&amp;lt;user&amp;gt;/avocado/job-results/job-&amp;lt;date&amp;gt;-&amp;lt;shortid&amp;gt;/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子很明显，可以通过给/tmp/pass和/tmp/fail ，shell“shebangs”（＃！/ bin / sh）来实现，使它们可执行（chmod + x / tmp / pass / tmp / ，并将其作为“简单”测试运行。&lt;/p&gt;
&lt;p&gt;下面看另一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ avocado run --external-runner&lt;span class="o"&gt;=&lt;/span&gt;/bin/curl http://local-avocado-server:9405/jobs/ &lt;span class="se"&gt;\&lt;/span&gt;
                                   http://remote-avocado-server:9405/jobs/
JOB ID     : 56016a1ffffaba02492fdbd5662ac0b958f51e11
JOB LOG    : /home/&amp;lt;user&amp;gt;/avocado/job-results/job-&amp;lt;date&amp;gt;-&amp;lt;shortid&amp;gt;/job.log
TESTS      : &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; http://local-avocado-server:9405/jobs/: PASS &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02 s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; http://remote-avocado-server:9405/jobs/: FAIL &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.02 s&lt;span class="o"&gt;)&lt;/span&gt;
RESULTS    : PASS &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ERROR &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; FAIL &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; SKIP &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; WARN &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; INTERRUPT &lt;span class="m"&gt;0&lt;/span&gt;
TESTS TIME : &lt;span class="m"&gt;3&lt;/span&gt;.04 s
JOB HTML   : /home/&amp;lt;user&amp;gt;/avocado/job-results/job-&amp;lt;date&amp;gt;-&amp;lt;shortid&amp;gt;/html/results.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子是把”/bin/curl“当做"external test runner".&lt;/p&gt;
&lt;h3&gt;7. 测试调试&lt;/h3&gt;
&lt;p&gt;&lt;span id = 'avocado08'&gt;当&lt;/span&gt;开发一个新的测试时，经常做的就是查看一个测试job的运行日志。
为了实现这个目的， 可以通过 avocado --show test run ... 或 avocado run --show-job-log ...&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$avocado --show test run examples/tests/sleeptest.py
...
Job ID: f9ea1742134e5352dec82335af584d1f151d4b85

START 1-sleeptest.py:SleepTest.test

PARAMS (key=timeout, path=*, default=None) =&amp;gt; None
PARAMS (key=sleep_length, path=*, default=1) =&amp;gt; 1
Sleeping for 1.00 seconds
PASS 1-sleeptest.py:SleepTest.test

Test results available in $HOME/avocado/job-results/job-2015-06-02T10.45-f9ea174

UI输出被抑制，只显示作业日志，这使得它成为测试开发和调试的有用功能。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/8N5QJCOLP7.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-03:2016/11/03/自动化测试/</guid><category>Avocado</category></item><item><title>Avocado User’s Guide</title><link>http://king32783784.github.io/2016/11/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>&lt;h3&gt;Avocado 用户指南&lt;/h3&gt;
&lt;p&gt;内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#avocado01"&gt;关于Avocado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/"&gt;入门&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado02"&gt;安装Avocado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado03"&gt;使用Avocado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado04"&gt;写一个简单测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado05"&gt;运行一个较复杂的测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado06"&gt;第一个测试失败时中断测试job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado07"&gt;结合外部runner运行测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试/#avocado08"&gt;测试调试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写Avocado测试&lt;ul&gt;
&lt;li&gt;基本例子&lt;/li&gt;
&lt;li&gt;保存测试生成的数据（自定义）&lt;/li&gt;
&lt;li&gt;访问测试参数&lt;/li&gt;
&lt;li&gt;使用multplex文件&lt;/li&gt;
&lt;li&gt;高级日志功能&lt;/li&gt;
&lt;li&gt;unittest.TestCase 继承&lt;/li&gt;
&lt;li&gt;Setup和cleanup方法&lt;/li&gt;
&lt;li&gt;运行第三方测试集&lt;/li&gt;
&lt;li&gt;获取资源文件&lt;/li&gt;
&lt;li&gt;测试输出检查和输出记录模式&lt;/li&gt;
&lt;li&gt;Avocado Testlog，stdout和stderr模块&lt;/li&gt;
&lt;li&gt;独立进程中运行Avocado测试&lt;/li&gt;
&lt;li&gt;设置测试超时&lt;/li&gt;
&lt;li&gt;测试标签&lt;/li&gt;
&lt;li&gt;Python unitest 兼容测试和警告&lt;/li&gt;
&lt;li&gt;简单测试的环境变量&lt;/li&gt;
&lt;li&gt;简单测试的BASH扩展&lt;/li&gt;
&lt;li&gt;Wrap up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结果格式&lt;ul&gt;
&lt;li&gt;人性化测试结果&lt;/li&gt;
&lt;li&gt;机器可读的结果&lt;/li&gt;
&lt;li&gt;一次多种结果&lt;/li&gt;
&lt;li&gt;Exit Codes&lt;/li&gt;
&lt;li&gt;实现其他结果格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置&lt;ul&gt;
&lt;li&gt;配置文件的解析顺序&lt;/li&gt;
&lt;li&gt;插件设置文件&lt;/li&gt;
&lt;li&gt;解析订单概述&lt;/li&gt;
&lt;li&gt;测试中使用值的优先级&lt;/li&gt;
&lt;li&gt;设置插件&lt;/li&gt;
&lt;li&gt;Avocado数据目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试发现&lt;ul&gt;
&lt;li&gt;测试载入的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志系统&lt;ul&gt;
&lt;li&gt;UI调整&lt;/li&gt;
&lt;li&gt;存储用户日志&lt;/li&gt;
&lt;li&gt;分页器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试变种－Mux&lt;ul&gt;
&lt;li&gt;Mux内部&lt;/li&gt;
&lt;li&gt;Mux API&lt;/li&gt;
&lt;li&gt;节点&lt;/li&gt;
&lt;li&gt;键和值&lt;/li&gt;
&lt;li&gt;变体&lt;/li&gt;
&lt;li&gt;分辨顺序&lt;/li&gt;
&lt;li&gt;插入文件&lt;/li&gt;
&lt;li&gt;复合文件&lt;/li&gt;
&lt;li&gt;高级YAML标记&lt;/li&gt;
&lt;li&gt;!include&lt;/li&gt;
&lt;li&gt;!using&lt;/li&gt;
&lt;li&gt;!remove_node&lt;/li&gt;
&lt;li&gt;!remove_value&lt;/li&gt;
&lt;li&gt;!mux&lt;/li&gt;
&lt;li&gt;完整示例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job重放&lt;/li&gt;
&lt;li&gt;Job对比&lt;/li&gt;
&lt;li&gt;运行远程测试&lt;ul&gt;
&lt;li&gt;远程Host运行测试&lt;/li&gt;
&lt;li&gt;虚拟机上运行测试&lt;/li&gt;
&lt;li&gt;Docker容器上运行测试&lt;/li&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用GDB调试&lt;ul&gt;
&lt;li&gt;透明执行可执行文件&lt;/li&gt;
&lt;li&gt;avocado.uitls.gdb APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封装测试执行文件&lt;ul&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;li&gt;警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;插件系统&lt;ul&gt;
&lt;li&gt;插件列表&lt;/li&gt;
&lt;li&gt;制作插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;高级主题和维护&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参考指南&lt;ul&gt;
&lt;li&gt;job,test和identifiers&lt;/li&gt;
&lt;li&gt;测试类型&lt;/li&gt;
&lt;li&gt;测试状态&lt;/li&gt;
&lt;li&gt;库和APIs&lt;/li&gt;
&lt;li&gt;测试解析&lt;/li&gt;
&lt;li&gt;结果规格&lt;/li&gt;
&lt;li&gt;job前后脚本&lt;/li&gt;
&lt;li&gt;job清理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avocado 开发tips&lt;ul&gt;
&lt;li&gt;中断测试&lt;/li&gt;
&lt;li&gt;In tree utils&lt;/li&gt;
&lt;li&gt;Line-profiler&lt;/li&gt;
&lt;li&gt;使用Eclipse远程debug&lt;/li&gt;
&lt;li&gt;在Eclipase中使用Trello&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;avocado发布&lt;ul&gt;
&lt;li&gt;删除版本号&lt;/li&gt;
&lt;li&gt;应当注意哪些项目库&lt;/li&gt;
&lt;li&gt;所有库的标记&lt;/li&gt;
&lt;li&gt;构建rpms&lt;/li&gt;
&lt;li&gt;包命名&lt;/li&gt;
&lt;li&gt;上传包到仓库&lt;/li&gt;
&lt;li&gt;书写发行注记&lt;/li&gt;
&lt;li&gt;发送电子邮件到avocado-devel和其他地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;API参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;测试APIs&lt;/li&gt;
&lt;li&gt;工具APIs&lt;/li&gt;
&lt;li&gt;内部(核心)APIs&lt;/li&gt;
&lt;li&gt;外部(插件)APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Avocado 发行注记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发行注记&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/ZVQGCAP1ZZ.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;关于Avocado&lt;/h3&gt;
&lt;p&gt;&lt;span id = 'avocado01'&gt;Avocado&lt;/span&gt;是一套帮助自动化测试工具和库。&lt;/p&gt;
&lt;p&gt;可以把它称作为测试框架。内部测试是通过python编写的，并且遵从unittest模式，但是它也可以将执行任何外部可执行文件作为测试。&lt;/p&gt;
&lt;p&gt;组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个可以引导执行测试的Test runner。这些测试可以是选择任意语言编写的测试，或则通过python编写，并使用可用的库。这两种情况，你都可以获取自动日志和系统信息收集功能。&lt;/li&gt;
&lt;li&gt;提供一个帮助你通过一种concise,yet expressive 和 powerful的方式编写测试。你可以通过后面&lt;a href=""&gt;库和API&lt;/a&gt;章节了解更多这方面的信息。&lt;/li&gt;
&lt;li&gt;插件，可以扩展和增加框架的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Avocado尽可能尝试遵守标准的Python测试技术。 使用Avocado API编写的测试是从unittest类派生，而添加了适合于功能和性能测试的其他方法。 测试运行器旨在帮助人们运行测试，同时提供各种系统和日志记录工具。&lt;/p&gt;
&lt;p&gt;接下来的专题，会按照本文的目录详细介绍Avocado&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2016/11/03/自动化测试"&gt;Avocado-入门&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-11-01:2016/11/01/自动化测试/</guid><category>Avocado</category></item><item><title>python metaclass(上）</title><link>http://king32783784.github.io/2016/10/03/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Python/</link><description>&lt;h3&gt;类也是对象&lt;/h3&gt;
&lt;p&gt;在理解元类之前，需要先掌握python中的类。Python中的类的概念借鉴于Smalltalk, 显得有些奇特。大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class ObjectCreator(object):
...     pass
... 
&amp;gt;&amp;gt;&amp;gt; my_object = ObjectCreator()
&amp;gt;&amp;gt;&amp;gt; print my_object
&amp;lt;__main__.ObjectCreator object at 0x7fcad0b76590&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是python的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要使用关键字class,Python解释器在执行的时候就会创建一个对象。下面的代码段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;class ObjectCreator(object):
   ...     pass
   ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;将在内存中创建一个对象，名字就是ObjectCreator. &lt;strong&gt;这个对象（类）自身具有创建对象（类示例）的能力，而这就是为什么它是一个类的原因.&lt;/strong&gt; 但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）可以将它赋值给一个变量&lt;/li&gt;
&lt;li&gt;2）可以拷贝它&lt;/li&gt;
&lt;li&gt;3）可以为它增加属性&lt;/li&gt;
&lt;li&gt;4）可以将它作为函数参数进行传递&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print ObjectCreator     # 你可以打印一个类，因为它其实也是一个对象
&amp;lt;class &amp;#39;__main__.ObjectCreator&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def echo(o):
…       print o
…
&amp;gt;&amp;gt;&amp;gt; echo(ObjectCreator)                 # 你可以将类做为参数传给函数
&amp;lt;class &amp;#39;__main__.ObjectCreator&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print hasattr(ObjectCreator, &amp;#39;new_attribute&amp;#39;)
Fasle
&amp;gt;&amp;gt;&amp;gt; ObjectCreator.new_attribute = &amp;#39;foo&amp;#39; #  你可以为类增加属性
&amp;gt;&amp;gt;&amp;gt; print hasattr(ObjectCreator, &amp;#39;new_attribute&amp;#39;)
True
&amp;gt;&amp;gt;&amp;gt; print ObjectCreator.new_attribute
foo
&amp;gt;&amp;gt;&amp;gt; ObjectCreatorMirror = ObjectCreator # 你可以将类赋值给一个变量
&amp;gt;&amp;gt;&amp;gt; print ObjectCreatorMirror()
&amp;lt;__main__.ObjectCreator object at 0x8997b4c&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;动态地创建类&lt;/h3&gt;
&lt;p&gt;因为类也是对象，可以在运行时动态的创建他们，就像其他任何对象一样。首先，可以在函数中创建类，使用class关键字即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def choose_class(name):
…       if name == &amp;#39;foo&amp;#39;:
…           class Foo(object):
…               pass
…           return Foo     # 返回的是类，不是类的实例
…       else:
…           class Bar(object):
…               pass
…           return Bar
…
&amp;gt;&amp;gt;&amp;gt; MyClass = choose_class(&amp;#39;foo&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; print MyClass              # 函数返回的是类，不是类的实例
&amp;lt;class &amp;#39;__main__&amp;#39;.Foo&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print MyClass()            # 你可以通过这个类创建类实例，也就是对象
&amp;lt;__main__.Foo object at 0x89c6d4c&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但这还不够动态，仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。
但就和Python中大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老而又强大的函数能够让你知道一个对象的类型是什么，就像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print type(1)
&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print type(&amp;quot;1&amp;quot;)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print type(ObjectCreator)
&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print type(ObjectCreator())
&amp;lt;class &amp;#39;__main__.ObjectCreator&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里，type有一种完全不同的能力，能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件
很傻的事情，但这在python中是为了保持向后兼容性）&lt;/p&gt;
&lt;p&gt;type可以像这样工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type(类名， 父类的元组（针对继承的情况，可以为空）， 包含属性的字典（名称和值））
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如下面的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class MyShinyClass(object):
...     pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以手动这样创建：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;MyShinyClass = type(&amp;#39;MyShinyClass&amp;#39;, (), {})
&amp;gt;&amp;gt;&amp;gt;print MyShinyClass
&amp;lt;class &amp;#39;__main__.MyShinyClass&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print MyShinyClass()  #  创建一个该类的实例
&amp;lt;__main__.MyShinyClass object at 0x8997cec&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你会发现我们使用MyShinyClass作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情搞复杂。&lt;/p&gt;
&lt;p&gt;type接受一个字典来为类定义属性， 因此：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class Foo(object):
...     bar = True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以翻译为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;Foo = type(&amp;#39;Foo&amp;#39;, (), {&amp;#39;bar&amp;#39;:True})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并且可以将Foo当成一个普通的类一样使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print Foo
&amp;lt;class &amp;#39;__main__.Foo&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print Foo.bar
True
&amp;gt;&amp;gt;&amp;gt; f = Foo()
&amp;gt;&amp;gt;&amp;gt; print f
&amp;lt;__main__.Foo object at 0x8a9b84c&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print f.bar
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然，你可以向这个类继承，所以，如下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class FooChild(Foo):
...    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可以写成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; FooChild = type(&amp;#39;FooChild&amp;#39;, (Foo,), {})
&amp;gt;&amp;gt;&amp;gt; print FooChild
&amp;lt;class &amp;#39;__main__.FooChild&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print FooChild.bar   # bar属性是由Foo继承而来
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终你会希望为你的类增加方法，只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def echo_bar(self): 
…       print self.bar
…
&amp;gt;&amp;gt;&amp;gt; FooChild = type(&amp;#39;FooChild&amp;#39;, (Foo,), {&amp;#39;echo_bar&amp;#39;: echo_bar})
&amp;gt;&amp;gt;&amp;gt; hasattr(Foo, &amp;#39;echo_bar&amp;#39;)
False
&amp;gt;&amp;gt;&amp;gt; hasattr(FooChild, &amp;#39;echo_bar&amp;#39;)
True
&amp;gt;&amp;gt;&amp;gt; my_foo = FooChild()
&amp;gt;&amp;gt;&amp;gt; my_foo.echo_bar()
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以看到，python中，类也是对象，可以动态的创建类。这就是当你使用关键字class时python在幕后做的事情，而这就是通过元类来实现的。&lt;/p&gt;
&lt;h3&gt;到底什么是元类？&lt;/h3&gt;
&lt;p&gt;元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经了解到python中的类也是对象。元类就是用来创建类（对象）的，元类就是类的类，可以这样理解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MyClas = MetaClass()
MyObject = MyClass()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以看到了type可以让你像这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MyClass = type(&amp;#39;MyClass&amp;#39;, (), {})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这就是因为函数type实际上就是一个元类。type就是Python在背后用来创建所有类的元类。str用来创建字符串对象的类，int是用来创建整数对象的类，type就是创建类对象的类。可以通过检查
__class__属性来看到这一点。Python中所有的东西，注意，我是指所有的东西--都是对象。包括整数、字符串、函数以及类。他们全部都是对象，而且他们都是从一个类创建而来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; age = 35
&amp;gt;&amp;gt;&amp;gt; age.__class__
&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; name = &amp;#39;bob&amp;#39;
&amp;gt;&amp;gt;&amp;gt; name.__class__
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def foo(): pass
&amp;gt;&amp;gt;&amp;gt;foo.__class__
&amp;lt;type &amp;#39;function&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; class Bar(object): pass
&amp;gt;&amp;gt;&amp;gt; b = Bar()
&amp;gt;&amp;gt;&amp;gt; b.__class__
&amp;lt;class &amp;#39;__main__.Bar&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，对于任何一个__class__的__class__属性又是什么？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a.__class__.__class__
&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; age.__class__.__class__
&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; foo.__class__.__class__
&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; b.__class__.__class__
&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此元类就是创建类这种对象的东西，如果你喜欢的话，可以把元类称作“类工厂”（不要和工厂类搞混就好） type就是Python内建元类，当然，你也可以创建自己的元类。&lt;/p&gt;
&lt;h3&gt;__metaclass__属性&lt;/h3&gt;
&lt;p&gt;你可以在写一个类的时候为其添加__metaclass__属性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;[..]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这么做了，python就会用元类来创建类Foo. 这里面有些技巧，首先写下class Foo(object),但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找__metaclass__属性，如果找到了，
python就会用它来创建类Foo,如果没有找到，就会用内建的type来创建这个类。把下面的这段话反复读几次，当你写下如下代码时：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 做了如下操作：&lt;/p&gt;
&lt;p&gt;Foo中有__metaclass__有这个属性吗？ 如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，不是类实例哈）。如果Python没有找到__metaclass__，它会
 在Bar(父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中寻找__metaclass__,并尝试做和前面同样的操作。如果还是找不到__metaclass__, Python就会用内置的type来创建这个类的对象。&lt;/p&gt;
&lt;p&gt;现在的问题是，可以在__metaclass__中放置那些代码呢？答案是：可以创建一个类的东西。那什么可以创建一个类呢？type,或则任何使用到type或子类化type的东西都可以。&lt;/p&gt;
&lt;h3&gt;自定义元类&lt;/h3&gt;
&lt;p&gt;元类的主要目的就是为了当创建类时能够自动的改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式即可。&lt;/p&gt;
&lt;p&gt;幸运的是，__metaclass__实际上可以被任意调用，它并不是一个正式的类。所以，我们这里先以一个简单的函数作为例子开始。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 元类会自动将你通常传给“type&amp;quot;的参数作为自己的参数传入
def upper_attr(future_class_name, future_class_parents, future__class_attr)
    &amp;#39;&amp;#39;&amp;#39;返回一个类对象，将属性都转为大写形式‘’‘
    #  选择所有不以“__”开头的属性
    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith(&amp;#39;__&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2017/01/15/python/"&gt;python metaclass(下)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/WBB0EXYSWE.jpg" height="320" width="540"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 03 Oct 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-10-03:2016/10/03/编程语言-Python/</guid><category>Python</category></item><item><title>LTP－kernel-syscalls-accept()</title><link>http://king32783784.github.io/2016/08/05/LTP/</link><description>&lt;h4&gt;accept用例分析&lt;/h4&gt;
&lt;p&gt;case本身说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Verify that accept() returns the proper errno for various failure cases
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;验证accept()是否返回正确的errno.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试log&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;accept01    1  TPASS  :  bad file descriptor successful
accept01    2  TPASS  :  bad file descriptor successful
accept01    3  TPASS  :  invalid socket buffer successful
accept01    4  TPASS  :  invalid salen successful
accept01    5  TPASS  :  invalid salen successful
accept01    6  TPASS  :  no queued connections successful
accept01    7  TPASS  :  UDP accept successful
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~                                              &lt;br /&gt;
测试错误类型包括:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bad file descriptor、invalid socket buffer、invalid salen、no queued connections、 UDP accept等
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;accept函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;accept()&lt;/p&gt;
&lt;p&gt;接收一个套接字中已建立的连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用格式&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;socklen_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addrlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;功能参数描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;accept()系统调用主要用在基于链接的套接字类型，比如SOCK_STREAM和SOCK_SEQPACKET.它提取出所监听套接字的等待连接队列中第一个连接请求，创建一个新的套接字，并返回指向该套接字的文件描述符。新建立的套接字不在监听状态，原来所监听的套接字也不受该系统调用的影响。&lt;/p&gt;
&lt;p&gt;备注： 新建立的套接字准备发送send()和接收数据recv().&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;sockfd, 利用系统调用socket()建立的套接字描述符，通过bind()绑定到一个本地地址（一般为服务器的套接字），并且通过listen()一直在监听连接。&lt;/p&gt;
&lt;p&gt;addr, 指向struct sockaddr的指针，该结构用通讯层服务器对等套接字的地址（一般为客户端地址）填写，返回地址addr的确切格式由套接字的地址类别（比如tcp或udp)决定；若addr为NULL，没有有效地址填写，这种情况下，addrlen也不使用，应该置为NULL；&lt;/p&gt;
&lt;p&gt;备注： addr是个指向局部数据结构sockaddr_in的指针，这就是要求接入的信息本地的套接字（地址和指针）&lt;/p&gt;
&lt;p&gt;addrlen, 一个值结果参数，调用函数必须初始化为包含addr所指向结构大小的数值，函数返回时包含对等地址（一般为服务器地址）的实际数值；&lt;/p&gt;
&lt;p&gt;备注： addrlen 是个局部整型变量， 设置为sizeof(struct sockaddr_in)&lt;/p&gt;
&lt;p&gt;如果队列中没有等待的连接，套接字也没有被标记为Non-blocking, accept()会阻塞调用函数知道连接出现；如果套接字被标记为Non-blocking, 队列中也没有等待的连接，accept返回错误EAGAIN或EWOULDBLOCK.&lt;/p&gt;
&lt;p&gt;备注： 一般来说，实现时accept()为阻塞函数，当监听socket调用accept()时，它先到自己的receive_buf中查看是否有连接数据包；&lt;/p&gt;
&lt;p&gt;若有，把数据拷贝处理啊，删掉接收到的数据包，创建新的socket与客户发来的地址建立链接；&lt;/p&gt;
&lt;p&gt;若没有，就阻塞等待；&lt;/p&gt;
&lt;p&gt;为了在套接字中有到来的连接时得到通知，可以使用select()或poll().当尝试建立新连接时，系统发送一个可读事件，然后调用accept()为该链接获取套接字。另一种方法是，当套接字中有连接到来时设定套接字发送SIGIO信号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;成功时，返回非负整数，该整数是接收到套接字的描述符；出错时，返回－１，相应的设定全局变量errno.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux下，accept()把已等待的网络错误传给新建立的连接，当作是accept()返回的错误。这与其他的BSD实现是不同的。为了可靠运行，应该在accept()之后检测协议已定义的一些网络错误，并把这些错误当作EAGAIN并重试。对于tcp/ip协议来说，主要有：ENETDOWN,EPROTO,ENOPROTOOPT,EHOSTDOWN,ENONET,EHOSTUNREACH,EOPNOTSUPP和ENETUNREACH。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/H01L2BILXC.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accept01.c代码分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要函数包括mian、setup、cleanup、setup0、cleanup0、setup1、cleanup1、setup2、setup3&lt;/p&gt;
&lt;p&gt;test_case_t结构体&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct test_caset {         
    int domain;  /*AF_INIT, AF_UNIX,....*/
    int type; /* SOCK_STREAM, SOCK_DGRAM...*/
    int proto; /* protocol number(usually 0 = default) */
    struct sockaddr *sockaddr; /*socket address buffer */
    socklen_t *salen;  /* accept&amp;#39;s 3rd argument */
    int retval;   /* syscall return value */
    int experrno;  /* expected errno */
    void (*setup)(void);
    void(*cleanup)(void);
    char *desc;
} 
 tdat[] = {
     {PF_INET, SOCK_STREAM, 0, (struct sockaddr *)&amp;amp;fsin1,
         &amp;amp;sinlen, -1, EBADF, setup0, cleanup0,
         &amp;quot;bad file descriptor&amp;quot;},   //无效的文件描述符
      PF_INET, SOCK_STREAM, 0, (struct sockaddr *)&amp;amp;fsin1,
        &amp;amp;sinlen, -1, ENOTSOCK, setup0, cleanup0,
        &amp;quot;bad file descriptor&amp;quot;}, { //无效的文件描述符
      PF_INET, SOCK_STREAM, 0, (struct sockaddr *)3,
        &amp;amp;sinlen, -1, EINVAL, setup1, cleanup1,
        &amp;quot;invalid socket buffer&amp;quot;}, {  //无效套接字缓存区
      PF_INET, SOCK_STREAM, 0, (struct sockaddr *)&amp;amp;fsin1,
        (socklen_t *) 1, -1, EINVAL, setup1, cleanup1,
        &amp;quot;invalid salen&amp;quot;}, {   //无效的salen
      PF_INET, SOCK_STREAM, 0, (struct sockaddr *)&amp;amp;fsin1,
        &amp;amp;sinlen, -1, EINVAL, setup2, cleanup1,
        &amp;quot;invalid salen&amp;quot;}, {
      PF_INET, SOCK_STREAM, 0, (struct sockaddr *)&amp;amp;fsin1,
        &amp;amp;sinlen, -1, EINVAL, setup3, cleanup1,
        &amp;quot;no queued connections&amp;quot;}, {  //队列中没有等待的连接
      PF_INET, SOCK_DGRAM, 0, (struct sockaddr *)&amp;amp;fsin1,
        &amp;amp;sinlen, -1, EOPNOTSUPP, setup1, cleanup1,
        &amp;quot;UDP accept&amp;quot;},};
int TST_TOTAL = sizeof(tdat) / sizeof(tdat[0]); /*通过数组的长度，计算测试用例数量*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先定义测试case需要的结构体，然后进行了&lt;a href="https://king32783784.github.io/2011/07/11/C"&gt;结构体初始化&lt;/a&gt;，定义了7种错误类型，对应7个测试case，和测试log是对应的。
顺便看一下 SOCK_STREAM和SOCK_DGRAM的区别：
    sock_stream   是有保障的（即能保证数据正确传送到对方）面向连接的SOCKET，多用于资料（如文件）传送。
    sock_dgram   是无保障的面向消息的socket　，　主要用于在网络上发广播信息。
    SOCK_STREAM是基于TCP的，数据传输比较有保障。SOCK_DGRAM是基于UDP的，专门用于局域网，基于广播
    SOCK_STREAM 是数据流,一般是tcp/ip协议的编程,SOCK_DGRAM分是数据抱,是udp协议网络编程&lt;/p&gt;
&lt;p&gt;再看说一下AF_INET和PF_INET的差别：     &lt;/p&gt;
&lt;p&gt;在Unix/Linux系统中，在不同的版本中这两者有微小差别.对于BSD,是AF,对于POSIX是PF.理论上建立socket时是指定协议，应该用PF_xxxx，设置地址时应该用AF_xxxx&lt;/p&gt;
&lt;p&gt;分别看一下这几个错误码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EBADF:
当作为参数的套接字不是一个有效的文件描述符(在Linux下用文件描述符来表示设备文件和普通文件。文件描述符是一个整型的数据，所有对文件的操作都通过文件描述符实现。文件描述符是文件系统中链接用户空间和内核空间的枢纽)时，抛出这个错误码。无效的文件描述符是什么意思呢？就是fd已经close的，或者本身就不是个有效的socket的fd。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ENOTSOCK:
在非socket上执行socket操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EINVAL：
无效参数。提供的参数非法。有时也会与socket的当前状态相关，如一个socket并没有进入listening状态，此时调用accept，就会产生EINVAL错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EOPNOTSUPP:
不支持的操作。
引用对象的类型不支持尝试的操作。通常，这发生在套接字描述符不支持此操作，例如，试着接受数据报套接字上的连接的套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来看几个辅助函数。&lt;/p&gt;
&lt;p&gt;1.setup函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void setup(void)
{
     TEST_PAUSE;
     /*初始化本地 sockaddr*/
     sin0.sin_family = AF_INET;  //绑定本地地址或连接远程地址时需要初始化sockaddr_in结构，其中指定address family时一般设置为AF_INET，即使用IP
     sin0.sin_port = 0;
     sin0.sin_addr.s_addr = INADDR_ANY; //指定地址为0.0.0.0的地址
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TEST_PAUSE是一个&lt;a href="https://king32783784.github.io/2011/08/15/C"&gt;宏定义&lt;/a&gt;，代表usc_global_setup_hook()函数。作用是当设置了暂停标志后，暂停&lt;a href="https://king32783784.github.io/2009/10/12/UNIX"&gt;SIGUSR1&lt;/a&gt;，当新的信号来时，再继续。下面是usc_global_setup_hook函数实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define TEST_PAUSE usc_global_setup_hook();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;usc_global_setup_hook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;usc_global_setup_hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef UCLINUX&lt;/span&gt;
   &lt;span class="cm"&gt;/*定义temp变量存储信号旧信号的动作，中断后恢复*/&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_TMP_FUNC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="cm"&gt;/*中断等待sigusr1.*/&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STD_PAUSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_TMP_FUNC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)())&lt;/span&gt;&lt;span class="n"&gt;singnal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STD_go&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)())&lt;/span&gt;&lt;span class="n"&gt;_TMP_FUNC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STD_TP_sbrk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;STD_LP_sbrk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;STD_start_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sbrk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/*获取原始sbreak大小*/&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STD_TP_sbrk&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;sbrk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STD_TP_sbrk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after sbrk(%d)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STD_TP_sbrk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="
" _tdat_testno_.experr="(tdat[testno].experr" if="if"&gt;2.setup0函数case1测试前设置
    static void setup0(void)&lt;/p&gt;
&lt;p&gt;3.setup2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void setup2(void)
{
    setup1(); //调用setup1()获取套接字s
    sinlen = 1;  //s置为无效
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.setup3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void setup3(void)
{
    int one = 1;

    setup1();
    SAFE_IOCTL(cleanup, s, FIONBIO, &amp;amp;one);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SAFE_IOCTL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;define&lt;/span&gt; &lt;span class="nt"&gt;SAFE_IOCTL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;cleanup_fn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...)&lt;/span&gt;             &lt;span class="err"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;int&lt;/span&gt; &lt;span class="err"&gt;ret&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;ioctl(fd,&lt;/span&gt; &lt;span class="err"&gt;request,&lt;/span&gt; &lt;span class="err"&gt;__VA_ARGS__)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="err"&gt;\&lt;/span&gt;                                                            
    &lt;span class="err"&gt;ret&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;                                          &lt;span class="err"&gt;\&lt;/span&gt;                                                            
    &lt;span class="err"&gt;tst_brkm(TBROK&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;TERRNO,&lt;/span&gt; &lt;span class="err"&gt;cleanup_fn,&lt;/span&gt;              &lt;span class="err"&gt;\&lt;/span&gt;                                                            
    &lt;span class="err"&gt;&amp;quot;ioctl(%i,%s,...)&lt;/span&gt; &lt;span class="err"&gt;failed&amp;quot;,&lt;/span&gt; &lt;span class="err"&gt;fd,&lt;/span&gt; &lt;span class="err"&gt;#request)&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;                                                            
    &lt;span class="n"&gt;safe_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6.cleanup、cleanup0, cleanup1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void cleanup(void)
{
}

static void cleanup0(void)
{
    s = -1;
}

static void cleanup1(void)
{
    (void)close(s);
    s = -1;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新设置s = -1&lt;/p&gt;
&lt;p&gt;OK,现在看一下main函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int main(int ac, char *av[])
{
    int lc;

    tst_parse_opts(ac, av, NULL, NULL);  //ltp参数解析函数

    setup();

    for (lc = 0; TEST_LOOPING(lc); ++lc){
        test_count = 0;
        for (testno = 0; testno &amp;lt; TST_TOTAL; ++testno){
            tdat[testno].setup();

            TEST(accept(s, tdat[testno].sockaddr,
                tdat[testno].salen));
            if (TEST_RETURN &amp;gt; 0)
                TEST_RETURN = 0;
            if (TEST_RETURN != tdat[testno].retval ||
                (TEST_RETURN &amp;lt; 0 &amp;amp;&amp;amp;
                 TEST_ERRNO != tdat[testno].experrno)){
                  &amp;quot;%ld(expected %d), errno %d (expected&amp;quot;
                  &amp;quot;%d)&amp;quot;, tdat[testno].desc,
                  TEST_RETURN, tdat[testno].desc,
                  TEST_ERRNO, tdat[testno].experrno);
            } else {
                tst_resm(TPASS, &amp;quot;%s successful&amp;quot;,
                    tdat[testno].desc);
            }
            tdat[testno].cleanup();
        }

    }
    cleanup();
    tst_exit();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先看一下tst_parse_opts()函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void tst_parse_opts(int argc, char *argv[], const option_t *user_optarg,
                    void (*user_help)(void))
{
    const char *msg;

    msg = parse_opts(argc, argv, user_optarg, user_help); //parse_opts是参数解析函数，后面文章再进行介绍

    if(msg)
        tst_brkm(TBROK, NULL, &amp;quot;OPTION  PARSING ERROR - %s &amp;quot;, msg);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来调用setup，准备测试环境，初始化本地IP地址。然后是一个嵌套的两层循环，第一次是测试次数的遍历，通过TEST_LOOPING实现。
TEST_LOOPING是int usc_test_looping(int counter)函数，该函数后面的文章再进行解释。tst_count初始化为0。&lt;/p&gt;
&lt;p&gt;第二层循环是遍历case数组。tdat[testno].setup()，调用对应setup准备case的特殊设置。&lt;/p&gt;
&lt;p&gt;TEST启动测试，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define TEST(SCALL) \
    do { \
    errno = 0; \
    TEST_RETURN = SCALL; \
    TEST_ERRNO = errno; \
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后将tdat中的对应参数，分别执行accept函数，如果预期的返回值不符或则返回值小于0且和预期的错误类型不匹配，则调用tst_resm()，进行出错处理。tst_resm将在后面进行分析。如果符合预期，则打印TPASS，然后调用tdat[testno].clearnup()分别清理环境。&lt;/p&gt;
&lt;p&gt;最后调用cleanup()清理，tst_exit()退出，tst_exit()在单独分析ltp测试框架时分析。&lt;/p&gt;
&lt;p&gt;到此，我们就清楚accept测试的内容了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/H01L2BILXC.jpg" height="280" width="420"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-05:2016/08/05/LTP/</guid><category>LTP</category></item><item><title>LTP－kernel-syscalls-abort</title><link>http://king32783784.github.io/2016/08/02/LTP/</link><description>&lt;p&gt;从本文开始，开始分析kernel部分的测试用例，该部分测试用例大部分为Ｃ语言编写，因此会穿插加入一定的Ｃ语言或unix环境编程的知识。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/I0T0E4Y826.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;h4&gt;abort&lt;/h4&gt;
&lt;p&gt;设计说明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fork child. Child出现abort,检查返回状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Core file大小的限制必须大于０&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数名: abort&lt;/p&gt;
&lt;p&gt;功 能: 异常终止一个进程&lt;/p&gt;
&lt;p&gt;用 法: void abort(void);&lt;/p&gt;
&lt;p&gt;abort()是使异常程序终止，同时发送SIGABRT信号给调用进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;该函数不返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此函数将SIGABRT信号发送给调用进程（进程不应忽略此信号).ISO C规定，调用abort将向主机环境递送一个未成功终止的通知，其方法是调用raise(SIGABRT)函数。
ISO C要求若捕捉此信号而且相应信号处理程序返回，abort仍不会返回其调用者。如果捕捉到此信号，则信号处理程序不能返回的唯一方法是它调用exit、_exit、_Exit、longjmp或sigloogjmp.POSIX.1也说明
abort并不理会进程对此信号的阻塞和忽略。&lt;/p&gt;
&lt;p&gt;让进程捕捉SIGABRT的意图是：在进程终止之前由其执行所需的清理操作。如果进程并不在信号处理程序中终止自己，POSIX.1声明当信号处理程序返回时，abort终止该进程。&lt;/p&gt;
&lt;p&gt;ISO C针对此函数的规范将下列问题留由实现决定：　是否要冲洗输出流以及是否删除临时文件。POSIX.1的要求更进一步，要求如果abort调用终止进程，则它对所有打开标准I/O流的效果应当与进程终止前对每个流调用fclose相同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;系统V早期的版本中，abort函数产生SIGIOT信号。更进一步，进程忽略此信号，或者捕捉它并从信号处理程序返回都是可能的，在返回情况下，abort返回到它的调用者。
4.3BSD产生SIGILL信号。在此之前，该函数解除对此信号的阻塞，将其配置恢复为SIG_DFL (终止并构造core文件)。这阻止一个进程忽略或捕捉此信号。
SVR4在产生此信号之前关闭所有I/O流。在另一方面，4.3+BSD则不做此操作。对于保护性的程序设计，如果希望刷新标准I/O流，则在调用abort之前要做这种操作。在err_dump函数中实现了这一点
因为大多数UNIX tmpfile(临时文件)的实现在创建该文件之后立即调用unlink，所以ANSI C关于临时文件的警告通常与我们无关。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;abort的POSIX.1实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="cm"&gt;/*POSIX.1风格的abort()实现*/&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;sigset_t&lt;/span&gt;    &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sigaction&lt;/span&gt;   &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Caller can&amp;#39;t igore SIGABRT, if so reset to default.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_IGN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="cm"&gt;/* flush all open stdio stream */&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Caller can&amp;#39;t block SIGABRT; make sure it&amp;#39;s unblocked.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
     &lt;span class="n"&gt;sigfillset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;sigdelset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* mask has only SIGABRT turned off */&lt;/span&gt;
     &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_SETMASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* send the signal */&lt;/span&gt;

     &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;      * if we&amp;#39;re here, process caught SIGABRT and returned.&lt;/span&gt;
&lt;span class="cm"&gt;      */&lt;/span&gt;

     &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/*flush all open stdio streams*/&lt;/span&gt;
     &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* reset to default */&lt;/span&gt;
     &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_SETMASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* just in case ...*/&lt;/span&gt;
     &lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* and one more time*/&lt;/span&gt;
     &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/*this should never be executed...*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：首先查看是否将执行默认动作，若是则冲洗所有标准I/O流。这并不等价于对所有打开的流调用fclose(因为只冲洗，并不关闭它们），但是当进程终止时，系统会关闭所有打开的文件。如果进程捕捉此信号并返回，
那么因为进程产生了更多的输出，所以再一次冲洗所有的流。不进行冲洗处理的唯一条件是如果进程捕捉此信号，然后调用_exit或_Exit.这种情况下，内存中任何未冲洗的标准I/O缓冲区都被丢弃。我们假定捕捉此信号，而且_exit或_Exit的调用者并不想要冲洗缓冲区。&lt;/p&gt;
&lt;p&gt;应用例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NOSUCHF.ILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Couldn&amp;#39;t open file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nf"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译运行一下，看一下执行情况片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;execve(&amp;quot;./test.o&amp;quot;, [&amp;quot;./test.o&amp;quot;], [/* 97 vars */]) = 0

open(&amp;quot;NOSUCHF.ILE&amp;quot;, O_RDONLY)           = -1 ENOENT (No such file or directory)

dup(2)                                  = 3

fcntl(3, F_GETFL)                       = 0x8402 (flags O_RDWR|O_APPEND|O_LARGEFILE)

fstat(3, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 3), ...}) = 0

mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fd18aa86000

write(3, &amp;quot;Couldn&amp;#39;t open file: No such file&amp;quot;..., 46Couldn&amp;#39;t open file: No such file or directory

) = 46

close(3)                                = 0

munmap(0x7fd18aa86000, 4096)            = 0

rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0

gettid()                                = 18489

tgkill(18489, 18489, SIGABRT)           = 0

SIGABRT {si_signo=SIGABRT, si_code=SI_TKILL, si_pid=18489, si_uid=0} ---

+++ killed by SIGABRT +++

已放弃
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;abort测试代码说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码大体结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|-   macro                                                                                                           
||     NUM                                                                                                     
||     MIN_RLIMIT_CORE                                                                                                                           
|                                                                                                                         
|-   variable                                                                                                                            
||     TCID                                                                                                           
||     TST_TOTAL                                                                                                                 
|                                                                                                      
|-   function                                                                                                    
||     main                                                                                         
||     setup                                                              
||     cleanup                                                                 
||     do_child                                                                                    
||     instress
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先看一下头文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;test.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;safe_macros.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;什么是头文件呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在C语言家族程序中，头文件被大量使用。一般而言，每个C++/C程序通常由头文件(header files)和定义文件(definition files)组成。头文件作为一种包含功能函数、数据接口声明的载体文件，主要用于保存程序的声明(declaration)，而定义文件用于保存程序的实现 (implementation)&lt;/p&gt;
&lt;p _="
" printf_Hello="printf(“Hello" world_="world!”);
"&gt;让我们来看，经典程序 “Hello world!”　
定义文件名“First.c”
    main()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;sample-1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看看上面的程序，没有.h文件,因为程序太简单，没有需要保存的声明。&lt;/p&gt;
&lt;p&gt;文件名 First.c　变形&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printStr()
{
    printf(“Hello world!”);
}
main()
{
printStr()
}

&amp;lt;sample-2&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还是没有, 那就让我们把这个程序再稍微改动一下.&lt;/p&gt;
&lt;p&gt;文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;main()
{
    printStr()
}

printStr()
{
    printf(“Hello world!”);
}

&amp;lt;sample-3&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sample3和sample2是不同的，pritStr()函数定义的顺序不同。sample3是编译不通过的。这里面涉及作用域的问题。在这里只讲述与.h文件相关的顶层作用域。 顶层作用域就是从声明点延伸到源程序文本结束, 就printStr()这个函数来说，他没有单独的声明,只有定义,那么就从他定义的行开始,到first.c文件结束。sample2中，printStr的定义在main函数前面，所以作用域覆盖main函数，而sample3则没有。
这种情况怎么办呢? 有两种方法 ,一个pritStr函数定义到main函数之前，那就让我们来看另一个例子,让我们看看这个方法是不是在任何时候都会起作用.
文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play2()
{
  ……………….
  play1()
  ………………..
}
play1()
{
    ……………………..
    play2()
    ……………………
}
main()
{
    play1()
}

&amp;lt;sample-4&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;函数嵌套, 那么play1和play2这两个函数哪个放到前面呢?&lt;/p&gt;
&lt;p&gt;这时就需要我们来使用第二种方法,使用声明.&lt;/p&gt;
&lt;p&gt;文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
play2();
play2()
{
    ……………….
    play1()
    ………………..
}
play1()
{
    ……………………..
    play2()
    ……………………
);
}
main()
{
    play1()
}

&amp;lt;sample-5&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个大型的软件项目,可能有几千个,上万个play, 而不只是play1,play2这么简单, 这样就可能有N个类似 play1(); play2(); 这样的声明, 这个时候就需要我们想办法把这样的play1(); play2(); 也另行管理, 而不是把他放在.c文件中, 于是.h文件出现了.&lt;/p&gt;
&lt;p&gt;文件名 First.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
play2();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文件名 First.C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include “first.h”
play2()
{
    ……………….
    play1()
    ………………..
}
play1()
{
    ……………………..
    play2()
    ……………………
);
}
main()
{
play1()
}

&amp;lt;sample-6&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如在second.c中还有一个函数需要调用first.c文件中的play1函数, 如何实现呢?&lt;/p&gt;
&lt;p&gt;Sencond.h 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sencond.c文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;***()
{
    …………….
    Play();
    ……………….
}

&amp;lt;sample-7&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在sencond.h文件内声明play1函数，怎么能调用到first.c文件中的哪个play1函数中呢? 是不是搞错了，没有搞错, 这里涉及到c语言的另一个特性:存储类说明符.
C语言的存储类说明符有以下几个, 我来列表说明一下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明符&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Auto&lt;/td&gt;
&lt;td&gt;只在块内变量声明中被允许, 表示变量具有本地生存期.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extern&lt;/td&gt;
&lt;td&gt;出现在顶层或块的外部变量函数与变量声明中，表示声明的对象具有静态生存期, 连接程序知道其名字.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Static&lt;/td&gt;
&lt;td&gt;可以放在函数与变量声明中. 在函数定义时, 其只用于指定函数名,而不将函数导出到连接程序. 在函数声明中,表示其后面会有定义声明的函数, 存储类为static. 在数据声明中, 总是表示定义的声明不导出到连接程序.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;无疑, 在sample7中的second.h和first.h中,需要我们用extern标志符来修饰play1函数的声明,这样,play1()函数就可以被导出到连接程序, 也就是实现了无论在first.c文件中调用,还是在second.c文件中调用,连接程序都会很聪明的按照我们的意愿,把他连接到first.c文件中的play1函数的定义上去, 而不必我们在second.c文件中也要再写一个一样的play1函数.&lt;/p&gt;
&lt;p&gt;但随之有一个小问题, 在sample7中,我们并没有用extern标志符来修饰play1啊, 这里涉及到另一个问题, C语言中有默认的存储类标志符. C99中规定, 所有顶层的默认存储类标志符都是extern .&lt;/p&gt;
&lt;p&gt;那么我们如何来区分哪个头文件中的声明在其对应的.c文件中有定义,而哪个又没有呢? 这也许不是必须的，因为无论在哪个文件中定义，聪明的连接程序都会义无返顾的帮我们找到，并导出到连接程序, 但我觉得他确实必要的. &lt;/p&gt;
&lt;p&gt;因为我们需要知道这个函数的具体内容是什么,有什么功能, 有了新需求后我也许要修改他， 我需要在短时间内能找到这个函数的定义, 那么我来介绍一下在C语言中一个人为的规范:&lt;/p&gt;
&lt;p&gt;在.h文件中声明的函数,如果在其对应的.c文件中有定义,那么我们在声明这个函数时,不使用extern修饰符, 如果反之,则必须显示使用extern修饰符.&lt;/p&gt;
&lt;p&gt;这样,在C语言的.h文件中,我们会看到两种类型的函数声明. 带extern的,还不带extern的, 简单明了,一个是引用外部函数，一个是自己声明并定义的函数.
最终如下:
Sencond.h 文件&lt;/p&gt;
&lt;p&gt;Extern play1();&lt;/p&gt;
&lt;p&gt;那么多都是针对函数的，而实际上.h文件却不是为函数所专用的，还有全局变量. &lt;/p&gt;
&lt;p&gt;在大型项目中，对全局变量的使用不可避免, 比如,在first.c中需要使用一个全局变量G_test, 那么我们可以在first.h中,定义 TPYE G_test. 与对函数的使用类似, 在second.c中我们的开发人员发现他也需要使用这个全局变量, 而且要与first.c中一样的那个, 如何处理? 对,我们可以仿照函数中的处理方法, 在second.h中再次声明TPYE G_test, 根据extern的用法,以及c语言中默认的存储类型, 在两个头文件中声明的TPYE G_test,其实其存储类型都是extern, 也就是说不必我们操心, 连接程序会帮助我们处理一切. 但我们又如何区分全局变量哪个是定义声明,哪个是引用声明呢?这个比函数要复杂一些, 一般在C语言中有如下几种模型来区分:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、 初始化语句模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顶层声明中，存在初始化语句是，表示这个声明是定义声明，其他声明是引用声明。C语言的所有文件之中，只能有一个定义声明。
按照这个模型，我们可以在first.h中定义如下TPYE G_test=1；那么就确定在first中的是定义声明，在其他的所有声明都是引用声明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、 省略存储类型说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个模型中，所有引用声明要显示的包括存储类extern， 而每个外部变量的唯一定义声明中省略存储类说明符。
这个与我们对函数的处理方法类似，不再举例说明。&lt;/p&gt;
&lt;p&gt;这里还有一个需要说明，数组全局变量。&lt;/p&gt;
&lt;p&gt;在声明定义时，定义数组如下：
int G_glob[100];&lt;/p&gt;
&lt;p&gt;在另一个文件中引用声明如下：
int * G_glob;&lt;/p&gt;
&lt;p&gt;在vc中，是可以编译通过的， 这种情况大家都比较模糊并且需要注意，数组与指针类似，但并不等于说对数组的声明起变量就是指针。 上面所说的的程序在运行时发现了问题，在引用声明的那个文件中，使用这个指针时总是提示内存访问错误，原来我们的连接程序并不把指针与数组等同，连接时，也不把他们当做同一个定义，而是认为是不相关的两个定义，当然会出现错误。正确的使用方法是在引用声明中声明如下：&lt;/p&gt;
&lt;p&gt;int G_glob[10];&lt;/p&gt;
&lt;p&gt;并且最好再加上一个extern，更加明了。&lt;/p&gt;
&lt;p&gt;extern int G_glob[10];&lt;/p&gt;
&lt;p&gt;另外需要说明的是，在引用声明中由于不需要涉及到内存分配，可以简化如下，这样在需要对全局变量的长度进行修改时，不用把所有的引用声明也全部修改了。&lt;/p&gt;
&lt;p&gt;extern int G_glob[];&lt;/p&gt;
&lt;p&gt;接下来，看一下linux环境编程头文件常用的有哪些？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux常用头文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POSIX标准定义的头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| dirent.h |       目录项
| fcntl.h  |       文件控制
| fnmatch.h |   文件名匹配类型
| glob.h   |  路径名模式匹配类型
| grp.h    |     组文件
| &amp;lt;netdb.h&amp;gt;  |   网络数据库操作
| &amp;lt;pwd.h&amp;gt;    |     口令文件
| &amp;lt;regex.h&amp;gt;   |  正则表达式
| &amp;lt;tar.h&amp;gt;    |     TAR归档值
| &amp;lt;termios.h&amp;gt; |    终端I/O
| &amp;lt;unistd.h&amp;gt;  |   符号常量
| &amp;lt;utime.h&amp;gt;   |  文件时间
| &amp;lt;wordexp.h&amp;gt;  |   字符扩展类型
| &amp;lt;arpa/inet.h&amp;gt;  |   INTERNET定义
| &amp;lt;net/if.h&amp;gt;  |   套接字本地接口
| &amp;lt;netinet/in.h&amp;gt;   |  INTERNET地址族
| &amp;lt;netinet/tcp.h&amp;gt;  |   传输控制协议定义
| &amp;lt;sys/mman.h&amp;gt;  |   内存管理声明
| &amp;lt;sys/select.h&amp;gt;   |  Select函数
| &amp;lt;sys/socket.h&amp;gt; |    套接字借口
| &amp;lt;sys/stat.h&amp;gt;    | 文件状态
| &amp;lt;sys/times.h&amp;gt; |    进程时间
| &amp;lt;sys/types.h&amp;gt;   |  基本系统数据类型
| &amp;lt;sys/un.h&amp;gt; |    UNIX域套接字定义
| &amp;lt;sys/utsname.h&amp;gt;   |  系统名
| &amp;lt;sys/wait.h&amp;gt;   |  进程控制
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;POSIX定义的XSI扩展头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;cpio.h&amp;gt; |    cpio归档值 
| &amp;lt;dlfcn.h&amp;gt; |   动态链接
| &amp;lt;fmtmsg.h&amp;gt; |   消息显示结构
| &amp;lt;ftw.h&amp;gt;  |      文件树漫游
| &amp;lt;iconv.h&amp;gt; |   代码集转换使用程序
| &amp;lt;langinfo.h&amp;gt; |   语言信息常量
| &amp;lt;libgen.h&amp;gt; |   模式匹配函数定义
| &amp;lt;monetary.h&amp;gt;  |  货币类型
| &amp;lt;ndbm.h&amp;gt;  |  数据库操作
| &amp;lt;nl_types.h&amp;gt; |   消息类别
| &amp;lt;poll.h&amp;gt; |   轮询函数
| &amp;lt;search.h&amp;gt;|     搜索表
| &amp;lt;strings.h&amp;gt; |    字符串操作
| &amp;lt;syslog.h&amp;gt; |    系统出错日志记录
| &amp;lt;ucontext.h&amp;gt;  |   用户上下文
| &amp;lt;ulimit.h&amp;gt; |    用户限制
| &amp;lt;utmpx.h&amp;gt;   |  用户帐户数据库

| &amp;lt;sys/ipc.h&amp;gt; |    IPC(命名管道)
| &amp;lt;sys/msg.h&amp;gt;  |   消息队列
| &amp;lt;sys/resource.h&amp;gt;| 资源操作
| &amp;lt;sys/sem.h&amp;gt;  |   信号量
| &amp;lt;sys/shm.h&amp;gt;   |  共享存储
| &amp;lt;sys/statvfs.h&amp;gt;   |  文件系统信息
| &amp;lt;sys/time.h&amp;gt;   |  时间类型
| &amp;lt;sys/timeb.h&amp;gt;  |   附加的日期和时间定义
| &amp;lt;sys/uio.h&amp;gt;    | 矢量I/O操作
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;POSIX定义的可选头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;aio.h&amp;gt;    |     异步I/O
| &amp;lt;mqueue.h&amp;gt;  |   消息队列
| &amp;lt;pthread.h&amp;gt;   |  线程
| &amp;lt;sched.h&amp;gt;   |  执行调度
| &amp;lt;semaphore.h&amp;gt;  |   信号量
| &amp;lt;spawn.h&amp;gt;    |  实时spawn接口
| &amp;lt;stropts.h&amp;gt;  |   XSI STREAMS接口
| &amp;lt;trace.h&amp;gt;   |   事件跟踪
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;C/C++头文件一览&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;assert.h&amp;gt;|　设定插入点
| &amp;lt;ctype.h&amp;gt;　　| 字符处理
| &amp;lt;errno.h&amp;gt;　　| 定义错误码
| &amp;lt;float.h&amp;gt;　　| 浮点数处理
| &amp;lt;iso646.h&amp;gt;   | 对应各种运算符的宏
| &amp;lt;limits.h&amp;gt;　　| 定义各种数据类型最值的常量
| &amp;lt;locale.h&amp;gt;　　| 定义本地化C函数
| &amp;lt;math.h&amp;gt;　　　| 定义数学函数
| &amp;lt;setjmp.h&amp;gt; | 异常处理支持
|  &amp;lt;signal.h&amp;gt;   | 信号机制支持
|  &amp;lt;stdarg.h&amp;gt;   | 不定参数列表支持
|  &amp;lt;stddef.h&amp;gt;    | 常用常量
| &amp;lt;stdio.h&amp;gt;　　| 定义输入／输出函数
|  &amp;lt;stdlib.h&amp;gt;| 定义杂项函数及内存分配函数
|  &amp;lt;string.h&amp;gt;　　| 字符串处理
| &amp;lt;time.h&amp;gt;　　　　| 定义关于时间的函数
| &amp;lt;wchar.h&amp;gt;　　　| 宽字符处理及输入／输出
| &amp;lt;wctype.h&amp;gt;　　| 宽字符分类
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;传统C++&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;fstream.h&amp;gt;　| 改用&amp;lt;fstream&amp;gt;
| &amp;lt;iomanip.h&amp;gt;　| 改用&amp;lt;iomainip&amp;gt;
|  &amp;lt;iostream.h&amp;gt;　| 改用&amp;lt;iostream&amp;gt;
| &amp;lt;strstrea.h&amp;gt;　　| 该类不再支持，改用&amp;lt;sstream&amp;gt;中的stringstream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;标准C++&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;algorithm&amp;gt;　　　 | 通用算法
| &amp;lt;bitset&amp;gt;　　　　| 位集容器
| &amp;lt;cctype&amp;gt;         | 字符处理
|  &amp;lt;cerrno&amp;gt; 　　　　| 定义错误码
|  &amp;lt;cfloat&amp;gt;　　　| 浮点数处理
| &amp;lt;ciso646&amp;gt;        | 对应各种运算符的宏
|  &amp;lt;climits&amp;gt; 　　　| 定义各种数据类型最值的常量
|  &amp;lt;clocale&amp;gt; 　　　| 定义本地化函数
| &amp;lt;cmath&amp;gt; 　　　　| 定义数学函数
| &amp;lt;complex&amp;gt;　　　　| 复数类
| &amp;lt;csignal&amp;gt;       | 信号机制支持
|  &amp;lt;csetjmp&amp;gt;       | 异常处理支持
|  &amp;lt;cstdarg&amp;gt;       | 不定参数列表支持
|  &amp;lt;cstddef&amp;gt;       | 常用常量
| &amp;lt;cstdio&amp;gt; 　　| 定义输入／输出函数
|  &amp;lt;cstdlib&amp;gt; 　　| 定义杂项函数及内存分配函数
|  &amp;lt;cstring&amp;gt; 　| 字符串处理
| &amp;lt;ctime&amp;gt; 　　| 定义关于时间的函数
|  &amp;lt;cwchar&amp;gt; 　| 宽字符处理及输入／输出
|  &amp;lt;cwctype&amp;gt; 　　| 宽字符分类
|  &amp;lt;deque&amp;gt;　　　　　| STL 双端队列容器
|  &amp;lt;exception&amp;gt;　　　| 异常处理类
| &amp;lt;fstream&amp;gt; 　　　 | 文件输入／输出
|  &amp;lt;al&amp;gt;　　| STL 定义运算函数（代替运算符）
|  &amp;lt;limits&amp;gt; 　　　　| 定义各种数据类型最值常量
|  &amp;lt;list&amp;gt;　　　　　　| STL 线性列表容器
|  &amp;lt;locale&amp;gt;        | 本地化特定信息
|  &amp;lt;map&amp;gt;　　　　　　| STL 映射容器
|  &amp;lt;memory&amp;gt;        | STL通过分配器进行的内存分配
|  &amp;lt;new&amp;gt;           | 动态内存分配
|  &amp;lt;numeric&amp;gt;      | STL常用的数字操作
|  &amp;lt;iomanip&amp;gt; 　　| 参数化输入／输出
|  &amp;lt;iOS&amp;gt;　　　　　　 | 基本输入／输出支持
|  &amp;lt;iosfwd&amp;gt;　　　　| 输入／输出系统使用的前置声明
|  &amp;lt;iostream&amp;gt; 　　| 数据流输入／输出
|  &amp;lt;istream&amp;gt;　　　　| 基本输入流
|  &amp;lt;iterator&amp;gt;       | STL迭代器
| &amp;lt;ostream&amp;gt;　　　　 | 基本输出流
| &amp;lt;queue&amp;gt;　　　　　 | STL 队列容器
|  &amp;lt;set&amp;gt;　　　　　| STL 集合容器
| &amp;lt;sstream&amp;gt;　　　　 | 基于字符串的流
|  &amp;lt;stack&amp;gt;　　　　　| STL 堆栈容器
|  &amp;lt;stdexcept&amp;gt;　　　| 标准异常类
|  &amp;lt;streambuf&amp;gt;　　　 | /底层输入／输出支持
|  &amp;lt;string&amp;gt;　　　　| 字符串类
|  &amp;lt;typeinfo&amp;gt;      | 运行期间类型信息
|  &amp;lt;utility&amp;gt;　　　　| STL 通用模板类
|  &amp;lt;valarray&amp;gt;       | 对包含值的数组的操作
|  &amp;lt;vector&amp;gt;　　　　　| STL 动态数组容器
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;C99增加的部分&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;complex.h&amp;gt;　| 复数处理
|  &amp;lt;fenv.h&amp;gt;　　　　| 浮点环境
|  &amp;lt;inttypes.h&amp;gt;　　| 整数格式转换
|  &amp;lt;stdbool.h&amp;gt;　　 | 布尔环境
|  &amp;lt;stdint.h&amp;gt;　　　| 整型环境
|  &amp;lt;tgmath.h&amp;gt;　　　| 通用类型数学宏
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回到abort01的测试上来。先看一下执行情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abort01     0  TINFO  :  Adjusting RLIMIT_CORE to 1048576                                                                                            
abort01     1  TPASS  :  abort dumped core                                                                                                           
abort01     2  TPASS  :  abort raised SIGIOT                                                                                                         
abort01     3  TPASS  :  abort dumped core                                                                                                           
abort01     4  TPASS  :  abort raised SIGIOT                                                                                                         
abort01     5  TPASS  :  abort dumped core                                                                                                           
abort01     6  TPASS  :  abort raised SIGIOT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序后台执行片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chdir(&amp;quot;/tmp/aboeHLyFk&amp;quot;)                 = 0
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19587
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19587
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19587, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)
write(1, &amp;quot;abort01     1  TPASS  :  abort d&amp;quot;..., 43abort01     1  TPASS  :  abort dumped core
) = 43
write(1, &amp;quot;abort01     2  TPASS  :  abort r&amp;quot;..., 45abort01     2  TPASS  :  abort raised SIGIOT
) = 45
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19588
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19588
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19588, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)  
write(1, &amp;quot;abort01     3  TPASS  :  abort d&amp;quot;..., 43abort01     3  TPASS  :  abort dumped core
) = 43
write(1, &amp;quot;abort01     4  TPASS  :  abort r&amp;quot;..., 45abort01     4  TPASS  :  abort raised SIGIOT
) = 45
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19589
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19589
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19589, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)
write(1, &amp;quot;abort01     5  TPASS  :  abort d&amp;quot;..., 43abort01     5  TPASS  :  abort dumped core
) = 43
write(1, &amp;quot;abort01     6  TPASS  :  abort r&amp;quot;..., 45abort01     6  TPASS  :  abort raised SIGIOT
) = 45
unlink(&amp;quot;core&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从测试log来看，abort01主要进行abort"dumped core"、和"raised SIGIOT"两种测试，并且测试了３遍。０为setup打印信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define NUM 3 /*定义fork进程的数量*/
char *TCID;         /* tescase的名字*/
int TST_TOTAL;          /* testcases数量 */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主要函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void setup(void);
static void cleanup(void);                                                                                            
static void do_child();                                                                                               
static int instress();
int main(int argc, char *argv[])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分别分析这几个函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setup&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define MIN_RLIMIT_CORE (1024 * 1024)
static void setup(void)
{
    struct rlimit rlim;
    SAFE_GETRLIMIT(NULL, RLIMIT_CORE, &amp;amp;rlim);

    if (rlim.rlim_cur &amp;lt; MIN_RLIMIT_CORE) {
        test_resm(TINFO, &amp;quot;Adjusting RLIMIT_CORE to %i&amp;quot;, MIN_RLIMIT_CORE);
        rlim.rlim_cur = MIN_RLIMIT_CORE;
        SAFE_GETRLIMIT(NULL, RLIMIT_CORE, &amp;amp;rlim);
    }
    tst_tmpdir()
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;setup函数的目的是为了调整RLIMIT_CORE的大小。在Linux系统中，Resouce limit指在一个进程的执行过程中，它所能得到的资源的限制，比如进程的core file的最大值，虚拟内存的最大值等。Resouce limit的大小可以直接影响进程的执行状况。其有两个最重要的概念：soft limit 和 hard limit。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct rlimit {
rlim_t rlim_cur;
rlim_t rlim_max;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是指内核所能支持的资源上限。比如对于RLIMIT_NOFILE(一个进程能打开的最大文件 数，内核默认是1024)，soft limit最大也只能达到1024。对于RLIMIT_CORE(core文件的大小，内核不做限制)，soft limit最大能是unlimited。hard limit在资源中只是作为soft limit的上限。当你设置hard limit后，你以后设置的soft limit只能小于hard limit。要说明的是，hard limit只针对非特权进程，也就是进程的有效用户ID(effective user ID)不是0的进程。具有特权级别的进程(具有属性CAP_SYS_RESOURCE)，soft limit则只有内核上限。&lt;/p&gt;
&lt;p&gt;tst_tmpdir函数说明一下，该函数用来为ltp测试程序创建临时目录，目录名case名称＋随机字母。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cleanup函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void cleanup(void)
{
    unlink(&amp;quot;core&amp;quot;)
    tst_rmdir();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该函数比较简单，用来清理产生的临时文件和软连接。可以做下试验，将main函数中的该函数注释掉，会在tmp下看到产生的core文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;do_child函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void do_child(void)
{
    abort()
    fprintf(stderr, &amp;quot;\tchild - abort failed.\n&amp;quot;);
    exit(1);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;abort的调用，进程退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;instress函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static int instress(void)
{
    test_resm(TINFO,
        &amp;quot;System resources may be too low; fork(), select() etc are likely to fail.&amp;quot;);
    return 1;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;系统资源比较低的情况，　出现fork()等调用失败时的处理。也是为兼容UCLINUK测试（如嵌入式系统）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main函数&lt;/strong&gt;
控制测试流程和主要的测试代码，以下将重点介绍一些代码片段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WCOREDUMP(status)
如果孩子进程产生核心转储文件则返回真。这个宏只应该在 WIFSIGNALED 返回真时调用。这个没有在 POSIX.1-2001 里指定并且在一些 UNIX 实现(如 AIX、SunOS)里也没有提供。只在 #ifdef WCOREDUMP ... #endif 内部使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef UCLINUX&lt;/span&gt;
    &lt;span class="n"&gt;maybe_run_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;do_child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="cm"&gt;/* UCLINUX的情况　*/&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cm"&gt;/*调用setup函数*/&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="cm"&gt;/*连续创建３个进程调用do_child函数*/&lt;/span&gt;
        &lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FORK_OR_VFORK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef UCLINUX&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;instress&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fork failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
            &lt;span class="n"&gt;do_child&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;//调用do_child()函数&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;  
                &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;instress&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TBROK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TERRNO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;fork failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TBROK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;wrong # children waited on; got %d, expected 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
        &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WCOREDUMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//WCOFEDUMP情况&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WTERMSIG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIFEXITED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WEXITSTATUS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TFAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Child did not dump core; exit code = %d, &amp;quot;&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;signal = %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_resm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TPASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abort dumped core&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;//core值等于０，则没有正常产生core文件，如果core不等于０且不等于-1，说明正常产生了core文件&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIGIOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_resm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TPASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abort raised SIGIOT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;//发出的信号如果为SIGIOT说明信号触发正常&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TFAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Child did not raise SIGIOT (%d); exit code = %d, &amp;quot;&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;signal = %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGIOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;abort测试分析结束。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 02 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-02:2016/08/02/LTP/</guid><category>LTP</category></item><item><title>LTP－kernel-syscalls</title><link>http://king32783784.github.io/2016/08/01/LTP/</link><description>&lt;h4&gt;syscalls&lt;/h4&gt;
&lt;p&gt;ltp中kernel测试比重很大，尤其是syscalls，包括一下用例：
注：测试内容分析时补充。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用例名称&lt;/th&gt;
&lt;th&gt;测试内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abort&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;accept&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;accept4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;access&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;acct&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;add_key&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adjtimex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alarm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asyncio&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdflush&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bind&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;brk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cacheflush&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capget&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chroot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_getres&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_nanosleep&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_nanosleep2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clone&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;close&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cma&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;confstr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;connect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_create1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_ctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_pwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_wait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventfd2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execle&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execlp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execve&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execvp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exit_group&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;faccessat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fadvise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fallocate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fanotify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchmod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchmodat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchownat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fcntl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fdatasync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fmtmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fork&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fpathconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstatat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstatfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fsync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ftruncate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;futex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;futimesat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcontext&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcpu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcwd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdents&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdomainname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdtablesize&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getegid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;geteuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getgroups&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostbyname_r&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getitimer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get_mempolicy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpagesize&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpeername&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpgrp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getppid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpriority&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrandom&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getresgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getresuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrlimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get_robust_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrusage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsockname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsockopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gettid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gettimeofday&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inotify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inotify_init&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_cancel&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ioctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_destroy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_getevents&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ioperm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iopl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_setup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_submit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kcmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lchown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lgetxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;listen&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;llistxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;llseek&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lseek&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lstat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;madvise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Makefile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mallopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mbind&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memcmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memcpy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;migrate_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mincore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdirat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mknod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mknodat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mlock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mlockall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modify_ldt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mount&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mprotect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_notify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_timedreceive&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_timedsend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_unlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mremap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munlock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munlockall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nanosleep&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;newuname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nftw&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pathconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pause&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf_event_open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;personality&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipe&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipe2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;poll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ppoll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pread&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preadv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;profil&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pselect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ptrace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwrite&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwritev&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quotactl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readahead&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reboot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recvfrom&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recvmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remap_file_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removexattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rename&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;renameat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;renameat2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request_key&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigaction&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigprocmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigqueueinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigsuspend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigtimedwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sbrk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getaffinity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getparam&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_get_priority_max&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_get_priority_min&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getscheduler&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_rr_get_interval&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setaffinity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setparam&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setscheduler&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_yield&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;send&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendfile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendto&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setdomainname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setegid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setfsgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setfsuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setgroups&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sethostname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setitimer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setns&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpgrp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpriority&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setregid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setresgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setresuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setreuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setrlimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_robust_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setsid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setsockopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_thread_area&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_tid_address&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;settimeofday&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sgetmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigaction&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigaltstack&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sighold&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signal&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signalfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signalfd4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigpending&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigprocmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigrelse&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigsuspend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigtimedwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigwaitinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socketcall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socketpair&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sockioctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;splice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssetmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statvfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swapoff&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swapon&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync_file_range&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syscall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syslog&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tee&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timerfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timer_getoverrun&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timer_gettime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;times&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tkill&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;truncate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ulimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umount&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umount2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unshare&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ustat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utils&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utimensat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utimes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vfork&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vhangup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vmsplice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wait4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;waitid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;waitpid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;writev&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来按照顺序分析系统调用的每一个case,并将每个case的测试内容补充到本文。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/LK0U4TNURZ.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;p&gt;附linux系统主要系统调用列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、进程控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fork    创建一个新进程&lt;/p&gt;
&lt;p&gt;clone   按指定条件创建子进程&lt;/p&gt;
&lt;p&gt;execve  运行可执行文件&lt;/p&gt;
&lt;p&gt;exit    中止进程&lt;/p&gt;
&lt;p&gt;_exit   立即中止当前进程&lt;/p&gt;
&lt;p&gt;getdtablesize   进程所能打开的最大文件数&lt;/p&gt;
&lt;p&gt;getpgid 获取指定进程组标识号&lt;/p&gt;
&lt;p&gt;setpgid 设置指定进程组标志号&lt;/p&gt;
&lt;p&gt;getpgrp 获取当前进程组标识号&lt;/p&gt;
&lt;p&gt;setpgrp 设置当前进程组标志号&lt;/p&gt;
&lt;p&gt;getpid  获取进程标识号&lt;/p&gt;
&lt;p&gt;getppid 获取父进程标识号&lt;/p&gt;
&lt;p&gt;getpriority 获取调度优先级&lt;/p&gt;
&lt;p&gt;setpriority 设置调度优先级&lt;/p&gt;
&lt;p&gt;modify_ldt  读写进程的本地描述表&lt;/p&gt;
&lt;p&gt;nanosleep   使进程睡眠指定的时间&lt;/p&gt;
&lt;p&gt;nice    改变分时进程的优先级&lt;/p&gt;
&lt;p&gt;pause   挂起进程，等待信号&lt;/p&gt;
&lt;p&gt;personality 设置进程运行域&lt;/p&gt;
&lt;p&gt;prctl   对进程进行特定操作&lt;/p&gt;
&lt;p&gt;ptrace  进程跟踪&lt;/p&gt;
&lt;p&gt;sched_get_priority_max  取得静态优先级的上限&lt;/p&gt;
&lt;p&gt;sched_get_priority_min  取得静态优先级的下限&lt;/p&gt;
&lt;p&gt;sched_getparam  取得进程的调度参数&lt;/p&gt;
&lt;p&gt;sched_getscheduler  取得指定进程的调度策略&lt;/p&gt;
&lt;p&gt;sched_rr_get_interval   取得按RR算法调度的实时进程的时间片长度&lt;/p&gt;
&lt;p&gt;sched_setparam  设置进程的调度参数&lt;/p&gt;
&lt;p&gt;sched_setscheduler  设置指定进程的调度策略和参数&lt;/p&gt;
&lt;p&gt;sched_yield 进程主动让出处理器,并将自己等候调度队列队尾&lt;/p&gt;
&lt;p&gt;vfork   创建一个子进程，以供执行新程序，常与execve等同时使用&lt;/p&gt;
&lt;p&gt;wait    等待子进程终止&lt;/p&gt;
&lt;p&gt;wait3   参见wait&lt;/p&gt;
&lt;p&gt;waitpid 等待指定子进程终止&lt;/p&gt;
&lt;p&gt;wait4   参见waitpid&lt;/p&gt;
&lt;p&gt;capget  获取进程权限&lt;/p&gt;
&lt;p&gt;capset  设置进程权限&lt;/p&gt;
&lt;p&gt;getsid  获取会晤标识号&lt;/p&gt;
&lt;p&gt;setsid  设置会晤标识号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、文件系统控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、文件读写操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fcntl   文件控制&lt;/p&gt;
&lt;p&gt;open    打开文件&lt;/p&gt;
&lt;p&gt;creat   创建新文件&lt;/p&gt;
&lt;p&gt;close   关闭文件描述字&lt;/p&gt;
&lt;p&gt;read    读文件&lt;/p&gt;
&lt;p&gt;write   写文件&lt;/p&gt;
&lt;p&gt;readv   从文件读入数据到缓冲数组中&lt;/p&gt;
&lt;p&gt;writev  将缓冲数组里的数据写入文件&lt;/p&gt;
&lt;p&gt;pread   对文件随机读&lt;/p&gt;
&lt;p&gt;pwrite  对文件随机写&lt;/p&gt;
&lt;p&gt;lseek   移动文件指针&lt;/p&gt;
&lt;p&gt;_llseek 在64位地址空间里移动文件指针&lt;/p&gt;
&lt;p&gt;dup 复制已打开的文件描述字&lt;/p&gt;
&lt;p&gt;dup2    按指定条件复制文件描述字&lt;/p&gt;
&lt;p&gt;flock   文件加/解锁&lt;/p&gt;
&lt;p&gt;poll    I/O多路转换&lt;/p&gt;
&lt;p&gt;truncate    截断文件&lt;/p&gt;
&lt;p&gt;ftruncate   参见truncate&lt;/p&gt;
&lt;p&gt;umask   设置文件权限掩码&lt;/p&gt;
&lt;p&gt;fsync   把文件在内存中的部分写回磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、文件系统操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;access  确定文件的可存取性&lt;/p&gt;
&lt;p&gt;chdir   改变当前工作目录&lt;/p&gt;
&lt;p&gt;fchdir  参见chdir&lt;/p&gt;
&lt;p&gt;chmod   改变文件方式&lt;/p&gt;
&lt;p&gt;fchmod  参见chmod&lt;/p&gt;
&lt;p&gt;chown   改变文件的属主或用户组&lt;/p&gt;
&lt;p&gt;fchown  参见chown&lt;/p&gt;
&lt;p&gt;lchown  参见chown&lt;/p&gt;
&lt;p&gt;chroot  改变根目录&lt;/p&gt;
&lt;p&gt;stat    取文件状态信息&lt;/p&gt;
&lt;p&gt;lstat   参见stat&lt;/p&gt;
&lt;p&gt;fstat   参见stat&lt;/p&gt;
&lt;p&gt;statfs  取文件系统信息&lt;/p&gt;
&lt;p&gt;fstatfs 参见statfs&lt;/p&gt;
&lt;p&gt;readdir 读取目录项&lt;/p&gt;
&lt;p&gt;getdents    读取目录项&lt;/p&gt;
&lt;p&gt;mkdir   创建目录&lt;/p&gt;
&lt;p&gt;mknod   创建索引节点&lt;/p&gt;
&lt;p&gt;rmdir   删除目录&lt;/p&gt;
&lt;p&gt;rename  文件改名&lt;/p&gt;
&lt;p&gt;link    创建链接&lt;/p&gt;
&lt;p&gt;symlink 创建符号链接&lt;/p&gt;
&lt;p&gt;unlink  删除链接&lt;/p&gt;
&lt;p&gt;readlink    读符号链接的值&lt;/p&gt;
&lt;p&gt;mount   安装文件系统&lt;/p&gt;
&lt;p&gt;umount  卸下文件系统&lt;/p&gt;
&lt;p&gt;ustat   取文件系统信息&lt;/p&gt;
&lt;p&gt;utime   改变文件的访问修改时间&lt;/p&gt;
&lt;p&gt;utimes  参见utime&lt;/p&gt;
&lt;p&gt;quotactl    控制磁盘配额&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、系统控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ioctl   I/O总控制函数&lt;/p&gt;
&lt;p&gt;_sysctl 读/写系统参数&lt;/p&gt;
&lt;p&gt;acct    启用或禁止进程记账&lt;/p&gt;
&lt;p&gt;getrlimit   获取系统资源上限&lt;/p&gt;
&lt;p&gt;setrlimit   设置系统资源上限&lt;/p&gt;
&lt;p&gt;getrusage   获取系统资源使用情况&lt;/p&gt;
&lt;p&gt;uselib  选择要使用的二进制函数库&lt;/p&gt;
&lt;p&gt;ioperm  设置端口I/O权限&lt;/p&gt;
&lt;p&gt;iopl    改变进程I/O权限级别&lt;/p&gt;
&lt;p&gt;outb    低级端口操作&lt;/p&gt;
&lt;p&gt;reboot  重新启动&lt;/p&gt;
&lt;p&gt;swapon  打开交换文件和设备&lt;/p&gt;
&lt;p&gt;swapoff 关闭交换文件和设备&lt;/p&gt;
&lt;p&gt;bdflush 控制bdflush守护进程&lt;/p&gt;
&lt;p&gt;sysfs   取核心支持的文件系统类型&lt;/p&gt;
&lt;p&gt;sysinfo 取得系统信息&lt;/p&gt;
&lt;p&gt;adjtimex    调整系统时钟&lt;/p&gt;
&lt;p&gt;alarm   设置进程的闹钟&lt;/p&gt;
&lt;p&gt;getitimer   获取计时器值&lt;/p&gt;
&lt;p&gt;setitimer   设置计时器值&lt;/p&gt;
&lt;p&gt;gettimeofday    取时间和时区&lt;/p&gt;
&lt;p&gt;settimeofday    设置时间和时区&lt;/p&gt;
&lt;p&gt;stime   设置系统日期和时间&lt;/p&gt;
&lt;p&gt;time    取得系统时间&lt;/p&gt;
&lt;p&gt;times   取进程运行时间&lt;/p&gt;
&lt;p&gt;uname   获取当前UNIX系统的名称、版本和主机等信息&lt;/p&gt;
&lt;p&gt;vhangup 挂起当前终端&lt;/p&gt;
&lt;p&gt;nfsservctl  对NFS守护进程进行控制&lt;/p&gt;
&lt;p&gt;vm86    进入模拟8086模式&lt;/p&gt;
&lt;p&gt;create_module   创建可装载的模块项&lt;/p&gt;
&lt;p&gt;delete_module   删除可装载的模块项&lt;/p&gt;
&lt;p&gt;init_module 初始化模块&lt;/p&gt;
&lt;p&gt;query_module    查询模块信息&lt;/p&gt;
&lt;p&gt;*get_kernel_syms    取得核心符号,已被query_module代替&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;brk 改变数据段空间的分配&lt;/p&gt;
&lt;p&gt;sbrk    参见brk&lt;/p&gt;
&lt;p&gt;mlock   内存页面加锁&lt;/p&gt;
&lt;p&gt;munlock 内存页面解锁&lt;/p&gt;
&lt;p&gt;mlockall    调用进程所有内存页面加锁&lt;/p&gt;
&lt;p&gt;munlockall  调用进程所有内存页面解锁&lt;/p&gt;
&lt;p&gt;mmap    映射虚拟内存页&lt;/p&gt;
&lt;p&gt;munmap  去除内存页映射&lt;/p&gt;
&lt;p&gt;mremap  重新映射虚拟内存地址&lt;/p&gt;
&lt;p&gt;msync   将映射内存中的数据写回磁盘&lt;/p&gt;
&lt;p&gt;mprotect    设置内存映像保护&lt;/p&gt;
&lt;p&gt;getpagesize 获取页面大小&lt;/p&gt;
&lt;p&gt;sync    将内存缓冲区数据写回硬盘&lt;/p&gt;
&lt;p&gt;cacheflush  将指定缓冲区中的内容写回磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、网络管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;getdomainname   取域名&lt;/p&gt;
&lt;p&gt;setdomainname   设置域名&lt;/p&gt;
&lt;p&gt;gethostid   获取主机标识号&lt;/p&gt;
&lt;p&gt;sethostid   设置主机标识号&lt;/p&gt;
&lt;p&gt;gethostname 获取本主机名称&lt;/p&gt;
&lt;p&gt;sethostname 设置主机名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、socket控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;socketcall  socket系统调用&lt;/p&gt;
&lt;p&gt;socket  建立socket&lt;/p&gt;
&lt;p&gt;bind    绑定socket到端口&lt;/p&gt;
&lt;p&gt;connect 连接远程主机&lt;/p&gt;
&lt;p&gt;accept  响应socket连接请求&lt;/p&gt;
&lt;p&gt;send    通过socket发送信息&lt;/p&gt;
&lt;p&gt;sendto  发送UDP信息&lt;/p&gt;
&lt;p&gt;sendmsg 参见send&lt;/p&gt;
&lt;p&gt;recv    通过socket接收信息&lt;/p&gt;
&lt;p&gt;recvfrom    接收UDP信息&lt;/p&gt;
&lt;p&gt;recvmsg 参见recv&lt;/p&gt;
&lt;p&gt;listen  监听socket端口&lt;/p&gt;
&lt;p&gt;select  对多路同步I/O进行轮询&lt;/p&gt;
&lt;p&gt;shutdown    关闭socket上的连接&lt;/p&gt;
&lt;p&gt;getsockname 取得本地socket名字&lt;/p&gt;
&lt;p&gt;getpeername 获取通信对方的socket名字&lt;/p&gt;
&lt;p&gt;getsockopt  取端口设置&lt;/p&gt;
&lt;p&gt;setsockopt  设置端口参数&lt;/p&gt;
&lt;p&gt;sendfile    在文件或端口间传输数据&lt;/p&gt;
&lt;p&gt;socketpair  创建一对已联接的无名socket&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;七、用户管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;getuid  获取用户标识号&lt;/p&gt;
&lt;p&gt;setuid  设置用户标志号&lt;/p&gt;
&lt;p&gt;getgid  获取组标识号&lt;/p&gt;
&lt;p&gt;setgid  设置组标志号&lt;/p&gt;
&lt;p&gt;getegid 获取有效组标识号&lt;/p&gt;
&lt;p&gt;setegid 设置有效组标识号&lt;/p&gt;
&lt;p&gt;geteuid 获取有效用户标识号&lt;/p&gt;
&lt;p&gt;seteuid 设置有效用户标识号&lt;/p&gt;
&lt;p&gt;setregid    分别设置真实和有效的的组标识号&lt;/p&gt;
&lt;p&gt;setreuid    分别设置真实和有效的用户标识号&lt;/p&gt;
&lt;p&gt;getresgid   分别获取真实的,有效的和保存过的组标识号&lt;/p&gt;
&lt;p&gt;setresgid   分别设置真实的,有效的和保存过的组标识号&lt;/p&gt;
&lt;p&gt;getresuid   分别获取真实的,有效的和保存过的用户标识号&lt;/p&gt;
&lt;p&gt;setresuid   分别设置真实的,有效的和保存过的用户标识号&lt;/p&gt;
&lt;p&gt;setfsgid    设置文件系统检查时使用的组标识号&lt;/p&gt;
&lt;p&gt;setfsuid    设置文件系统检查时使用的用户标识号&lt;/p&gt;
&lt;p&gt;getgroups   获取后补组标志清单&lt;/p&gt;
&lt;p&gt;setgroups   设置后补组标志清单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;八、进程间通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ipc 进程间通信总控制调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、信号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sigaction   设置对指定信号的处理方法&lt;/p&gt;
&lt;p&gt;sigprocmask 根据参数对信号集中的信号执行阻塞/解除阻塞等操作&lt;/p&gt;
&lt;p&gt;sigpending  为指定的被阻塞信号设置队列&lt;/p&gt;
&lt;p&gt;sigsuspend  挂起进程等待特定信号&lt;/p&gt;
&lt;p&gt;signal  参见signal&lt;/p&gt;
&lt;p&gt;kill    向进程或进程组发信号&lt;/p&gt;
&lt;p&gt;*sigblock   向被阻塞信号掩码中添加信号,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*siggetmask 取得现有阻塞信号掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigsetmask 用给定信号掩码替换现有阻塞信号掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigmask    将给定的信号转化为掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigpause   作用同sigsuspend,已被sigsuspend代替&lt;/p&gt;
&lt;p&gt;sigvec  为兼容BSD而设的信号处理函数,作用类似sigaction&lt;/p&gt;
&lt;p&gt;ssetmask    ANSI C的信号处理函数,作用类似sigaction&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;msgctl  消息控制操作&lt;/p&gt;
&lt;p&gt;msgget  获取消息队列&lt;/p&gt;
&lt;p&gt;msgsnd  发消息&lt;/p&gt;
&lt;p&gt;msgrcv  取消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、管道&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pipe    创建管道&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、信号量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;semctl  信号量控制&lt;/p&gt;
&lt;p&gt;semget  获取一组信号量&lt;/p&gt;
&lt;p&gt;semop   信号量操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、共享内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;shmctl  控制共享内存&lt;/p&gt;
&lt;p&gt;shmget  获取共享内存&lt;/p&gt;
&lt;p&gt;shmat   连接共享内存&lt;/p&gt;
&lt;p&gt;shmdt   拆卸共享内存&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-01:2016/08/01/LTP/</guid><category>LTP</category></item><item><title>LTP－Command-file</title><link>http://king32783784.github.io/2016/06/03/LTP/</link><description>&lt;h4&gt;file&lt;/h4&gt;
&lt;p&gt;file　用例主要用于测试file命令。&lt;/p&gt;
&lt;h5&gt;file命令介绍&lt;/h5&gt;
&lt;p&gt;file命令可以通过查看文件内容来找出特定类型的文件，在UNIX/ Linux系统中，文件类型并不是由文件扩展名来决定的(windows中却正是这么做的),file命令的目的是从多个文件中收集文件类型统计信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file --help

Usage: file [OPTION...] [FILE...]
Determine type of FILEs.

  --help                 display this help and exit
-v, --version              output version information and exit
-m, --magic-file LIST      use LIST as a colon-separated list of magic
                           number files
-z, --uncompress           try to look inside compressed files
-Z, --uncompress-noreport  only print the contents of compressed files
-b, --brief                do not prepend filenames to output lines
-c, --checking-printout    print the parsed form of the magic file, use in
                           conjunction with -m to debug a new magic file
                           before installing it
-e, --exclude TEST         exclude TEST from the list of test to be
                           performed for file. Valid tests are:
                           apptype, ascii, cdf, compress, elf, encoding,
                           soft, tar, text, tokens
-f, --files-from FILE      read the filenames to be examined from FILE
-F, --separator STRING     use string as separator instead of `:&amp;#39;
-i, --mime                 output MIME type strings (--mime-type and
                           --mime-encoding)
  --apple                output the Apple CREATOR/TYPE
  --extension            output a slash-separated list of extnsions
  --mime-type            output the MIME type
  --mime-encoding        output the MIME encoding
-k, --keep-going           don&amp;#39;t stop at the first match
-l, --list                 list magic strength
-L, --dereference          follow symlinks (default)
-h, --no-dereference       don&amp;#39;t follow symlinks
-n, --no-buffer            do not buffer output
-N, --no-pad               do not pad output
-0, --print0               terminate filenames with ASCII NUL
-p, --preserve-date        preserve access times on files
-P, --parameter            set file engine parameter limits
                           indir        15 recursion limit for indirection
                           name         30 use limit for name/use magic
                           elf_notes   256 max ELF notes processed
                           elf_phnum   128 max ELF prog sections processed
                           elf_shnum 32768 max ELF sections processed
-r, --raw                  don&amp;#39;t translate unprintable chars to \ooo
-s, --special-files        treat special (block/char devices) files as
                         ordinary ones
-C, --compile              compile file specified by -m
-d, --debug                print debugging messages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必要参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-b 文件名不显示
-c 显示详细处理信息
-L 操作对象为符号链接所指向的对象
-z 压缩文件的处理
-C 列出magic.mgc的输出
-n 将结果输出到标准输出
-f&amp;lt;文件名&amp;gt; 指定文件名
-m&amp;lt;文件名&amp;gt; 指定魔法数字名
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选择参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--help 显示帮助信息
 -v 显示版本信息
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;1.查看所有文件类型 file *
2.2.查看具体某一文件的类型：file filename
3.-b参数，打印出不包含文件名的文件类型信息:
4.-z 参数，可以获取用gzip、zip压缩过的文件的类型
5.-n参数，将信息标准输出&lt;/p&gt;
&lt;p&gt;言归正传，file_test.sh 脚本主要验证是否支持多种文件格式，比如tar tar.gz rpm c ascii elf等。&lt;/p&gt;
&lt;h5&gt;用例设置：&lt;/h5&gt;
&lt;p&gt;Test01：测试文件命令是否识别ASCII文本文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入已知文件
2）使用&amp;#39;file&amp;#39;命令获取已知文件的类型
例如：文件xyz.txt
3）grep为关键字“ASCII文本”的输出
&amp;#39;file&amp;#39;命令
4）如果上述步骤成功，则将测试声明为PASS,否则为fail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test02：测试文件命令是否能识别bash shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将一个小shell脚本写入一个已知文件
2）使用&amp;#39;file&amp;#39;命令获取已知文件的类型
例如：文件xyz.sh
3）从&amp;#39;file&amp;#39;命令的输出中Grep关键字“Bourne-Again shell脚本”

4）如果上述步骤成功，则将测试声明为PASS,否则为fail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test03：测试文件命令是否能识别bash shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用Korn shell脚本执行类似的测试（如Test02）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test04：测试文件命令是否可以识别C shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用C shell脚本执行类似的测试（如Test02）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test05：测试文件命令是否可以识别C程序文本
     使用test2类似方法测试c程序文本&lt;/p&gt;
&lt;p&gt;Test06：测试文件命令是否可以识别ELF二进制可执行文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）使用readelf确定主机是大端还是小端,并分别为字符串“MSB”或“LSB”分配TEST_ARCH
2）将小C程序写入已知的“.c”文件
3）使用“cc” Ex：cc xyz xyz.c
4）使用file命令获取对象文件的类型
5）在file输出中，grep ELF .*-bit $TEST_ARCH executable, .* 字符。
6）如果上述命令成功，则将测试声明为PASS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test07：测试文件命令是否可以识别tar文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入三个不同的文件
 2）使用“tar”命令存档文件
例如：tar -cf ...
3）使用“file”命令获取归档文件的类型
例如：文件xyz.tar
4）grep从上面的&amp;#39;file&amp;#39;命令的输出的中匹配字符串“tar”
5）声明测试为PASS，如果上面的步骤成功，否则声明测试为FAIL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test08：测试文件命令是否可以tar zip文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入三个不同的文件
2）使用“tar”命令存档文件
  例如：tar -cf ...
3）使用&amp;#39;gzip&amp;#39;命令来压缩tar文件
 例如：gzip -f xyz.tar
4）使用“file”命令获取归档文件的类型
   例如：文件xyz.tar.gz
5）grep从上面的文件commnand字符串“gzip压缩数据，。*”
6）声明测试为PASS，如果上面的步骤成功，否则声明测试为FAIL
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;代码片段&lt;/h5&gt;
&lt;p&gt;测试file命令能识别出ASCII文本文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export TCID=file01
export TST_COUNT=1

$LTPBIN/tst_resm TINFO &amp;quot;TEST #1:file command recogizes ASCII text files&amp;quot; # log信息

cat &amp;gt; $LTPTMP/test_file.txt &amp;lt;&amp;lt;EOF
this is a text file
to test file command
EOF                          # 制作txt文本文件

##执行file命令并检查输出。

file $LTPTMP/test_file.txt &amp;gt; $LTPTMP/file.out 2&amp;gt;&amp;amp;1

if [ $? -eq 0 ]  # 判断返回值是否为０，验证file命令执行是否成功
then
    grep -q &amp;quot;ASCII text&amp;quot; $LTPTMP/file.out # 匹配输出类型是否整齐
    if [ $? -eq 0 ]
    then
        $LTPBIN/test_resm TPASS &amp;quot;file: Recognised ASCII file correctly&amp;quot;
        rm -f $LTPTMP/test_file.txt
    else
        $LTPBIN/tst_res TFAIL $LTPTMP/file.out \
            &amp;quot;file: Failed to recognise ASCII file correctlyi. Reason:&amp;quot;
        TFAILCNT=$(( $TFAILCNT+1 )) #error code＋１
    fi
else
     $LTPBIN/tst_res TFAIL $LTPTMP/file.out  \
            &amp;quot;file: failed to recognize ASCII file correctly\t\t&amp;quot;
     TFAILCNT=$(( $TFAILCNT+1 ))
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;TEST #2&lt;/h1&gt;
&lt;h1&gt;测试是否识别shell脚本&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export TCID=file02
export TST_COUNT=2

$LTPBIN/tst_resm TINFO &amp;quot;TEST #2: file command recognizes bash shell scripts&amp;quot;

cat &amp;gt; $LTPTMP/bash_script.sh &amp;lt;&amp;lt;EOF
#! /bin/bash

echo &amp;quot;this is a shell script&amp;quot;
echo &amp;quot;used to test file command&amp;quot;

EOF

file $LTPTMP/bash_script.sh &amp;gt; $LTPTMP/file.out 2&amp;gt;&amp;amp;1

if [ $? -eq 0 ]
then
    grep -q &amp;quot;Bourne-Again shell script&amp;quot; $LTPTMP/file.out
    if [ $? -eq 0 ]
    then
        $LTPBIN/tst_resm TPASS &amp;quot;file: Recognised bash shell script correctly&amp;quot;
        rm -f $LTPTMP/bash_script.sh
    else
        $LTPBIN/tst_res TFAIL $LTPTMP/file.out \
            &amp;quot;file: Failed to recognise bash shell script. Reason&amp;quot;
        TFAILCNT=$(( $TFAILCNT+1 ))
    fi
else
    $LTPBIN/tst_resm TFAIL &amp;quot;file: Failed to recognize bash shell script&amp;quot;
    TFAILCNT=$(( $TFAILCNT+1 ))
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他测试代码同上面类似，不再一一分析。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 03 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-03:2016/06/03/LTP/</guid><category>LTP</category></item><item><title>LTP－Command</title><link>http://king32783784.github.io/2016/06/02/LTP/</link><description>&lt;p&gt;本节将重点分析commands部分的用例。&lt;/p&gt;
&lt;h4&gt;Command主要用例&lt;/h4&gt;
&lt;p&gt;主要case包括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ade&lt;/td&gt;
&lt;td&gt;ar file ld ldd nm objdump size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fileutils&lt;/td&gt;
&lt;td&gt;cp ln mkdir mv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tpm-tools&lt;/td&gt;
&lt;td&gt;tmp tpmtoken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;ade&lt;/h4&gt;
&lt;p&gt;ade包括对ar、file、ld、ldd、nm、objdump、size命令的验证测试。&lt;/p&gt;
&lt;h5&gt;ar&lt;/h5&gt;
&lt;p&gt;ar命令是Linux的一个备份压缩命令，可以创建、修改备存文件(archive)，或从备存文件中抽取成员文件。备存文件以一定的结构打包一个至多个其它文件（即成员文件），且成员文件的内容、模式、时间戳等信息将被保存在备存文件中。常见的应用是，使用ar命令将多个目标文件（&lt;em&gt;.o）打包为静态链接库文件（&lt;/em&gt;.a)。&lt;/p&gt;
&lt;p&gt;引出一个问题，库是什么？本质上讲库是一种可执行代码的二进制形式，可以被操作系统加载到内存执行。linux库分为两种：静态库和动态库。区别在于，静态库是在编译过程中已经被载入可执行程序，可执行程序一般较大；共享库（动态库）是可执行程序运行时才加载到内存，编译时仅简单的引用，因此可执行程序较小。库是如何产生的呢？静态库的后缀是.a，它的产生分为两步：１．由源码编译生成一堆.o，每个.o包含这个编译单元的符号表；２．ar命令将很多.o文件打包转换为.a,形成静态库。&lt;/p&gt;
&lt;p&gt;ar命令的常用参数&lt;/p&gt;
&lt;p&gt;在 ar 命令中，可以从集 cClosTv 中指定任何数量的可选标志。必须从标志集 dhmopqrstwx 中指定一个标志。如果选择-m 或 -r 标志，您可能还要指定一个位置标志（-a 、-b 或-i ）；对于 -a 、-b 或-i 标志，您必须还指定在 ArchiveFile （PositionName ）中一个文件的名称，此名称紧跟在标志列表后，并由空格隔开。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a PositionName 在 PositionName 参数标识的现有文件后安置指定的文件。
-b PositionName 在 PositionName 参数标识的现有文件前安置指定的文件。
-c  禁止在创建库 时产生的正常消息。 
-C  阻止解压缩的文件替换文件系统中同名的文件。
-d  从库中删除指定的文件。
-g  对压缩文档成员进行排序以确保用最小数量的未用空间获得最大的加载效率。在几乎所有情况下，-g 标志以压缩文档成员的逻辑链接顺序物理地安置它们。最终生成的压缩文档通常写成小格式，这样该标志可用来将大格式压缩文档转换成小格式压缩文档。包含 64 位XCOFF 对象的压缩文档不能创建成或转换至小格式。
-h  将指定的文件的成员报头中的修改时间设置为当前日期和时间。如果不指定任何文件名称，则 ar 命令设置所有成员报头的时间戳记。此标志不能和-z 标志一起使用。
-i PositionName 在 PositionName 参数标识的现有文件前安置指定的文件（和 -b 相同）。
-l  将临时文件置于当前（本地）目录中，而非 TMPDIR 目录中（缺省为 /tmp ）。
-m  将指定的文件移动到库中的某个其它位置。缺省情况下，它将指定的文件移动到库的末尾。使用位置标志（abi ）来指定某个其它位置。
-o  对压缩文档成员进行排序以确保用最小数量的未用空间获得最大的加载效率。在几乎所有情况下，-o 标志以压缩文档成员的逻辑链接顺序物理地安置它们。最终生成的压缩文档通常写成大格式，这样该标志可用来将小格式压缩文档转换成大格式压缩文档。
-p  将 Files 参数中指定的文件的内容或在 ArchiveFile 参数中指定的所有文件（如果您不指定任何文件）都写至标准输出。
-q  将指定的文件添加到库的末尾。另外，如果指定同一个文件两次，它可能被放入库中两次。
-r  如果指定的文件已经存在于库中，则替换它。因为指定的文件在库中占据它们替换的文件的同一个位置，位置标志没有任何附加的影响。当和 -u 标志（更新）一起使用时，-r 标志仅替换自从最后一次添加到库中以后修改的文件。
如果指定的文件不存在于库中，则 ar 命令添加它。在这种情况下，位置标志影响放置。如果不指定位置，则将新文件置于库的末尾。如果指定同一个文件两次，它可能被放入库中两次。

-s  无论 ar 命令是否修改了库内容都强制重新生成库符号表。请在库上使用 strip 命令之后，使用此标志来恢复库符号表。
-t  将库的目录写至标准输出。如果指定文件名称，则仅显示指定的那些文件。如果不指定任何文件，-t 标志列出库中的所有文件。
-T  如果压缩文档成员名称比文件系统支持的长，则允许文件名称截短。此选项无效，因为文件系统支持的名称长度等于 255 个字符的最大压缩文档成员名称。
-u  仅复制自它们最后一次复制起更改的文件（请参阅先前讨论过的 -r 标志）。
-v  将建立新库的详细的逐个文件的描述写至标准输出。当和 -t 标志一起使用时，它给出类似于 ls -l 命令给出的长列表。当和 -x 标志一起使用时，它在每个文件前加一个名称。当和 -h 标志一起使用，它列出成员名称和更新的修改时间。
-w  显示压缩文档符号表。每个符号和其中定义此符号的文件的名称一起列出。
-x  通过将指定的文件复制到当前目录来解压缩它们。这些副本和原始文件（保留在库中）具有相同的名称。如果不指定任何文件，-x 标志复制库中的所有文件。此过程不会更改库。
-Xmode  指定 ar 应检查的目标文件的类型。mode 必须是以下项之一：
32
仅处理 32 位目标文件
64
仅处理 64 位目标文件
32_64
处理 32 位 和 64 位目标文件
缺省值是处理 32 位目标文件（忽略 64 位对象）。mode 还可以用 OBJECT_MODE 环境变量来设置。例如，OBJECT_MODE=64 使 ar 处理任何 64 位对象并忽略 32 位对象。-X 标志覆盖 OBJECT_MODE 变量。
-z  创建压缩文档的临时副本并对副本执行所有要求的修改。当所有操作成功完成时，压缩文档的工作副本覆盖原始副本。此标志不能和 -h 标志一起使用。
ArchiveFile 指定压缩文档文件名称；必需。
MemberName ...  各压缩文档成员的名称。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例１．ar rcs libxxxx.a xx1.o xx2.o&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;参数r:　在库中插入模块（替换）。当插入的模块名已经在库中存在，则替换同名的模块。如果若干模块中有一个模块在库中不存在，ar显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，可以使用其他任选项来改变增加的位置。

参数c:　创建一个库。不管库是否存在，都将创建。

参数s:　创建目标文件索引　这在创建较大的库时能加快时间。（补充：如果不需要创建索引，可改成大写S参数；如果。a文件缺少索引，可以使用ranlib命令添加）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例２．创建一个库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -q lib.a strlen.o strcpy.o

如果 lib.a 库不存在，则此命令创建它，并将文件 strlen.o 和 strcpy.o 的副本输入其中。如果 lib.a 库存在，则此命令在不检查相同成员的情况下，将新的成员添加到末尾。v 标志设置详细方式，在此方式中ar 命令在其进行时显示进程报告。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例３．显示库的目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -t lib.a

此命令列出了 lib.a 库的目录，显示类似于 ls -l 命令的输出的长列表。要只列出成员文件名称，则省略-v 标志。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例4. 替换或添加新成员到库中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r lib.a strlen.o strcat.o

此命令替换成员 strlen.o 和 strcat.o 。如果 lib.a 如示例 1 中显示的那样创建，则替换strlen.o 成员。因为不存在名为 strcat.o 的成员，所以它被添加到库的末尾。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例５. 指定在何处插入新成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r -b strlen.o lib.a strcmp.o

此命令添加 strcmp.o 文件，并将该新成员置于 strlen.o 成员之前。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例６．要更新一个已经更改过的成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r -u lib.a strcpy.o

此命令替换现有 strcpy.o 成员，但仅当文件 strcpy.o 自从最后一次添加到库后已经修改时才替换它。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例７　要更改库成员的顺序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -m -a strcmp.o lib.a strcat.o strcpy.o

此命令将成员 strcat.o 和 strcpy.o 移动到紧跟在 strcmp.o 成员之后的位置。保留 strcat.o 和 strcpy.o 成员的相对顺序。换句话说，如果在移动之前strcpy.o 成员在 strcat.o 成员之前，那么（移动后）它依旧如此。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例８　要解压缩库成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -x lib.a strcat.o strcpy.o

此命令将成员 strcat.o 和 strcpy.o 分别复制到名为 strcat.o 和 strcpy.o 的文件。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例９　要解压缩并重命名一个成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -p lib.a strcpy.o &amp;gt;stringcopy.o
此命令将成员 strcpy.o 复制到一个名为 stringcopy.o 的文件。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例10 要删除一个成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -d lib.a strlen.o

此命令从 lib.a 库中删除成员 strlen.o 。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例11 要从多个用 ld 命令创建的共享模块中创建一个压缩文档库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -r -v libshr.a shrsub.o shrsub2.o shrsub3.o ...

此命令从名为 shrsub.o 、shrsub2.o 、shrsub3.o 等等的共享模块中创建名为libshr.a 的压缩文档库。要编译并链接使用 libshr.a 压缩文档库的 main 程序，请使用以下命令：

cc -o main main.c -L/u/sharedlib -lshr
main 程序现在是可执行的。main 程序引用的任何符号（包含在libshr.a 压缩文档库中）已经因延迟分辨率而作了标记。-l 标志指定应在libshr.a 库中搜索这些符号。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例12 要列出 lib.a 的内容（忽略任何 32 位目标文件）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -X64 -t -v lib.a
要从 lib.a 解压缩所有 32 位的目标文件
ar -X32 -x lib.a
要列出 lib.a 中的所有文件，无论是 32 位、64 位或非对象，请输入：
ar -X32_64 -t -v lib.a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例13 在shell脚本中使用
　　
    Bash代码
    OS=&lt;code&gt;uname -r&lt;/code&gt;
    ar rcs libhycu.a.$OS *.o&lt;/p&gt;
&lt;p&gt;示例14 在makefile中使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Makefile代码
$（BIN1）: $（BIN1_OBJS）
ar rcs $@ $^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例15 创建并使用静态库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;第一步：编辑源文件，test.h test.c main.c。其中main.c文件中包含main函数，作为程序入口；test.c中包含main函数中需要用到的函数。

vi test.h test.c main.c

第二步：将test.c编译成目标文件。

gcc -c test.c
如果test.c无误，就会得到test.o这个目标文件。

第三步：由。o文件创建静态库。

ar rcs libtest.a test.o

第四步：在程序中使用静态库。

gcc -o main main.c -L. -ltest
因为是静态编译，生成的执行文件可以独立于。a文件运行。

第五步：执行。

./main
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例16 创建并使用动态库
　　
    第一步：编辑源文件，test.h test.c main.c。其中main.c文件中包含main函数，作为程序入口；test.c中包含main函数中需要用到的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi test.h test.c main.c

第二步：将test.c编译成目标文件。

gcc -c test.c
前面两步与创建静态库一致。

第三步：由。o文件创建动态库文件。

gcc -shared -fPIC -o libtest.so test.o

第四步：在程序中使用动态库。

gcc -o main main.c -L. -ltest
当静态库和动态库同名时，gcc命令将优先使用动态库。

第五步：执行。

LD_LIBRARY_PATH=. ./main
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，看一下ltp是如何测试ar命令的。&lt;/p&gt;
&lt;p&gt;ar文件下包括：&lt;/p&gt;
&lt;p&gt;ar01  file0.in  file10.in  file1.in  file2.in  file3.in  file4.in  file5.in  file6.in  file7.in  file8.in  file9.in  Makefile等文件，其中ar01是shell编写的测试脚本。
测试目的，测试ar命令的不同选项的功能。测试策略，通过比较单独指定参数和组合参数测试结果进行判断，如果相同测试通过，如果不同，测试失败。&lt;/p&gt;
&lt;p&gt;ar测试项的参数为: export TCdat=$LTPROOT/testcases/bin; ar01　直接执行ar01即可。&lt;/p&gt;
&lt;p&gt;测试条件，系统存在ar命令。在运行config时，会进行check:如　&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4165&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;
&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4181&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;
&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4192&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序分析：&lt;/p&gt;
&lt;p&gt;创建用到的临时文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LIST=&amp;quot;file1.in file2.in file3.in file4.in file5.in file6.in file7.in file8.in file9.in file10.in&amp;quot;
LIST=&amp;quot;$LIST $LIST $LIST $LIST $LIST $LIST $LIST $LIST $LIST $LIST&amp;quot;

#Setup function

setup(){
    for i in $LIST;do
        touch $i
    done
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果判定，判断子case的返回值是否为０，TCRESULT为标志位，初始值为０，出错TCRESULT置为１，不同测试内容分别返回不同的编号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Cleanup funciton
cleanup(){
    if [ $TCRESULT = 0 ];then
        echo &amp;quot;-----------ar command passed the system test --------&amp;quot;
        exit 0
    else
        echo &amp;quot;-----------ar command failed the system test --------&amp;quot;
        exit 1
    fi
}

crtest() {
    if [ $? -ne 0]
    then
        TCRESULT=1
        echo &amp;quot;FAIL - could not create lib.a&amp;quot;
        cleanup
    fi
    }

ttest() {
if [ $? -ne 0 ]
then
    TCRESULT=1
    echo &amp;quot;FAIL - could not output table from lib.a to lib.a.stdout&amp;quot;
    cleanup
fi
}

rtest() {
    if [ $? -ne 0 ]
    then
        TCRESULT=1
        echo &amp;quot;FAIL - could not add file into lib.a&amp;quot;
        cleanup
    fi
}

mtest() {
    if [ $? -ne 0 ]
    then
        TCRESULT=1
        echo &amp;quot;FAIL - could not move file into lib.a&amp;quot;
        cleanup
    fi
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过结果判定的设置来看，主要验证ar命令的库的创建、库列表信息导出、往库中添加文件、移除库中的文件。&lt;/p&gt;
&lt;p&gt;测试代码片段：&lt;/p&gt;
&lt;p&gt;标志“a"：在 PositionName 参数标识的现有文件后安置指定的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -cr $TCtmp/lib.a file1.in file3.in
crtest

ar -ra file1.in $TCtmp/lib.a file2.in
rtest

ar -t $TCtmp/lib.a &amp;gt; $TCtmp/lib.a.stdout
tttest

if diff -b $TCtmp/lib.a.exp $TCtmp/lib.a.stdout &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
then
    echo &amp;quot;-)1&amp;quot;
else
    TCRESULT=1
    echo &amp;quot;FAIL -ar with -a option does not place file after &amp;quot;posname&amp;quot;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体测试内容列表：&lt;/p&gt;
&lt;p&gt;（１）The 'a' flag causes files to be placed after 'posname'.&lt;/p&gt;
&lt;p&gt;（２）The 'a' flag with the 'm' option causes files to be moved after 'posname'&lt;/p&gt;
&lt;p&gt;（３）The 'b' flag causes files to be placed before 'posname'.&lt;/p&gt;
&lt;p&gt;（４）The 'b' flag with 'm' option causes files to be moved before 'posname'.&lt;/p&gt;
&lt;p&gt;（５）-c option suppress the messages&lt;/p&gt;
&lt;p&gt;（６）The 'qc' option causes suppresion of the default message when　'afile' is created&lt;/p&gt;
&lt;p&gt;（７）The -d option deletes files from archive when names are specified.&lt;/p&gt;
&lt;p&gt;（８）The -d option does not delete files from archive when no names　are specified.&lt;/p&gt;
&lt;p&gt;（９）The -d does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;（10）The 'i' flag causes files to be placed before 'posname'.&lt;/p&gt;
&lt;p&gt;（11) The 'i' flag with 'm' option causes files to be moved before 'posname'.&lt;/p&gt;
&lt;p&gt;(12) m option moves the files to end of the archive&lt;/p&gt;
&lt;p&gt;(13) The -p option causes only printing of contents of file contained in archive.&lt;/p&gt;
&lt;p&gt;(14) The -p does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;(15) The command 'ar -q afile name' appends name to the end of 'afile'.&lt;/p&gt;
&lt;p&gt;(16) q option does not affect the behaviour of option s&lt;/p&gt;
&lt;p&gt;(17) The -s causes regeneration of symbol table even if a symbol table exists.&lt;/p&gt;
&lt;p&gt;(18) ar with -t print as desired&lt;/p&gt;
&lt;p&gt;(19) The -t does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;(20)The 'u' flag causes files only with later modification date than in archive are replaced.&lt;/p&gt;
&lt;p&gt;(21) ar with -v flag to print a line for each file&lt;/p&gt;
&lt;p&gt;(22) The -v option produces a verbose listing like ls -n&lt;/p&gt;
&lt;p&gt;(23) The 'v' option causes the 'x' option to display a filename for each file extracted.&lt;/p&gt;
&lt;p&gt;(24) The command 'ar -x afile ' causes all files from the archive to be extracted.&lt;/p&gt;
&lt;p&gt;(25) The command 'ar -x afile name name' causes only named files from the archive to be extracted.&lt;/p&gt;
&lt;p&gt;(26) This test will fail under pan, so it's commented out by default.&lt;/p&gt;
&lt;p&gt;(27) Signal SIGHUP&lt;/p&gt;
&lt;p&gt;(28) Signal SIGQUIT&lt;/p&gt;
&lt;p&gt;(29) Signal SIGHUP; ar should not remove archive that existed before invocation.&lt;/p&gt;
&lt;p&gt;(30) Signal SIGINIT; ar should not remove archive that existed before invocation.&lt;/p&gt;
&lt;p&gt;(31) Signal SIGQUIT; ar should not remove archive that existed before invocation.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-02:2016/06/02/LTP/</guid><category>LTP</category></item><item><title>LTP－Case list</title><link>http://king32783784.github.io/2016/06/01/LTP/</link><description>&lt;p&gt;该topic将深入分析ltp的测试内容，着重于具体每个case的测试内容及测试方法。通过对ltp case的分析，加强linux系统的理解和用例设计。本节主要整理ltp的包括测试case的类型和case列表。&lt;/p&gt;
&lt;h3&gt;整体情况&lt;/h3&gt;
&lt;p&gt;case主要分为”commands"、“kdump"、"kernel"、"misc"、"network"、"open_posix_testsuite"、"realtime"、"lib"等部分，主要内容如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;包含内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;commands&lt;/td&gt;
&lt;td&gt;ade cpio df eject gzip logrotate mail mkfs sshd tar unzip which at cron du fileutils insmod lsmod mkswap su tmp-tools wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kernel&lt;/td&gt;
&lt;td&gt;connectors controllers firmware hotplug input ipc logging mce-test module power_management sched syscalls tracing containers device-drivers fs include io lib mem numa pty security times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misc&lt;/td&gt;
&lt;td&gt;crash f00f math&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;network&lt;/td&gt;
&lt;td&gt;busy_poll dctcp iptables netstress nfsv4 rpc stress tcp_fstopen virt can dhcp iproute lib6 multicast nfs sockets tcp_cmds traceroute xinetd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open_posix_testsuite&lt;/td&gt;
&lt;td&gt;functional tools bin conformance stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;realtime&lt;/td&gt;
&lt;td&gt;perf profiles stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kdump&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;commands&lt;/h4&gt;
&lt;p&gt;主要case包括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ade&lt;/td&gt;
&lt;td&gt;ar file ld ldd nm objdump size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fileutils&lt;/td&gt;
&lt;td&gt;cp ln mkdir mv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tpm-tools&lt;/td&gt;
&lt;td&gt;tmp tpmtoken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;kernel&lt;/h4&gt;
&lt;p&gt;主要case包括:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;connectors&lt;/td&gt;
&lt;td&gt;connector pec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;containers&lt;/td&gt;
&lt;td&gt;libclone mountns mqns netns pidns share sysvipc userns utsname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;controllers&lt;/td&gt;
&lt;td&gt;cgroup cgroup_xattr cpuctl cpuset io-throttle memcg pids cgroup_fg cpuacct cpuctl_fj freezer libcontrollers memctl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;device-drivers&lt;/td&gt;
&lt;td&gt;acpi base cpufreq drm locking misc_modules pci tbio usb zram agp block dev_sim_framework nls rcu rtc uaccess v4l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firmware&lt;/td&gt;
&lt;td&gt;fw_load_kernel fw_load_user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fs&lt;/td&gt;
&lt;td&gt;acl dmapi ext4-new-features fs_blnd fs_inod fs_perms fsstress ftest iso9660 linktest mongo proc racer stram acls doio fs-bench fs_di fs_main fs_readonly fsx-linux inode lftest openfile quota_remount scsi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hotplug&lt;/td&gt;
&lt;td&gt;cpu_hotplug memory_hotplug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io&lt;/td&gt;
&lt;td&gt;aio direct_io disktest ltp-aiodio stress_cd stress_floppy writetest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipc&lt;/td&gt;
&lt;td&gt;pipeio semaphore&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logging&lt;/td&gt;
&lt;td&gt;kmsg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mem&lt;/td&gt;
&lt;td&gt;cpuset mem mtest01 mtest06 oom shmt thp vma hugetlb ksm mmapstress mtest05 mtest07 page swapping tunable vmtests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moudle&lt;/td&gt;
&lt;td&gt;create_module delete_module query_module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numa&lt;/td&gt;
&lt;td&gt;numa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power_management&lt;/td&gt;
&lt;td&gt;pm_ilb_test runpwtests01-06 runpwtests_exelusive01-06 pm_cpu_consolidation pm_include pm_sched_domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pty&lt;/td&gt;
&lt;td&gt;hangup ptem pty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched&lt;/td&gt;
&lt;td&gt;cfs-scheduler clisrv hypertherading nptl process_stress pthreads sched_stress tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;cap_bound filecaps integrity mmc_security prot_hsymlinks securbits smack tomoyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syscalls&lt;/td&gt;
&lt;td&gt;abort accept accept4 access acct add_key adjtimex alarm asyncio bdflush bind brk cacheflush capget capset chdir chmod chown chroot clock_getres clock_nanosleep clock_nanosleep2 clone close cma confstr connect creat dup dup2 dup3 epoll epoll2 epoll_create1 epoll_ctl epoll_pwait epoll_wait eventfd eventfd2 execl execle execlp execv execve execvp exit exit_group faccessat fadvise fallocate fanotify fchdir fchmod fchmodat fchown fchownat fcntl fdatasync flock fmtmsg fork fpathconf fstat fstatat fstatfs fsync ftruncate futex futimesat getcontext getcpu getcwd getdents getdomainname getdtablesize getegid geteuid getgid getgroups gethostbyname_r gethostid gethostname getitimer get_mempolicy getpagesize getpeername getpgid getpgrp getpid getppid getpriority getrandom getresgid getresuid getrlimit get_robust_list getrusage getsid getsockname getsockopt gettid gettimeofday getuid getxattr inotify inotify_init io_cancel ioctl io_destroy io_getevents ioperm iopl io_setup io_submit ipc kcmp keyctl kill lchown lgetxattr link linkat listen llistxattr llseek lseek lstat madvise Makefile mallopt mbind memcmp memcpy memmap memset migrate_pages mincore mkdir mkdirat mknod mknodat mlock mlockall mmap modify_ldt mount move_pages mprotect mq_notify mq_open mq_timedreceive mq_timedsend mq_unlink mremap msync munlock munlockall munmap nanosleep newuname nftw nice open openat paging pathconf pause perf_event_open personality pipe pipe2 poll ppoll prctl pread preadv profil pselect ptrace pwrite pwritev quotactl read readahead readdir readlink readlinkat readv reboot recv recvfrom recvmsg remap_file_pages removexattr rename renameat renameat2 request_key rmdir rt_sigaction rt_sigprocmask rt_sigqueueinfo rt_sigsuspend rt_sigtimedwait sbrk sched_getaffinity sched_getattr sched_getparam sched_get_priority_max sched_get_priority_min sched_getscheduler sched_rr_get_interval sched_setaffinity sched_setattr sched_setparam sched_setscheduler sched_yield select send sendfile sendmsg sendto setdomainname setegid setfsgid setfsuid setgid setgroups sethostname setitimer setns setpgid setpgrp setpriority setregid setresgid setresuid setreuid setrlimit set_robust_list setsid setsockopt set_thread_area set_tid_address settimeofday setuid setxattr sgetmask sigaction sigaltstack sighold signal signalfd signalfd4 sigpending sigprocmask sigrelse sigsuspend sigtimedwait sigwait sigwaitinfo socket socketcall socketpair sockioctl splice ssetmask stat statfs statvfs stime string swapoff swapon switch symlink symlinkat sync sync_file_range syscall sysconf sysctl sysfs sysinfo syslog tee time timerfd timer_getoverrun timer_gettime times tkill truncate ulimit umask umount umount2 uname unlink unlinkat unshare ustat utils utime utimensat utimes vfork vhangup vmsplice wait wait4 waitid waitpid write writev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timers&lt;/td&gt;
&lt;td&gt;clock_gettime clock_settime leapsec timer_create timer_delete timer_settime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tracing&lt;/td&gt;
&lt;td&gt;ftrace&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;misc&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;crash&lt;/td&gt;
&lt;td&gt;crash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f00f&lt;/td&gt;
&lt;td&gt;foof&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;math&lt;/td&gt;
&lt;td&gt;abs atof float fptests nextafter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;network&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;can&lt;/td&gt;
&lt;td&gt;filter-test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dctcp&lt;/td&gt;
&lt;td&gt;dctcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhcp&lt;/td&gt;
&lt;td&gt;dhcp_tests dhcp_lib  dnsmasq_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iproute&lt;/td&gt;
&lt;td&gt;ip_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iptables&lt;/td&gt;
&lt;td&gt;iptables_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib6&lt;/td&gt;
&lt;td&gt;asapi getaddrinfo in6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;multicast&lt;/td&gt;
&lt;td&gt;mc_cmds mc_commo mc_gethost mc_member mc_opts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstress&lt;/td&gt;
&lt;td&gt;netstress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nfs&lt;/td&gt;
&lt;td&gt;fsx-linux nfslock01 nfsstat01 nfs_stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nfsv4&lt;/td&gt;
&lt;td&gt;acl locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rpc&lt;/td&gt;
&lt;td&gt;basic_tests rpc-tirpc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sockets&lt;/td&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;broken_ip dns ftp http icmp interface  ipsec multicast ns-tools route ssh tcp udp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tcp_cmds&lt;/td&gt;
&lt;td&gt;arping echo ftp netstat rcp rsh sendfile tcpdump trackpath clockdiff finger host ipneigh ping rdist rlogin rwho ssh telnet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tcp_fastopen&lt;/td&gt;
&lt;td&gt;tcp_fastopen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;traceroute&lt;/td&gt;
&lt;td&gt;traceroute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virt&lt;/td&gt;
&lt;td&gt;gre01 ipvlan macvlan macvtap vlan vxlan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xinted&lt;/td&gt;
&lt;td&gt;xinted&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;open_posix_testsuite&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bin&lt;/td&gt;
&lt;td&gt;run-all-posix-option-group-tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conformance&lt;/td&gt;
&lt;td&gt;behavior definitions interfaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functional&lt;/td&gt;
&lt;td&gt;mqueues semaphores threads timers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;mqueues semaphores signals threads timers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;realtime&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;func&lt;/td&gt;
&lt;td&gt;async_handler hrtimer-prio matrix_mult periodic_cpu_load pi-tests prio-wake rt-migrate sched_jitter thrad_clock gtod_latency measurement pi_perf prio-preempt pthread_kill_latency sched_football sched_letency&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m4&lt;/td&gt;
&lt;td&gt;m4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf&lt;/td&gt;
&lt;td&gt;latency&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;pi-tests&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来会深入分析每个case的具体测试目的及内容。ltp测试用例主要采用shell和Ｃ编写。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-01:2016/06/01/LTP/</guid><category>LTP</category></item><item><title>Python-HOWTOS(一）</title><link>http://king32783784.github.io/2016/03/11/python-howtosyi/</link><description>&lt;p&gt;Python HOWTOS 是一些单一的、特定的主题并试图覆盖python大部分内容，参考linux howto形成的集合，部分内容比python库包含更多的内容。
目前，包括这些topic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将python2代码移植到python3&lt;/li&gt;
&lt;li&gt;移植扩展模块到python3&lt;/li&gt;
&lt;li&gt;Curses编程&lt;/li&gt;
&lt;li&gt;Descriptor 使用方法&lt;/li&gt;
&lt;li&gt;函数式编程方法&lt;/li&gt;
&lt;li&gt;Logging使用方法&lt;/li&gt;
&lt;li&gt;Logging Cookbook&lt;/li&gt;
&lt;li&gt;正则表达式使用方法&lt;/li&gt;
&lt;li&gt;Socket编程方法&lt;/li&gt;
&lt;li&gt;排序使用方法&lt;/li&gt;
&lt;li&gt;Unicode使用方法&lt;/li&gt;
&lt;li&gt;如何通过urllib包获取网络资源&lt;/li&gt;
&lt;li&gt;Argparse教程&lt;/li&gt;
&lt;li&gt;IP地址模块介绍&lt;/li&gt;
&lt;li&gt;参数解析方法&lt;/li&gt;
&lt;li&gt;CPython中DTrace和SystemTap使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;将python2代码移植到python3&lt;/h3&gt;
&lt;p&gt;Python3是python的未来，与此同时，Python2仍然在使用，使用这两个主流版本的python开发项目是件好事。本指南将帮助我们如何更好的使用python2&amp;amp;3.如果想查看扩展模块级的信息，可以查看移植扩展模块到python3[].如果想了解python3的出现原因，可以查看Nick Coghlan's&lt;a href="https://ncoghlan-devs-python-notes.readthedocs.io/en/latest/python3/questions_and_answers.html"&gt;Python 3 Q&amp;amp;A&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;简要说明&lt;/h4&gt;
&lt;p&gt;为了使你的项目兼容python2/3，基本步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.只担心支持python2.7&lt;/li&gt;
&lt;li&gt;2.确保测试覆盖，（&lt;a href="https://pypi.python.org/pypi/coverage"&gt;coverage.py&lt;/a&gt;；pip install coverage)&lt;/li&gt;
&lt;li&gt;3.学习python2&amp;amp;3的不同&lt;/li&gt;
&lt;li&gt;4.使用&lt;a href="https://python-modernize.readthedocs.org/en/latest/"&gt;Modernize&lt;/a&gt;或&lt;a href="python-future.org/automatic_conversion.html"&gt;Futurize&lt;/a&gt;去更新代码（pip install modernize 或 pip install future)&lt;/li&gt;
&lt;li&gt;5.使用&lt;a href="https://pypi.python.org/pypi/pylint"&gt;Pylint&lt;/a&gt;确保没有回退到不支持python3(pip install pylint)&lt;/li&gt;
&lt;li&gt;6.使用&lt;a href="https://pypi.python.org/pypi/caniusepython3"&gt;caniusepython3&lt;/a&gt;找出哪些依赖影响了python3的使用（pip install caniusepython3)&lt;/li&gt;
&lt;li&gt;7.但这些依赖不在影响集成，需要确保可以一直兼容python2&amp;amp;3(&lt;a href="https://pypi.python.org/pypi/tox"&gt;tox&lt;/a&gt;可以帮助你应付不同版本的测试；pip install tox)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果放弃对python2的支持，在学习了python2&amp;amp;3的差异之后，可以通过&lt;a href="https://docs.python.org/3/library/2to3.html"&gt;2&amp;amp;3&lt;/a&gt;转换代码，并可以忽略其他步骤。&lt;/p&gt;
&lt;h4&gt;详细信息&lt;/h4&gt;
&lt;p&gt;同时支持python2&amp;amp;3的关键是今天你就可以开始了。尽管你的依赖现在不支持python3，并不意味着你的代码现在不支持python3.大多为了支持python3，需要清理python2的代码。&lt;/p&gt;
&lt;p&gt;另一个关键是更新python2支持python3已有大量的自动化工具。 虽然必须让一些文字数据和二进制数据API去支持Python 3，但底层的转换工作可以由自动化工具去转换。&lt;/p&gt;
&lt;p&gt;当更新代码以支持python2&amp;amp;3时，一定要记住这些要点的详细信息。&lt;/p&gt;
&lt;h4&gt;Drop support for Python 2.6 and older&lt;/h4&gt;
&lt;p&gt;尽管可以让python2.5支持python3,但只使用python2.7要简单的多。如果不打算放弃python2.5，&lt;a href="https://pypi.python.org/pypi/six"&gt;six&lt;/a&gt;可以帮助兼容python2.5和python3(pip install six).但这个专题，几乎不能提供帮助。&lt;/p&gt;
&lt;p&gt;如果跳过python2.5和之前版本，一些必要的修改可以让你的代码看起来像纯正的ｐｙｔｈｏｎ代码。最坏的情况需要用函数替换一些方法或import的一些内置函数。&lt;/p&gt;
&lt;p&gt;如果要尽量支持python2.7,python2.6以后将不再支持和进行bug 修复。&lt;/p&gt;
&lt;h4&gt;Make sure you specify the proper version support in your setup.py file&lt;/h4&gt;
&lt;p&gt;在setup.py文件中，需要你在&lt;a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers"&gt;trove classifier&lt;/a&gt;指定你支持python版本。如果你的代码不支持python3，你至少应该指定　Programming Language :: Python :: 2 :: only. 例如你同样需要指定哪个主版本，Programming Language :: Python :: 2.7&lt;/p&gt;
&lt;h4&gt;Have good test coverage&lt;/h4&gt;
&lt;p&gt;一旦你让你的代码支持python2早期的版本，你会想确保你的test suite足够覆盖你的代码。如果，你没有工具进行测试覆盖，coverage.py是个不错的选择。&lt;/p&gt;
&lt;h4&gt;Learn the differences between Python 2&amp;amp;3&lt;/h4&gt;
&lt;p&gt;当你准备好了代码和测试就可以开始支持python3了。 但要完全理解你的代码是如何改变的，你会想学习python2到python3的变化.通常比较好的方法是读python3每个版本的更新&lt;a href="https://docs.python.org/3/whatsnew/index.html"&gt;What's New&lt;/a&gt;和&lt;a href="python3porting.com"&gt;Porting to Python3&lt;/a&gt;.还有就是查看python未来项目&lt;a href="http://python-future.org/compatible_idioms.html"&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Update your code&lt;/h4&gt;
&lt;p&gt;当你了解了python3&amp;amp;2不同之后，就可以更新你的代码了。有两个自动移植代码的工具可以选择：Modernize 和　Futurize.两个工具选择的依据是，你想让你的代码接近python3的程度。Futurize会尽力使Python 3语法同步到ython 2，如存在向后移植的bytes在Python 3这样的类型。&lt;/p&gt;
&lt;p&gt;选好需要的工具之后，就可以开始更新代码了。你需要确保，更新之后的代码和之前的代码在功能实现是一致的。也就需要保证测试结果更新前后保持一致。尽管工具可以将大部分代码更新到支持python3，但仍然有一些不能更新，需要手动去更改，使代码完全支持python3.下面几种情况需要注意，有时调试时可能会忽略。
 　&lt;/p&gt;
&lt;h5&gt;Division&lt;/h5&gt;
&lt;p&gt;在python3中，5/2 == 2.5而不是２；所有int之间的除法的结果都是float.这个变化实际上在2002年发布的python2.2中增加。一直鼓励用户在任何使用/和//的文件中增加"from __future__ import　division" 或-Q标志。 如果你还没有这样做，那么你将需要通过你的代码，做两件事情：
 * 1.在文件中增加"from __future__ import division"
 * 2. 使用//进行地板除，/除则得到float&lt;/p&gt;
&lt;p&gt;原因是/不能简单翻译成//,如果你的代码定义__truediv__方法而不是__floordiv__则会导致你的代码出错。&lt;/p&gt;
&lt;h5&gt;Text versus binary data&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5&gt;Prevent compatibility regressions&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5&gt;Check which dependencies block your transition&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5&gt;Update your setup.py file to denote Python3 compatibility&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5&gt;Use continuous integration to stay compatible_idioms&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h4&gt;Dropping Python2 support completely&lt;/h4&gt;
&lt;p&gt;待补&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 11 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-03-11:2016/03/11/python-howtosyi/</guid><category>python-howtos</category></item><item><title>Python-tips01</title><link>http://king32783784.github.io/2016/01/01/effective-python/</link><description>&lt;h3&gt;确认python版本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前两个版本活跃状态，python2和python3&lt;/li&gt;
&lt;li&gt;python有很多流行的运行环境，如cpython jython ironpython以及  pypy&lt;/li&gt;
&lt;li&gt;运行Python时，确保python是想用的版本&lt;/li&gt;
&lt;li&gt;以后项目尽量使用python3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;PEP8风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编写python代码时，应该遵循PEP8风格指南&lt;/li&gt;
&lt;li&gt;采用通用的代码风格，便于多人协作&lt;/li&gt;
&lt;li&gt;一致的代码风格易于维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bytes、str与Unicode的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python3中，bytes是一种包含8位值的序列，str是一种包含Unicode字符的序列。开发时不能以&amp;gt;或+等操作符来混同操作bytes和str实例。&lt;/li&gt;
&lt;li&gt;Python2中，str是一种包含8位值的序列，Unicode是一种包含Unicode字符的序列。如果 str只包含7位ASCII字符，可以通过想过操作符同时操作str和Unicode。&lt;/li&gt;
&lt;li&gt;对于输入的数据进行操作之前，使用辅助函数来保证字符序列的类型与开发者的期望相符。&lt;/li&gt;
&lt;li&gt;从文件中读取二进制数据或向其中写入二进制数据时，总应该以'rb'或'wb'等二进制模式来开启文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写Python程序的时候，一定要把编码和解码操作放在解码最外围做。程序的核心部分分别使用Unicode字符类型（Python3中str，Python2中的unicode),而且不要对字符编码做任何假设。
由于字符类型有别，所以Python代码经常会出现两种常见的使用情景：
&lt;em&gt; 开发者需要原始8位值，这些8位值表示UTF-8格式来编码字符
&lt;/em&gt; 开发者需要操作没有特定编码形式的Unicode字符。&lt;/p&gt;
&lt;p&gt;编写两个helper函数以便在这种情况之间转换，使得转换后的输入数据符合预期。
python3中，需要编写接受str或bytes,并总是返回 str 的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode(&amp;#39;utf-8&amp;#39;)
    else:
        value = bytes_or_str
    retunr value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，需要编写接受str或bytes,总是返回bytes：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_bytes(bytes_or_str):
    if isinstance(bytes_or_str, str):
        value = bytes_or_str.encode(&amp;#39;utf-8&amp;#39;)
    else:
        value = bytes_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python2,需要编写接受str或Unicode，总是返回Unicode的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#python2
def to_unicode(unicode_or_str):
    if isinstance(unicode_or_str, str):
        value = unicode_or_str.decode(&amp;#39;utf-8&amp;#39;)
    else:
        value = unicode_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编写接受str或Unicode，总是返回str的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_str(unicode_or_str):
    if isinstance(unicode_or_str, unicode):
        value = unicode_or_str.encode(&amp;#39;unf-8&amp;#39;)
    else:
        value = unicode_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python使用8位值与Unicode字符时，需要注意以下问题：
python2中，如果str只包含7位ASCII，Unicode和str实例成了同一种类型。
可以用+操作符把这种str和Unicode连接
可以用等价与不等价操作符，
格式化字符串中，可以用“%”形式代表Unicode。&lt;/p&gt;
&lt;p&gt;Python3中，如果通过内置的open函数获取了文件句柄，该句柄默认会采用UTF-8编码格式操作文件。而Python2中，文件默认编码格式为二进制格式。可能或出现问题。
例如，向文件中写入一些二进制数据。下面这种方法在Python2中可以正常运行，Python3不行&lt;/p&gt;
&lt;p&gt;with open（'/tmp/random.bin', 'w') as f:
       f.write(os.urandom(10))&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeError: must be str, not bytes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python3给open函数添加了名为encoding的新参数，而这个新参数的默认值却是"utf-8"。这样在文件句柄上进行read和write操作时，系统要求开发者必须传入包含Unicode字符的str实例，而不接受包含二进制的bytes实例。
为了解决这个问题，我们必须用二进制写入模式（'wb')来开启操作的文件。以下方式同时适用Python2和Python3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;/tmp/random.bin&amp;#39;, &amp;#39;wb&amp;#39;) as f:
    f.write(os.urandom(10))
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-01-01:2016/01/01/effective-python/</guid><category>python</category></item><item><title>PyUnit(一）</title><link>http://king32783784.github.io/2016/01/01/python/</link><description>&lt;h3&gt;PyUnit简介&lt;/h3&gt;
&lt;p&gt;PyUnit是Python 2.1版本新增功能。&lt;/p&gt;
&lt;p&gt;Python单元测试框架，又叫PyUnit。是JUnit的Python实现，是由Kent Beck和Erich Gamma共同开发的。同样，JUnit是Kent的Smalltalk测试框架的Java实现。PyUnit和JUnit都是各自怨言的标准测试框架。&lt;/p&gt;
&lt;p&gt;PyUnit模块支持自动化测试，通用的setup和shutdown的代码，测试用例整合为测试集，还有独立的测试报告框架。PyUnit提供的类能够很容易的使以上特性应用于测试。PyUnit是借由以下概念支持单元测试的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试fixture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试fixture是指运行测试前的准备工作和运行测试后的清理工作。例如，创建临时或代理数据库、目录，或者启动服务进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试用例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试用例是最小的测试单元，检查特定的输入会产生预期的结果。PyUnit提供一个测试用例几类TestCase，继承基类可以创建新的测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试集是测试用例的集合，同时也可以是其他测试集的结合，或者是测试用例和测试集的混合集合。用于批量执行测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行器用来执行测试用例，并且把测试结果呈现给用户。执行器可以使用图形界面，文本界面，甚至特殊值来显示测试结果。&lt;/p&gt;
&lt;p&gt;测试用例和测试fixture通过TestCase和FunctionTestCase两个类来实现的。TestCase用来创建新的测试用例，而FunctionTestCase是用来把已有测试用例整合为PyUnit结构用例的（译者注：项目原来已经有测试用例了，后来想改用PyUnit测试框架，这时候就要用到FunctionTestCase了）。使用TestCase类创建新测试用例，需要覆盖setUp()和tearDown()方法，他们分别用来初始化fixture和清理fixture。而要使用FunctionTestCase类为已有函数创建测试用例，需要符合以下条件：我们不关心已有函数的测试结果，只关心正确的测试流程fixture初始化-&amp;gt;执行测试步骤-&amp;gt;测试固件清理。每个TestCase只能执行一个测试方法，所以最好每个测试用例有单独的测试fixture。&lt;/p&gt;
&lt;p&gt;TestSuite类实现测试套件功能，可以整合单独的测试用例或者其他测试套件。执行测试套件，测试套件中所有的测试用例和子测试套件都会被执行。&lt;/p&gt;
&lt;p&gt;执行器提供一个方法run()，该方法接受TestCase或者TestSuite对象最为参数，并且返回TestResult结果对象。PyUnit提供一个使用TextTestRunner执行器的例子，该例子汇报默认的标准错误流测试结果。想要更改其他环境的执行器（例如图形界面环境）并不需要派生自特定的类。&lt;/p&gt;
&lt;p&gt;另请参阅：&lt;/p&gt;
&lt;p&gt;Module doctest&lt;/p&gt;
&lt;p&gt;Another test-support module with a very different flavor.&lt;/p&gt;
&lt;p&gt;unittest2: &lt;a href="https://pypi.python.org/pypi/unittest2"&gt;A backport of new unittest features for Python 2.4-2.6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many new features were added to unittest in Python 2.7, including test discovery. unittest2 allows you to use these features with earlier versions of Python.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm"&gt;Simple Smalltalk Testing: With Patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kent Beck’s original paper on testing frameworks using the pattern shared by unittest.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nose.readthedocs.io/en/latest/"&gt;Nose&lt;/a&gt; and &lt;a href="http://docs.pytest.org/en/latest/"&gt;py.test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third-party unittest frameworks with a lighter-weight syntax for writing tests. For example, assert func(10) == 42.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy"&gt;The Python Testing Tools Taxonomy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An extensive list of Python testing tools including functional testing frameworks and mock object libraries.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lists.idyll.org/listinfo/testing-in-python"&gt;Testing in Python Mailing List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A special-interest-group for discussion of testing, and testing tools, in Python.&lt;/p&gt;
&lt;h3&gt;简单例子&lt;/h3&gt;
&lt;p&gt;PyUnit模块提供了大量的工具来构造和运行测试，本部分的例子可以满足大部分用户的需求。&lt;/p&gt;
&lt;p&gt;以下脚本是测试random模块的3个函数的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSequenceFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# make sure the shuffied sequence does not lose any elements&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# should raise an exception for an immutable sequence&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过继承unittest.TestCase类来创建测试用例，测试用例中３个独立的测试函数以“test"为开头命令。通过这种命名方式，执行器可以知道哪些方法是测试方法。
需要注意的是３个测试方法分别调用assertEqual()函数来检查预期结果；调用assertTure()函数来判断条件；调用assertRaises()函数来验证是否触发了预期的异常。这３个方法作为断言语句判断用例执行的正确性，以便执行器手机测试结果并产生测试报告。&lt;/p&gt;
&lt;p&gt;如果定义setUp()方法，每个测试用例执行前都会执行setUp();同样的，如果定义的tearDown()方法，每个测试用例执行完后都会执行tearDown()方法。上面的例子，setup()方法用来为每个用例创建一个新序列。&lt;/p&gt;
&lt;p&gt;例子的最后一段介绍了一种简单调用测试用例的方法－unittest.main().它为用例提供了命令行界面运行，脚本运行会输出以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连续３个点"..."表示３个测试用例都运行通过，如果运行失败显示“Ｆ”，例如“.FF"表示后２个用例运行失败。&lt;/p&gt;
&lt;p&gt;有很多更易管理，输出信息更简洁，并且不在命令行运行的方法来替代unittest.main()方法运行测试用例。例如以下方法，替换例子的最后一行unittest.main():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;suite = unittest.TestLoader().loadTestsFormTestCase(TestSequenceFunctions)
unittest.TestTestRunner(verbosity=2).run(suite)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改后的脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_choice (__main__.TestSequenceFunctions) ... ok
test_sample (__main__.TestSequenceFunctions) ... ok
test_shuffle (__main__.TestSequenceFunctions) ... ok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是一个简短的例子用于测试3个字符方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestStringMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FOO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_isupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOO&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# check that s.split fails when the separator is not a TestStringMethods&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试用例通过继承unittest.TestCase创建。测试用例中3个独立的测试函数以"test"为开头命名。通过使用这种命名方式，执行器可以知道哪些方法是测试方法。&lt;/p&gt;
&lt;p&gt;3个测试方法同样调用assertEqual()函数来检查预期结果；调用assertTrue()函数来判断条件；调用assertRaises()函数来验证是否触发了预期的异常。这3个方法作为断言语句判断用例执行正确性，以便于执行器收集测试结果并产生测试报告。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-01-01:2016/01/01/python/</guid><category>Pyunit</category></item><item><title>leetcode - Number Complement</title><link>http://king32783784.github.io/2015/12/04/python/</link><description>&lt;h3&gt;Number Complement&lt;/h3&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.&lt;/p&gt;
&lt;p&gt;Note:
The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integer’s binary representation.&lt;/p&gt;
&lt;p&gt;求一个32位无符号数的二进制的反数
比如5 101 输出010 2&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;findComplement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type num: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: int&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;findComplement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type num: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: int&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;:

            &lt;span class="kt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;方法：101 与 111异或后为010  10001 与　11111 异或后为01110　与相同位数的全部为１的数异或即可得到对应的反数。该问题变为如何找到与原数位数相同，且每一位都为１的数。&lt;/p&gt;
&lt;p&gt;方法一，找出原数的位数，相同位数最大数就是要找的数&lt;/p&gt;
&lt;p&gt;如5 101 ３位，３位最大数为２**３-1　７(111)  &lt;/p&gt;
&lt;p&gt;方法二，１移位得出&lt;/p&gt;
&lt;p&gt;如５　１&amp;lt;&amp;lt;1 10(2) 10&amp;lt;&amp;lt;1 100(4) 100&amp;lt;1 1000(8) 减去１即为111&lt;/p&gt;
&lt;h3&gt;Keyboard Row&lt;/h3&gt;
&lt;p&gt;Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.
Example 1:
Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]
Note:
You may use one character in the keyboard more than once.
You may assume the input string will only contain letters of alphabet.&lt;/p&gt;
&lt;p&gt;输入字符列表，找出字符串中字符只在键盘中一行的字符串。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;遍历字符串列表，然后遍历每一行字符，判断每个字符串的字符是否在同一行，如果是保存。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def findWord(words):
    row1=&amp;quot;QqWwEeRrTtYyUuIiOoPp&amp;quot;
    row2=&amp;quot;AaSsDdFfGgHhJjKkLl&amp;quot;
    row3=&amp;quot;ZzXxCcVvBbNnMm&amp;quot;
    rowlist=(row1, row2, row3)
    List=[]
    for word in words:
        for row in rowlist:
            Type=&amp;quot;T&amp;quot;
            for i in word:
                if i not in row:
                    Type=&amp;quot;F&amp;quot;
                    break
            if Type == &amp;quot;T&amp;quot;:
                List.append(word)
                break
    return List
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Fizz Buzz&lt;/h3&gt;
&lt;p&gt;Write a program that outputs the string representation of numbers from 1 to n.&lt;/p&gt;
&lt;p&gt;But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;n = 15,&lt;/p&gt;
&lt;p&gt;Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]&lt;/p&gt;
&lt;p&gt;输入一个数字，例如15，当为仅为3的倍数时输出Fizz,仅为5的倍数时为Buzz,当同时为3和5的倍数时为FizzBuzz&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;区别处理3种情况，3的倍数 5的倍数 15的倍数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type n: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: List[str]&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:

            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;1&lt;/span&gt;:

            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;2&lt;/span&gt;:

            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="nx"&gt;finallist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;3&lt;/span&gt;:

            &lt;span class="kt"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:

                    &lt;span class="kt"&gt;pass&lt;/span&gt;

                &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:

                    &lt;span class="kt"&gt;finallist.append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:

                    &lt;span class="kt"&gt;finallist.append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:

                    &lt;span class="kt"&gt;finallist.append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

                    &lt;span class="nx"&gt;finallist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;finallist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 04 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-12-04:2015/12/04/python/</guid><category>Python- Palindrome Number</category></item><item><title>leetcode - Palindrome Number &amp; Hamming Distance</title><link>http://king32783784.github.io/2015/12/03/python/</link><description>&lt;h3&gt;Palindrome Number&lt;/h3&gt;
&lt;h4&gt;问题描述&lt;/h4&gt;
&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.
判断一个整型数字是否为回文。并且不能再占用额外空间&lt;/p&gt;
&lt;h4&gt;解决方法一&lt;/h4&gt;
&lt;p&gt;该问题和上一个字符反转类似。同样可以采用字符反转的方法进行验证判断。&lt;/p&gt;
&lt;p&gt;参考代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type x: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: bool&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

            &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;True&lt;/span&gt;

        &lt;span class="s s-Atom"&gt;elif&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

            &lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;字符反转&lt;/span&gt;

            &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;#　判断是否相等
                    return True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            else:

                return False

        else:

            return False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试情况如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;11507 / 11507 test cases passed.
Status: Accepted
Runtime: 209 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;貌似y变量占用了额外空间，但测试仍然通过了&lt;/p&gt;
&lt;h4&gt;解决方法二：&lt;/h4&gt;
&lt;p&gt;同样采用数字拆分后组合&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        :type x: int&lt;/span&gt;
&lt;span class="s2"&gt;        :rtype: bool&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:
                &lt;span class="kt"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
                &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;:
                &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;leetcode测试结果：
11507 / 11507 test cases passed.
Status: Accepted
Runtime: 259 ms&lt;/p&gt;
&lt;p&gt;这里也额外占用内存也通过了。&lt;/p&gt;
&lt;h3&gt;Hamming Distance&lt;/h3&gt;
&lt;h4&gt;问题描述&lt;/h4&gt;
&lt;p&gt;The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
Given two integers x and y, calculate the Hamming distance.
Note:
0 ≤ x, y &amp;lt; 2**31.
Example:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)&lt;/p&gt;
&lt;p&gt;The above arrows point to positions where the corresponding bits are different.&lt;/p&gt;
&lt;p&gt;求x,y两个正整数的汉明距离。汉明距离：就是两个数二进制不同位数的格式
比如　１，4 就有两位不同&lt;/p&gt;
&lt;h1&gt;解决方法&lt;/h1&gt;
&lt;p&gt;两个数字按位进行或运算，结果不同的为１，相同为０，然后求结果中为１的位数，即为两个数的汉明距离&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;hammingDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type x: int&lt;/span&gt;

&lt;span class="s2"&gt;        :type y: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: int&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;

        &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

                &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;149 / 149 test cases passed.
Status: Accepted
Runtime: 39 ms&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 03 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-12-03:2015/12/03/python/</guid><category>Python- Palindrome Number</category></item><item><title>leetcode - Reverse Integer</title><link>http://king32783784.github.io/2015/12/02/python/</link><description>&lt;h4&gt;问题描述&lt;/h4&gt;
&lt;p&gt;Reverse digits of an integer.&lt;/p&gt;
&lt;p&gt;Example1: x = 123, return 321
Example2: x = -123, return -321&lt;/p&gt;
&lt;p&gt;click to show spoilers.&lt;/p&gt;
&lt;p&gt;Note:
The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.&lt;/p&gt;
&lt;p&gt;Subscribe to see which companies asked this question.&lt;/p&gt;
&lt;p&gt;将数字反转，注意如果反转后数字溢出（超出32位有符号数的范围），返回0&lt;/p&gt;
&lt;h4&gt;解决方法一&lt;/h4&gt;
&lt;p&gt;直观的方法，将数字转换为字符，将字符直接反转。负数时需进行“-”的处理。特殊情况为-9到9，不用反转；反转时如100后面为0的数字转变为001，但此处是数字，所以应打印1。
python进行字符转int时自动进行了处理。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-*coding=utf-8*-*&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;        :type x: int&lt;/span&gt;

&lt;span class="sd"&gt;        :rtype: int&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# :-1 反向遍历字符&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2147483648&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="c1"&gt;# 负数，增加&amp;quot;-&amp;quot;的处理&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2147483647&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行结果： 54321
leetcode case测试结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1032 / 1032 test cases passed.
Status: Accepted
Runtime: 52 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决方法二：&lt;/p&gt;
&lt;p&gt;321 
321%10 取最后一位1
321/10 去掉倒数第二位，32%10 取最后一位2
32/10 去掉倒数第三位， 3%10  取最后一位3
直到为0
重新组成
1
1&lt;em&gt;10 +2
12&lt;/em&gt;10 +3
至少往下移动一位即*10&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-*coding=utf-8*-*&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        :type x: int&lt;/span&gt;
&lt;span class="sd"&gt;        :rtype: int&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2147483648&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
                 &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2147483647&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
             &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行结果 -54321&lt;/p&gt;
&lt;p&gt;leetcode测试结果：
1032 / 1032 test cases passed.
Status: Accepted
Runtime: 46 ms
在提交的python语言的答案中，速度已接近最优结果。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 02 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-12-02:2015/12/02/python/</guid><category>Reverse Integer</category></item><item><title>leetcode - Two Sum</title><link>http://king32783784.github.io/2015/12/01/python/</link><description>&lt;h4&gt;问题描述&lt;/h4&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;
&lt;p&gt;Example:
Given nums = [2, 7, 11, 15], target = 9,&lt;/p&gt;
&lt;p&gt;Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]&lt;/p&gt;
&lt;p&gt;大体意思就是给出一个数组，数组中存在两个数的和为给出的目标和，数组中的数字只能用一次，给出符合要求数的索引值。&lt;/p&gt;
&lt;h4&gt;Python示例&lt;/h4&gt;
&lt;p&gt;示例一&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;twoSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        :type nums: List[int]&lt;/span&gt;

&lt;span class="s2"&gt;        :type target: int&lt;/span&gt;

&lt;span class="s2"&gt;        :rtype: List[int]&lt;/span&gt;

&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;2&lt;/span&gt;:

            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;firstindex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstnum&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;遍历数组&lt;/span&gt;

            &lt;span class="nx"&gt;secondnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;firstnum&lt;/span&gt;
          &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;求匹配的值&lt;/span&gt;
            &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstindex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
                 &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;替换该值，避免影响获取匹配值的索引&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;secondnum&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;判断数组中是否包含匹配值&lt;/span&gt;
                &lt;span class="nx"&gt;secondindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondnum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;获取匹配值的索引&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstindex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondindex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;返回坐标&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该示例运行leetcode的测试代码的时间为699 ms。&lt;/p&gt;
&lt;p&gt;替换对应数值，获取匹配值的索引，消耗了时间。&lt;/p&gt;
&lt;p&gt;示例二&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;twoSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="nx"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;                 &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;字典保存对应值的索引&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;# 遍历数组
                if target-value in dict:
      # 判断匹配值是否在字典中
                    return (dict[target-value], i)
  # 如果存在，返回字典中对应索引，和当前索引
                dict[value] = i
                     # 将当前值和对应索引保存到字典&lt;/p&gt;
&lt;p&gt;该示例运行leetcode的测试代码的时间为346ms。
减少示例一替换和获取索引值的耗时。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-12-01:2015/12/01/python/</guid><category>Python-Two Sum</category></item><item><title>Autotest-client Package(1)</title><link>http://king32783784.github.io/2015/11/01/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h3&gt;autotest_local 模块&lt;/h3&gt;
&lt;p&gt;class autotest.client.autotest_local.AutotestLocalAPP&lt;/p&gt;
&lt;p&gt;本地自动测试，指定一个control文件启动测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;autotest.common&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;common&lt;/span&gt; &lt;span class="c1"&gt;# pylint: disable=W0611&lt;/span&gt;
    &lt;span class="n"&gt;rootdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;autodir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;autodirbin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;common&lt;/span&gt; &lt;span class="c1"&gt;# pylint: disable=W0611&lt;/span&gt;
    &lt;span class="n"&gt;autodirbin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;autodir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autodirbin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autidirbin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;autodirtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autodir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AUTODIR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodir&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AUTODIRBIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autidirbin&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AUTODIRTEST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodirtest&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PYTHONPATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodirbin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cmdparser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optparser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutotestLocalAPP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Autotest local app runs tests locally&lt;/span&gt;

&lt;span class="sd"&gt;    Point it to a control file and let it rock&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_parsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_parsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutotestLocalOptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmdparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_cmdline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optios&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CUSTOM_DIR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The custom directory specifed does not exist, ignoring it ...&amp;quot;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Check for a control file if not in prebuild mode&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_test_setup&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Missing &lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_cmdline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;drop_caches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CLIENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop_caches&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_test_setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_job&lt;/span&gt;
            &lt;span class="n"&gt;exit_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;setup_job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;exit_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exit_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# JOB: run the specifed job control file&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runjob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;drop_caches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(三）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href=""&gt;Autotest:&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-11-01:2015/11/01/autotest/</guid><category>autotest</category></item><item><title>Autotest-Autotest Remote (Autoserv)(三）</title><link>http://king32783784.github.io/2015/08/22/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h3&gt;Running Autotest In a Guest&lt;/h3&gt;
&lt;p&gt;接下来看一下虚拟机guest执行一次测试的列子。control文件有点特别的是需要在host中运行OProfile收集运行时的信息。使用oprofile前，需要在guest安装。
给KVm指定一个IP，就会有一个虚拟机生成。试图运行虚拟机里面的oprofile，但没有成功。最后，选项"opcontrol --setup"应根据host中vmlinux位置调整。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host=hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)
kvm_on_remote_host= kvm.KVM(remote_host)

kvm_on_remote_host.get(&amp;quot;/var/local/src/kvm-compiled.tar.gz&amp;quot;)
addresses= [{&amp;quot;mac&amp;quot;:&amp;quot;02:00:00:00:00:01&amp;quot;, &amp;quot;ip&amp;quot;:&amp;quot;10.0.0.1&amp;quot;}]
kvm_on_remote_host.install(addresses, build=False, insert_moudles=False)

qemu_options=&amp;quot;-m 256 -hda /var/local/vdisk.img -snapshot&amp;quot;
g1= hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g1.wait.up()

at= autotest.Autotest()
at.get(&amp;quot;/home/foo/autotest/client&amp;quot;)
at.install(g1)

control_file=&amp;quot;&amp;quot;&amp;quot;
#~ job.profiles.add(&amp;quot;oprofile&amp;quot;, events=[&amp;quot;CPU_CLK_UNHALTED:8000&amp;quot;])
job.run_test(&amp;quot;linus_stress&amp;quot;)
&amp;quot;&amp;quot;&amp;quot;

results_dir= &amp;quot;g1_results&amp;quot;

# --start oprofile
remote_host.run(&amp;quot;opcontrol --shutdown&amp;quot;)
remote_host.run(&amp;quot;opcontrol --reset&amp;quot;)
remote_host.run(&amp;quot;opcontrol --setup&amp;quot;
    # &amp;quot;--vmlinux /lib/modules/#(uname -r)build/vmlinux
    &amp;quot;--no-vmlinx&amp;quot;
    &amp;quot;--event CPU_CLK_UNHALTED:8000&amp;quot;)
remote_host.run(&amp;quot;opcontrol --start&amp;quot;)

at.run(control_file, results_dir, g1)

# --stop opofile
remote_host.run(&amp;quot;opcontrol --stop&amp;quot;)
tmpdir= remote_host.get_tmp_dir()
remote_host.run(&amp;#39;opreport -l &amp;amp;&amp;gt; &amp;quot;%s&amp;quot;&amp;#39; %(sh_escape(os.path.join(tmpdir, &amp;quot;report&amp;quot;)),))
remote_host.get_file(os.path.join(tmpdir, &amp;quot;repoet&amp;quot;), os.path.join(results_dir, &amp;quot;host_oprofile&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Changing the Guest Kernel&lt;/h3&gt;
&lt;h4&gt;Usual"Way&lt;/h4&gt;
&lt;p&gt;KVM虚拟机使用bootloader,可以运行时进行重启，可以在同一个虚拟机上安装不同的内核&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host= hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)

kvm_on_remote_host= kvm.KVM(remote_host)
kvm_on_remote_host.get(&amp;quot;/var/local/src/kvm-comiled.tar.gz&amp;quot;)
addresses=[{&amp;quot;mac&amp;quot;: &amp;quot;02:00:00:00:00:01&amp;quot;, &amp;quot;ip&amp;quot;: &amp;quot;10.0.0.1&amp;quot;}]
kvm_on_remote_host.install(addresses, build=False, insert_moudles=False)

qemu_options=&amp;quot;-m 256 -hda /var/local/vdisk.img -snapshot&amp;quot;
g1= hosts.KVMguest(kvm_on_remote_host, qemu_options)
g1.wait_up()

print g1.run(&amp;quot;uname -a&amp;quot;).stdout

kernel= deb_kernel.DEBKernel()
kernel.get(&amp;quot;/home/foo/linux-2.6.21.3-6_2.6.21.3-6_amd64.deb&amp;quot;)

kernel.install(g1)
g1.reboot()

print g1.run(&amp;quot;uname -a&amp;quot;).stdout
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;"QEMU" Way&lt;/h4&gt;
&lt;p&gt;通常可以通过qemu 的-kernel -append -initrd 选项，这些选项可以指定虚拟机内核和磁盘镜像。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host= hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)

kvm_on_remote_host= kvm.KVM(remote_host)
kvm_on_remote_host.get(&amp;quot;/var/local/src/kvm-compiled.tar.gz&amp;quot;)
addresses=[{&amp;quot;mac&amp;quot;: &amp;quot;02:00:00:00:00:01&amp;quot;, &amp;quot;ip&amp;quot;: &amp;quot;10.0.0.1&amp;quot;})
kvm_on_remote_host.install(addresses, build=False, install_modules=False)

kernel= deb_kernel.DEBKernel()
kernel.get(&amp;quot;/home/foo/linux-2.6.21.3-6_2.6.21.3-6_amd64-noNeedForInitrd.deb&amp;quot;)
kernel_dir= kernel.extract(remote_host)

qemu_options= &amp;#39;-m 256 -hda /var/local/vdisk.img -snapshot -kernel &amp;quot;%s&amp;quot; -append &amp;quot;%s&amp;quot;&amp;#39; %(sh_escape(os.path.join(kernel_dir, kernel.get_image_name()[1:])), sh_escape(&amp;quot;root=/dev/hda1 ro console=tty0 console=ttyS0, 9600&amp;quot;),)

g1=hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g1.wait_up()

print g1.run(&amp;quot;uname -a&amp;quot;).stdout
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Parallel commands&lt;/h3&gt;
&lt;p&gt;Autoserv 可以通过subcommand.py中的parallel()和parallel_simple()并行运行命令。
这对于一次测试多台机器和client-server测试非常有用。这里给出一个netperf2 测试的例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_kernel(host, version, package):
    if host.run(&amp;quot;uname -r&amp;quot;).stdout.strip() != version:
    package.install(host)
    host.reboot()

def install_kvm(kvm_on_host_var_name, host, source, addresses):
    exec(&amp;quot;global %(var_name)s\n&amp;quot;
        &amp;quot;%(var_name)s= kvm.KVM(host)\n&amp;quot;
        &amp;quot;%(var_name)s.get(source)\n&amp;quot;
        &amp;quot;%(var_name)s.install(addresses)\n&amp;quot; % {&amp;quot;var_name&amp;quot;:kvm_on_host_var_name})

    remote_host1= hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)
    remote_host2= hosts.SSHHost(&amp;quot;192.168.1.2&amp;quot;)

    kernel= deb_kernel.DEBKernel()
    kernel.get(&amp;quot;/var/local/linux-2.6.21.3-3_2.6.21.3-3_amd64.deb&amp;quot;)

    host1_command= subcommand(check_kernel, [remote_host1, &amp;quot;2.6.21.3-3&amp;quot;, kernel])
    host2_command= subcommand(check_kernel, [remote_host2, &amp;quot;2.6.21.3-3&amp;quot;, kernel])

    parallel([host1_command, host2_command])

    install_kvm(&amp;quot;kvm_on_remote_host1&amp;quot;, remote_host1, &amp;quot;/var/local/src/kvm-33.tar.gz&amp;quot;, [{&amp;quot;mac&amp;quot;: &amp;quot;02:00:00:00:00:01&amp;quot;, &amp;quot;ip&amp;quot;: &amp;quot;10.0.0.1&amp;quot;}]
    qemu_options= &amp;quot;-m 256 -hda /var/local/vdisk.img -snapshot&amp;quot;
    gserver= hosts.KVMGuest(kvm_on_remote_host1, qemu_options)
    gserver.wait_up()

    at= autotest.Autotest()
    at.get(&amp;quot;/home/foo/autotest/client&amp;quot;)
    at.install(gserver)
    at.install(remote_host2)

    server_results_dir= &amp;quot;results-netperf-guest-to-host-far-server&amp;quot;
    client_results_dir= &amp;quot;results-netperf-guest-to-host-far-client&amp;quot;

    server_control_file= &amp;#39;job.run_test(&amp;quot;netperf2&amp;quot;, &amp;quot;%s&amp;quot;, &amp;quot;%s&amp;quot;, &amp;quot;server&amp;quot;, tag=&amp;quot;server&amp;quot;)&amp;#39; % (sh_escape(gserver.hostname), sh_escape(remote_host2.hostname),)
    client_control_file= &amp;#39;job.run_test(&amp;quot;netperf2&amp;quot;, &amp;quot;%s&amp;quot;, &amp;quot;%s&amp;quot;, &amp;quot;client&amp;quot;, tag=&amp;quot;client&amp;quot;)&amp;#39; % (sh_escapt(gserver.hostname),
    sh_escape(remote_host2.hostname),)

    server_command = subcommand(at.run, [server_control_file, server_results_dir, gserver])
    client_command= subcommand(at.run, [client_control_file, client_results_dir, remote_host2])

    parallel([server_command, client_command])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/21/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(二）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/23/autotest/"&gt;Autotest:Autotest-client Package(1)&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 22 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-22:2015/08/22/autotest/</guid><category>autotest</category></item><item><title>Autotest-Autotest Remote (Autoserv)(二）</title><link>http://king32783784.github.io/2015/08/21/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h3&gt;KVM支持&lt;/h3&gt;
&lt;p&gt;如前所述，Autoserv 支持控制虚拟机。这个对象设计的可以支持虚拟机管理/hypervisors。一开始，只支持kvm,为了支持KVM，你需要做：
    1.创建虚拟机，运行在虚拟层的机器
    2.创建KVM对象，通过get()指定源，KVM InstallableObject安装到指定的虚拟机。
    3.创建KVMGuest对象，需要指定做其他事情，KVM对象在上面已创建。
    4.使用KVMGuest对象运行一些其他类型的虚拟机命令，如改变内核，运行autotest&lt;/p&gt;
&lt;p&gt;可以通过查看server/kvm.py 和server/hosts/kvm_guest.py查看其他信息，尤其是KVM.install()的前面的函数和KVMGuest的函数构造。
下面给出一个Autoserv 控制文件的例子，第5行包括解析获取addresslist 列表，这个控制文件是由python实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host = hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)

kvm_on_remote_host = kvm.KVM(remote_host)
kvm_on_remote_host.get(&amp;quot;/var/local/src/kvm-33.tar.gz&amp;quot;)
addresses =[{&amp;quot;mac&amp;quot;: &amp;quot;02:00:00:00:00:%02x&amp;quot; %(num,), &amp;quot;ip&amp;quot;: &amp;quot;192.168.2.%d&amp;quot; % (num,)} for num in range(1, 32)]
kvm_on_remote_host.install(addreses)

qemu_options= &amp;quot;-m 256 -hda /var/local/vdisk.img -snapshot&amp;quot;
g = hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g.wait_up()

print g.run(&amp;quot;unme -a&amp;quot;).stdout.strip()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Compiling qemu_options&lt;/h3&gt;
&lt;p&gt;你需要指定KVM的源码，需要从http://sourceforge.net/project/showfiles.phpgroup_id=180599获取。当KVM对象安装，需要控制2个选项：build(默认）和 insert_modules（默认为True）.
如果build为true,Autoserv 会执行configure和make创建client和导入内核模块。 make install 永不会执行，否则会影响已经安装的系统。为了内核构建成功，需要将内核源码放到（/lib/modules/$(uname -r)/bulid. 如果build为flase,configure 和 make 已经执行了，二进制可以从源码文件夹中获取。还可以重新归档，如果你想让压缩包让get()获取。&lt;/p&gt;
&lt;p&gt;如果insert_modules为True，Autoserv会移除kvm模块，包括编译的。如果KVM对象侦测到，它会移除内核中的模块。同时，Autoserv会检查内核合适的模块去插入。如果qemu或qemu-system-x86_64曾经用过，就不再检查，直接使用。如果 insert_modules为False,假设运行的内核已经拥有KVM支持,就不会再进行模块操作。&lt;/p&gt;
&lt;h3&gt;Kernel Considerations&lt;/h3&gt;
&lt;p&gt;下面介绍一些内核配置项，为定制自己的内核做参考。&lt;/p&gt;
&lt;h4&gt;Host Kernel&lt;/h4&gt;
&lt;p&gt;CONFIG_HPET_EMULATE_RTC, KVM常见问题，rtc中断丢失，客户端响应慢
KVM, KVM_AMD, KVM_INTEL, 让内核支持这部分&lt;/p&gt;
&lt;h4&gt;Guest Kernel&lt;/h4&gt;
&lt;p&gt;Guest kernel没有具体的需求，只要能保证在qumu运行。许多发行内核上使用IDE和ide_generic驱动程序，以便与那些不是较新的libata，避免从/dev/hda的到/dev/sda的设备名称更改。可以将它编译成模块，需要的时候插入。&lt;/p&gt;
&lt;h4&gt;Disk Image Coniderations&lt;/h4&gt;
&lt;p&gt;镜像需要作为qemu的一个选项，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu_options= &amp;quot;-m 256 -hda /var/local/vdisk.img -snapshot&amp;quot;
g= hosts.KVMGuest(kvm_on_remote_host, qemu_options)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/var/local/vdisk.img 是磁盘镜像， -snapshot指定qumu不能修改image,更改会虚拟机关闭后取消。可以参考&lt;a href="http://wiki.qemu.org/Manual"&gt;QEMU文档&lt;/a&gt;来了解QEMU信息。&lt;/p&gt;
&lt;h4&gt;IP Address Configuration&lt;/h4&gt;
&lt;p&gt;有一些要对diskimage做一些设置，在kvm.py:install()设置，虚拟机操作系统必须配置为与对应的Mac IP配置其网络。 Autoserv只能通过qemu的控制虚拟机的MAC地址，但是它将试图通过其IP联系它。你需要在install(）实现map和IP的映射，还需要确保虚拟机启动后扔采用这个IP。如果你启动一个虚拟机，可以在image中设置IP。如果想启动多台虚拟机，可以通过DHCPserver分配或则选择和mac对应的IP。一种方式如debian系统下通过/etc/network/interfaces文件去设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto eth0
mapping eth0
    script /usr/local/bin/get-mac-address.sh
    map 02:00:00:00:00:01 vhost1
    map 02:00:00:00:00:02 vhost2

iface vhost1 inet static
    address 10.0.2.1
    netmask 255.0.0.0
    geteway 10.0.0.1
iface vhost2 inet static
    address 10.0.2.2
    netmask 255.0.0.0
    geteway 10.0.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/usr/local/bin/get-mac-address.sh :&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C

&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;mac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/sbin/ifconfig &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$iface&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -n -e &lt;span class="s1"&gt;&amp;#39;/^&amp;#39;&lt;/span&gt;.*HWaddr &lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;:xdigit:&lt;span class="o"&gt;]]&lt;/span&gt;*&lt;span class="se"&gt;\)&lt;/span&gt;.*/&lt;span class="o"&gt;{&lt;/span&gt;s//&lt;span class="se"&gt;\1&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt;y/ABCDEF/abcdef/&lt;span class="p"&gt;;&lt;/span&gt;p&lt;span class="p"&gt;;&lt;/span&gt;q&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;which=&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s1"&gt;while read testmac scheme; do&lt;/span&gt;
&lt;span class="s1"&gt;    if [&amp;quot;$which&amp;quot; ]; then continue;fi&lt;/span&gt;
&lt;span class="s1"&gt;    if [&amp;quot;$mac&amp;quot; = &amp;quot;$(echo &amp;quot;$testmac&amp;quot; | sed -e &amp;#39;&lt;/span&gt;y/ABCDEF/abcdef/&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]; then which=&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;; fi&lt;/span&gt;
&lt;span class="s2"&gt;done&lt;/span&gt;

&lt;span class="s2"&gt;if [&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$which&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]; then echo &lt;/span&gt;&lt;span class="nv"&gt;$which&lt;/span&gt;&lt;span class="s2"&gt;; exit 0; fi&lt;/span&gt;
&lt;span class="s2"&gt;exit 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;/etc/network/interfaces文件需要重复编写，替换，可以通过python脚本实现，调整map_entry, host_entry, first_value和 last_value:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot; #This file describes the network interfaces available on your system&lt;/span&gt;
&lt;span class="s2"&gt;# and how to activate them. For more infomation, see interfaces(5).&lt;/span&gt;

&lt;span class="s2"&gt;# The loopback network interface&lt;/span&gt;
&lt;span class="s2"&gt;auto lo&lt;/span&gt;
&lt;span class="s2"&gt;iface lo inet loopback&lt;/span&gt;

&lt;span class="s2"&gt;# The primary network interface&lt;/span&gt;
&lt;span class="s2"&gt;auto eth0&lt;/span&gt;
&lt;span class="s2"&gt;mapping eth0&lt;/span&gt;
&lt;span class="s2"&gt;    script /usr/local/bin/get-mac-address.sh&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;map_entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;    map 00:1a:11:00:00:&lt;/span&gt;&lt;span class="si"&gt;%02x&lt;/span&gt;&lt;span class="s2"&gt; vhost&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;host_entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;iface vhost&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; inet static&lt;/span&gt;
&lt;span class="s2"&gt;    address 10.0.2.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;    netmask 255.0.0.0&lt;/span&gt;
&lt;span class="s2"&gt;    gateway 10.0.0.1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;

&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;last_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;map_entry&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;host_entry&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;SSH Authentication&lt;/h4&gt;
&lt;p&gt;类似于SSHHost，也需要设置免密码登陆。&lt;/p&gt;
&lt;h4&gt;Serial Console&lt;/h4&gt;
&lt;p&gt;虽然对于Autoserv本身不是必要的，但对于启动qumu图形很重要，需要进行初始化。qemu的可以模拟来自视频卡的显示，也可以模拟一个串行端口。 
* grub 配置文件（/boot/grub/menu.lst)
    serial --unit=0 --speed=9600 --word=8 --parity=no --stop=1
    terminal --timeout=3 serial console&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kernel启动选项 
    console=tty0 console=ttyS0,9600&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc/inittab
    T0:23:respawn:/sbin/getty -L ttyS0 9600 vt100&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(一）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/22/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)(三）&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 21 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-21:2015/08/21/autotest/</guid><category>autotest</category></item><item><title>Autotest-Autotest Remote (Autoserv)（一）</title><link>http://king32783784.github.io/2015/08/20/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;Autoserv 是“自动化机器控制“的框架
Autoserv 目的是控制机器，它可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电源管理&lt;/li&gt;
&lt;li&gt;安装内核&lt;/li&gt;
&lt;li&gt;修改bootloader
*　运行任意命令&lt;/li&gt;
&lt;li&gt;运行Autotest Local(客户端）测试&lt;/li&gt;
&lt;li&gt;传输文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被控制的机器可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本机&lt;/li&gt;
&lt;li&gt;远程机器（通过ssh 和　conmux)&lt;/li&gt;
&lt;li&gt;虚拟机(通过ＫＶＭ）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;控制文件&lt;/h2&gt;
&lt;p&gt;类似于autotest,Autoserv同样使用控制文件。这些控制文件和autotest使用不同的命令，但是像autotest一样包含一些内部的可以调研python解释器的功能。&lt;/p&gt;
&lt;p&gt;这里有一个控制文件的例子，用来控制远程host安装.dep内核。若文件存在server/目录并且命名为example.control,可以在server/目录通过./autotest-remote example.control调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host = host.SSHHost(&amp;quot;192.168.1.1&amp;quot;)
print remote_host.run(&amp;quot;uname -a&amp;quot;).stdout

kernel = deb_kernel.DEBKernel()
kernel.get(&amp;quot;/var/local/linux-2.6.22.deb&amp;quot;)

print kernel.get_version()
print kernel.get_image_name()
print kernel.get_initrd_name()

kerne.install(remote_host)

remote_host.reboot()

print remote_host.run(&amp;quot;uname -a&amp;quot;).stdout
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hosts&lt;/h2&gt;
&lt;p&gt;"Host"类是Autoserv控制文件的操作对象。这些Ｈost类通过ssh/conmux或virtual机控制机器。这些代码结构支持添加其他类型的hosts.如果想添加
其他类型的host，需要确保添加到server/hosts/&lt;strong&gt;init&lt;/strong&gt;.py文件。&lt;/p&gt;
&lt;h3&gt;Host的主要方法&lt;/h3&gt;
&lt;p&gt;以下是最常用的host的方法。每个类型的host都需要包含这些方法，起码支持列表选项中的方法。特定的host需要支持更多的命令和选项。关于这些信息，可以查看　
ａｕｔｏｔｅｓｔ子目录server/client中源码文件。下面的列表只是一个基本的汇总，不是那些源码文件的功能的头文件。特别是，需要查看一下server/hosts/ssh_host.py文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run(command)&lt;/li&gt;
&lt;li&gt;reboot()&lt;/li&gt;
&lt;li&gt;get_file(source, dest)&lt;/li&gt;
&lt;li&gt;send_file(source, dest)&lt;/li&gt;
&lt;li&gt;get_tmp_dir&lt;/li&gt;
&lt;li&gt;is_up()&lt;/li&gt;
&lt;li&gt;wait_up(timeout)&lt;/li&gt;
&lt;li&gt;wait_down(timeout)&lt;/li&gt;
&lt;li&gt;get_num_cpu()&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CmdResult　类&lt;/h4&gt;
&lt;p&gt;run()调用的返回值是一个CmdResult类。该类包含了有关命令和其执行信息。这个类的定义和文档信息可以在server/hosts/base_classes.py文件中查看。
CmdResult类可以打印并且输出其所有的信息。它的每个字段都可以单独访问。这个字段的列表是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command: 包含命令行本身的字符&lt;/li&gt;
&lt;li&gt;exit_status: 进程整数退出代码&lt;/li&gt;
&lt;li&gt;stdout:包含程序标准输出的字符串&lt;/li&gt;
&lt;li&gt;stderr: 包含程序错误输出的字符串&lt;/li&gt;
&lt;li&gt;duration: 程序运行的持续时间&lt;/li&gt;
&lt;li&gt;aborted:　导致终端命令中止的信号（０）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Host的主要类型&lt;/h3&gt;
&lt;h4&gt;SSHHost&lt;/h4&gt;
&lt;p&gt;SSHHost是非常重要和实用的host类型。它可以通过ssh会话控制远程机器。它支持所有的hosts的基本方法和run(）功能，支持超时。SSHHost通过
ssh运行命令，通过scp进行文件传输。&lt;/p&gt;
&lt;p&gt;如果想采用SSHHost，必须设置远程机器无密码登陆，如通过公共秘钥。一个SSHHost对象建立在指定的host name,任意的用户名称和端口号。&lt;/p&gt;
&lt;h4&gt;ConmuxSSHHost&lt;/h4&gt;
&lt;p&gt;ConmuxSSHHost是SSHHost的扩展。它通过Conmux来控制远程机器。可以通过hardreset()方法进行硬复位。&lt;/p&gt;
&lt;h4&gt;SiteHost&lt;/h4&gt;
&lt;p&gt;Site host 是一个空类，可以添加特殊的方法或支持所以类型hostts的属性。它定义在server/hosts/site_host_py文件中，不过可能是空的。
创建这样的一个类的灵感来自于如更新bios，侦测硬件版本或一些对普通用户不常用的操作。&lt;/p&gt;
&lt;h4&gt;KVMGuest&lt;/h4&gt;
&lt;p&gt;KVMGuest 表示可以运行程序的KVM 虚拟机。　它必须绑定到其他host, 这些机器实际上运行于虚拟层。KVMGuest和SSHHost非常类似，但它可以通过hardreset方法（Guest中）调用hypervisor的命令去实现”硬复位“.可以通过查看&lt;a href=""&gt;KVM section&lt;/a&gt;查看更多的KVM和KVMguest信息。&lt;/p&gt;
&lt;h4&gt;Bootloader&lt;/h4&gt;
&lt;p&gt;Boottool 是一个查询和修改bootloader文件的perl脚本。Autoserv提供Bootloader类，是围绕boottool的包装。Ａutoserv 在需要时会第一时间将boottool脚本自动复制到一个临时目录。可以通过查看server/hosts/bootloader.py查看支持方法的信息。其中最重要的一个方法是add_kernel()&lt;/p&gt;
&lt;p&gt;当添加了一个新内核是，boottool会复用上一个内核的命令行及配置，来实现一个新的启动项菜单。&lt;/p&gt;
&lt;h2&gt;InstallableObject&lt;/h2&gt;
&lt;p&gt;InstallableObject　表示一个可以再host上安装软件包。通过下面两个方法实现：
&lt;em&gt; get(location)
&lt;/em&gt; install(host)&lt;/p&gt;
&lt;p&gt;get()表示获取安装包，它可以获取多种类型保存位置的包：
&lt;em&gt; 本地目录
&lt;/em&gt; URL地址
&lt;em&gt; python文件对象
&lt;/em&gt; 如果参数不是上述类型，get()会默认将获取的内容当为包内容&lt;/p&gt;
&lt;p&gt;get()获取的软件包，通常会放到一个临时目录。这种方式可以一次获取，安装到多台hosts上面。install()会安装包，当通常会装到一个临时目录。&lt;/p&gt;
&lt;h2&gt;Autotest Support&lt;/h2&gt;
&lt;p&gt;Autoserv包含autotest的一些具体支持。它可以安装autotest到一个客户端，可以运行客户端的测试并且取回测试结果。这是通过autotest和运行server/autotest.py中的
类实现的。Auotest对象是一个installableＯbject.要想使用它，必须：
&lt;em&gt; 指定来源后通过get()获取，autotest对象有点特别。如果没有指定任何来源，将会自动从autotest　ＳＶＮ库自动获取。而且会在目标主机中完成。
&lt;/em&gt; 当通过install()安装时，autotest会查找一个/etc/autotest.conf的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autodir=/usr/local/autotest/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;run()运行一个控制文件的语法如下：run(control_file, results_dir, host).control_file 参数支持get()和intallableObject相同类型的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个Autoserv控制文件和运行Autotest job的例子。测试结果会传输到server的“job_results"目录下。
    remote_host = hosts.SSHHost("192.168.1.1")&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;at = autotest.Autotest()
at.get(&amp;quot;/var/local/autotest/client&amp;quot;)
at.install(remote_host)

control_file = &amp;quot;&amp;quot;&amp;quot;
job.profilers.add(&amp;quot;oprofile&amp;quot;, events= [&amp;quot;CPU_CLK_UNHALED:8000&amp;quot;])
job.run_test(&amp;quot;linux_stress&amp;quot;)
&amp;quot;&amp;quot;&amp;quot;

results_dir = &amp;quot;job_results&amp;quot;

at.run(control_file, results_dir, remote_host)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Kernel Objects&lt;/h2&gt;
&lt;p&gt;Kernel Objects 是另一个类型的InstallableObjects.计划支持内核源码编译及.rpm和.deb包安装。最初，只支持.deb格式内核。现在已经支持源码格式的内核。
kernels支持依赖以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get(location)
    用户installableObject方法&lt;/li&gt;
&lt;li&gt;install(host, extra arguments to boottool).当一个内核安装在host后，会使用bootbool使它自己编程默认的启动内核。如果需要指定特别的内核参数，
需要可以添加，并传递给add_kernel()方法用来启动内核。&lt;/li&gt;
&lt;li&gt;get_version()&lt;/li&gt;
&lt;li&gt;get_image_name()&lt;/li&gt;
&lt;li&gt;get_image_name()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，可以通过查看源码了解更多详细信息，如server/deb_kernel.py&lt;/p&gt;
&lt;p&gt;DEBKernels　有一个额外的方法，host直接提取内核。这个方法可以直接将包解压到指定的host.这样可以不经过安装，可以直接访问包的内容。这个功能比较常用的地方就是
kvm和qumu的　-kernel选项。&lt;/p&gt;
&lt;p&gt;下面给出一个Autoserv安装内核的控制文件的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rh = hosts.SSHHost(&amp;quot;192.168.1.1&amp;quot;)

print rh.run(&amp;quot;uname -a&amp;quot;).stdout

kernel = deb_kernel.DEBKernel()
kernel.get(&amp;quot;/var/local/linux-2.6.22.deb&amp;quot;)

kernel.install(rh)

rh.reboot()

print rh.run(&amp;quot;uname -a&amp;quot;).stdout
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个类似的例子使用RPM形式的kernel，并让指定启动参数（autoserv -m host1, host2 install-rpm):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not machines:
    raise &amp;quot;Specify the machines to run on via the -m flag&amp;quot;
hosts = [hosts.SSHHost(h) for h in machines]

kernel = rpm_kernel.RPMKernel()
kernel.get(&amp;#39;/stuff/kernels/kernel-smp-2.6.18.x86_64.rpm&amp;#39;)

for host in hosts:
    print host.run(&amp;quot;uame -a&amp;quot;).stdout
    kernel.install(host, default=True)
    host.reboot()
    print host.run(&amp;quot;uname -a&amp;quot;).stdout

print &amp;quot;Done&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;未完待续&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/19/autotest/"&gt;Autotest：Autotest-others&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/21/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)(二）&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 20 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-20:2015/08/20/autotest/</guid><category>autotest</category></item><item><title>Autotest-others</title><link>http://king32783784.github.io/2015/08/19/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;执行外部测试&lt;/h2&gt;
&lt;p&gt;autotest可以像执行自身测试一样执行外部测试．&lt;/p&gt;
&lt;h3&gt;执行测试&lt;/h3&gt;
&lt;p&gt;一个下载的测试并触发，标准方式是通过run_test方法执行，需要指定tar包地址．
　　
    job.run_test('http://www.example.com/~someone/somewhere/test.tar.bz2')&lt;/p&gt;
&lt;p&gt;这样就会执行下载，安装，解压测试．&lt;/p&gt;
&lt;h3&gt;构建外部下载测试&lt;/h3&gt;
&lt;p&gt;外部下载的测试包含bz2包和测试目录．
&lt;em&gt; 1．包名　my_test.tar.bz2
&lt;/em&gt; 2. 测试脚本　my_test.py
* 3.　测试脚本中的以本身命名的类　class my_test(test.test):&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest_lib.client.bin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;my_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INIT&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RUN&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -C example_test -jcvf my_test.tar.bz2 .
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Autotest 的keyval文件&lt;/h2&gt;
&lt;p&gt;在ａｕｔｏｔｅｓｔ的结果目录中有一些keyval文件，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key1=value1
key2=value2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;测试结果中错误信息&lt;/h2&gt;
&lt;h3&gt;debug&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debug/

├── build_log.gz
├── client.DEBUG
├── client.ERROR
├── client.INFO
└── client.WARNING
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;autotest local 还有一些小的细节问题，不再一一介绍．&lt;/p&gt;
&lt;p&gt;下篇将开始介绍Remote (Former Server)．&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/18/autotest/"&gt;Autotest：Autotest-add test&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-19:2015/08/19/autotest/</guid><category>autotest</category></item><item><title>Autotest-Linux distribution detection</title><link>http://king32783784.github.io/2015/08/18/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;linux发行版检测&lt;/h2&gt;
&lt;p&gt;Autotest有个功能,就是让测试清晰了解到它运行在什么样的发行版上.
这个功能是由probe类群的实现和注册实现的.
这些probe类可以检查运行的系统的信息,比如发行版的release文件,二进制信息(如包管理)等.&lt;/p&gt;
&lt;h3&gt;快速检查发行版&lt;/h3&gt;
&lt;p&gt;autotest.client.shared.distro 模块提供一些APIS,最简单的就是使用detect().
它的用法简单命了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;
    &lt;span class="n"&gt;detected_distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以返回发行版检测的结果,但是不太适用于&lt;strong&gt;UNKNOWN_DISIRO&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;release&lt;/li&gt;
&lt;li&gt;arch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;detected_distro = distro.detect()
&amp;gt;&amp;gt;&amp;gt;print detected_distro.name
redhat
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;未知发行版&lt;/h3&gt;
&lt;p&gt;当检测机制不能检测到发行版,仍会返回一个LinuxDistro实例,但是它的name,version等信息比较特殊.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; autotest.clientshared.distro.UNKNOWN_DISIRO
 =&amp;lt;LinuxDistro: name=unnknown, version=0, realease=0, arch=unknown&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;意味着,这个发行版不能找到对应的匹配信息.&lt;/p&gt;
&lt;h3&gt;编写一个发行版probe&lt;/h3&gt;
&lt;p&gt;为目标发行版编写一个probe最简单的方式就是使用现有的Probe类的功能.
如果,不打算采用Probe的话,也应该尽量继承probe类,或则提供类似的接口.&lt;/p&gt;
&lt;h4&gt;检查发行版的名字&lt;/h4&gt;
&lt;p&gt;最简单的探针就是查看存在的文件并返回发行版的名字.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReadHatProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/redhat-realease&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redhat&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要使用probe,需要先注册:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;
    &lt;span class="n"&gt;distro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个有效的例子，但只有发行版的名字,通常你的目标应该是更多的信息，如版本号。&lt;/p&gt;
&lt;h4&gt;侦测发行版的名字和版本&lt;/h4&gt;
&lt;p&gt;如果,你需要侦测发行版的版本信息,可以使用Probe类的 Probe.CHECK_VERSION_REGEX&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Probe.CHECK_VERSION_REGEX=None
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;注册自己的probes&lt;/h4&gt;
&lt;p&gt;Autotest不仅仅可以使用自带的probes,而且可以添加自己的probes用于系统的侦测.
注册的简单方式就剩调用register_probe():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autotest.client.shared.distro.register_probe(probe_class)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意,要注册的自己的probes必须是probe的子类.&lt;/p&gt;
&lt;h3&gt;API参考&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LinuxDistro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class autotest.client.shared.distro.LinuxDistro(name, version, release, arch) &lt;a href="#linuxdistro"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;收集linux发行版信息的简单方式.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class autotest.client.shared.distro.Probe  &lt;a href="#Probe"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CHECK_FILE=None&lt;/p&gt;
&lt;p&gt;CHECK_FILE_CONTAINS=None&lt;/p&gt;
&lt;p&gt;CHECK_FILE_DISTRO_NAME =None&lt;/p&gt;
&lt;p&gt;CHECK_VERSION_REGEX = None&lt;/p&gt;
&lt;p&gt;Check_name_for_file()&lt;/p&gt;
&lt;p&gt;check_name_for_file_contains()&lt;/p&gt;
&lt;p&gt;check_release()&lt;/p&gt;
&lt;p&gt;check_version()&lt;/p&gt;
&lt;p&gt;get_distro()&lt;/p&gt;
&lt;p&gt;name_for_file()&lt;/p&gt;
&lt;p&gt;name_for_file_contains()&lt;/p&gt;
&lt;p&gt;release()&lt;/p&gt;
&lt;p&gt;version()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;register&lt;/strong&gt;_&lt;strong&gt;probe()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;autotest.client.shared.distro.register_probe(probe_class) &lt;a href="#register_probe"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册probe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;detect()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;autotest.client.shared.distro.detect() &lt;a href="#detect"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尝试检测这台机器上的Linux发行版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source code for autotest.client.shared.distro&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This module provides the client facilities to detect the Linux Distribution&lt;/span&gt;
&lt;span class="sd"&gt;    it&amp;#39;s running under.&lt;/span&gt;

&lt;span class="sd"&gt;    This is a replacement for the get_os_vendor() function from the utils modules.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;


    &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LinuxDistro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;UNKNOWN_DISTRO_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;UNKNOWN_DISTRO_VERSION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;UNKNOWN_DISTRO_RELEASE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;UNKNOWN_DISTRO_ARCH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;Probe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;register_probe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;detect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# [__all__用法]()&lt;/span&gt;

    &lt;span class="c1"&gt;# pylint: disable=R0903&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;LinuxDistro&lt;/strong&gt; &lt;span id = "linuxdistro"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Simple collection of infomation for a Linux Distribution&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            Initalizes a new Linux Distro&lt;/span&gt;
&lt;span class="sd"&gt;            :param name: 一个简单的区别于其他发型版的名字&lt;/span&gt;
&lt;span class="sd"&gt;            :type name : 字符&lt;/span&gt;
&lt;span class="sd"&gt;            :parm vesion:发行版的主版本.&lt;/span&gt;
&lt;span class="sd"&gt;            :type vesion: 字符&lt;/span&gt;
&lt;span class="sd"&gt;            :param release: 发行版的发型号或子版本.&lt;/span&gt;
&lt;span class="sd"&gt;            :type vesion:字符&lt;/span&gt;
&lt;span class="sd"&gt;            :parm arch: 发行版的平台架构信息,如interl/amd 32bit/64bit&lt;/span&gt;
&lt;span class="sd"&gt;            :type arch: 字符&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# [Difference between __str__ and __repr__ in Python](http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;LinuxDistro: name=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, version=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, release=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, arch=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;UNKNOWN_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;# 定义未知发行版默认信息&lt;/span&gt;

    &lt;span class="c1"&gt;#: 未知发行版,反馈以下信息&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNKNOWN_DISTRO_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Probe&lt;/strong&gt; &lt;span id = "Probe"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        探测机器信息并且确认是否存在的发行版&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;#:指定运行机器上发行版中的文件.&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:设置指向文件的检查内容,默认为None,只检查是否存在&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:如果文件指定,指定发行版名字&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:指定发行版版本&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            查找一个文件并返回distro.确认是否指定了特定文件&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            获取distro名称,如果&amp;quot;CHECK_FILE&amp;quot;设置并且存在&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            该类查找text并返回distro.&lt;/span&gt;
&lt;span class="sd"&gt;            The conditions that must be true include the file that identifies the&lt;/span&gt;
&lt;span class="sd"&gt;            distro file being set (:attr:`CHECK_FILE`), the text to look for&lt;/span&gt;
&lt;span class="sd"&gt;            inside the distro file (:attr:`CHECK_FILE_CONTAINS`) and the name&lt;/span&gt;
&lt;span class="sd"&gt;            of the distro to be returned (:attr:`CHECK_FILE_DISTRO_NAME`)&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;             获取distro如果CHECK_FILE指定并且有效&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;             检查在文件中是否找到regex并返回distro&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            返回匹配备注文件中的版本信息&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;version_file_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_file_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
             &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;             返回distro的版本信息&lt;/span&gt;
&lt;span class="sd"&gt;             &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
             &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
             &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            检查是否存在符合条件的版本号&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;             返回 distro的版本号&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
             &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;
             &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;            返回 class:&amp;#39;LinuxDistro&amp;#39; probe detected&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
            &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt;

            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_release&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="c1"&gt;# 实在想不到比这更好的方式&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# 名字是首先要侦测的.它可以告诉我们是哪个发行版.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StdLibProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;         Probe是使用python库内建的probe.&lt;/span&gt;
&lt;span class="sd"&gt;         这个Probe得分比较低,作为备用probe.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
            &lt;span class="n"&gt;realease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKONWN_DISTRO_RELEASE&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKONWN_DISTRO_ARCH&lt;/span&gt;

            &lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_codename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_name&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;d_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version&lt;/span&gt;
                &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_release&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;

             &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;

             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        红帽发行版版本检查&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/redhat=release&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Red Hat&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redhat&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Red Hat Enterprise Linux Server release(\d{1,2})\.(\d{1,2}).*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CentosProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Centos系统检测&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/redhat-release&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CentOS&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;centos&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CentOS release(\d{1,2})\.(\d{1,2}).*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FedoraProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Probe with version checks for Fedora systems&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/fedora-release&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fedora&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fedora&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fedora release (\d{1,2}).*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebianProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Simple probe with file checks for Debian systems&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/debian-version&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debian&amp;#39;&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UbuntuProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Simple probe with file checks for Ubuntu systems&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/os-release&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ubuntu&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;VERSION_ID=&amp;quot;(\d+.\d+)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuseProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/SuSE-release&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sles&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SUSE.*\nVERSION = (.*)\nPATCHLEVEL = (.*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;#: 已注册probes列表&lt;/span&gt;
    &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;register_probe&lt;/strong&gt; &lt;span id = "register_probe"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        注册probe&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CentosProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FedoraProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DebianProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UbuntuProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuseProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StdLibProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;detect&lt;/strong&gt;  &lt;span id = "detect"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        尝试在机器上侦测发行版&lt;/span&gt;
&lt;span class="sd"&gt;　　    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;probe_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;didtro_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probe_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distro_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;distro_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;probe_instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dostro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        发行版最低发行要求&lt;/span&gt;
&lt;span class="sd"&gt;　　　　 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;min_release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_version&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_release&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/17/autotest/"&gt;Autotest：Autotest-Using and developing job profilers&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/19/autotest/"&gt;Autotest:Autotest-others&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 18 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-18:2015/08/18/autotest/</guid><category>autotest</category></item><item><title>Autotest-Using and developing job profilers</title><link>http://king32783784.github.io/2015/08/17/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;使用和添加测试分析器&lt;/h2&gt;
&lt;p&gt;添加一个分析器和添加一个测试项目类似.每个分析器都有自己的子目录(client/profilers或你可以查看profilers/),一个标准例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个控制文件. profilers/myprofiler/control&lt;/li&gt;
&lt;li&gt;分析器控制脚本. profilers/myprofiler.py&lt;/li&gt;
&lt;li&gt;分析器的源码(如果不仅仅是控制脚本)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看一下已有的分析器. autotest提供readprofile,尽管这不是个最简单的方式,但是能够看到你想了解的全部信息.readprofile支持编译近内核.&lt;/p&gt;
&lt;p&gt;控制文件非常简单,像这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.profilers.add(&amp;#39;readprofile&amp;#39;)
job.run_test(&amp;#39;sleeptest&amp;#39;, 1)
job.profilers.delete(&amp;#39;readprofile&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只是说明"请再以下测试中使用readprofile".一次测试,如果想添加多个分析器,可以多次调用profilers.add.&lt;/p&gt;
&lt;p&gt;还有源码包"util-linux-2.12r.tar.bz2",将会解压到src/.python控制脚本将定义,分析器要做的大部分事情.通过查看readprofile.py,我们可以看到
profiler主类,定义版本.可以看到以下个函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup()  它会在第一次用profiler时执行,并且编译源码.&lt;/li&gt;
&lt;li&gt;intialize() 将在导入profiler时执行&lt;/li&gt;
&lt;li&gt;start() 启动分析&lt;/li&gt;
&lt;li&gt;stop() 停止分析&lt;/li&gt;
&lt;li&gt;report() 利用profiler数据生成报告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来 看一下这些方法的细节.&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;setup(),在版本变动之前,每次测试只执行一次.它会解压util-linux-2.12r.tar.bz2至src/,并且编译.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#http://www.kernel.org/pub/linux/util-linux/util-linux-2.12r.tar.bz2
def setup(self, tarball = &amp;#39;util-linux-2.12r.tar.bz2&amp;#39;):
    self.tarball = unmap_url(self.bindir, tarball, self.tmpdir)
    extract_tarball_to_dir(self.tarball, self.srcdir)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释信息告诉我们去哪得到源码.函数定义的参数,定义了使用什么版本的源码.接下来,使用unmap_url下载源码,并且返回一个源码的保存路径.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;os.chdir(self.srcdir)
system(&amp;#39;./configure&amp;#39;)
os.chdir(&amp;#39;sys-utils&amp;#39;)
system(&amp;#39;make readprofile)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先是切换目录到self.srcdir.切换后,执行./configure,然后执行编译.这里使用的system()(不是os.system(),system()是一个包装后的os.system()).如果返回值
不是0,它将会自动抛出异常.&lt;/p&gt;
&lt;h3&gt;Initialize&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def initialize(self):
    try:
        system(&amp;#39;grep -iq&amp;quot; profile = &amp;quot;/proc/cmdline&amp;quot;)
    except:
        raise CmdError, &amp;#39;readprofile not enabled&amp;#39;

self.cmd = self.srcdir + &amp;#39;/sys-utils/readprofile&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它会在我们导入profiler后执行,用来检查 readprofile是否使能.&lt;/p&gt;
&lt;h3&gt;Start&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def start(self, test):
    system(self.cmd + &amp;#39;-r&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动profiler, 只是执行readprofile -r&lt;/p&gt;
&lt;h3&gt;Stop&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def stop(self, test):
    # There&amp;#39;s no real way to stop readprofile, so we stash the 
    # rad data at this point instead. BAD EXAMPLE TO COPY!;-)
    self.rawprofile = test.profdir + &amp;#39;/profile.raw&amp;#39;
    print &amp;quot;STOP&amp;quot;
    shutil.copyfile(&amp;#39;/proc/profile&amp;#39;, self.rawprofile)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般的话,只运行readprofile --stop即可.但是如果启用的多个分析器,我们这样做为了区分每个的分析数据,使他们不相互影响.&lt;/p&gt;
&lt;h3&gt;Report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def report(self, test):
    args = &amp;#39; -n&amp;#39;
    args += &amp;#39; -m&amp;#39; + get_systemmap()
    args += &amp;#39; -p&amp;#39; + self.rawprofile
    cmd = self.cmd + &amp;#39; &amp;#39; + args
    txtprofile = test.profdir + &amp;#39;/profile.text&amp;#39;
    system(cmd + &amp;#39; | sort -nr &amp;gt; &amp;#39; + txtprofile)
    system(&amp;#39;bzip2&amp;#39; + self.rawprofile)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将分析数据转成txt. 我们需要找到kernel的Sytem.map和用户空间产生的结果(a test file).我们将结果保存在test子目录下的profiling/,这个目录在set up时已自动创建.&lt;/p&gt;
&lt;h3&gt;添加自己的profiler&lt;/h3&gt;
&lt;p&gt;只需要在profilers下创建一个新目录,然后添加自己的控制文件,源码和控制脚本.最简单的方式是直接复制已有的readprofile.py为mytest.py,并且修改顶部的类名.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/16/autotest/"&gt;Autotest：Autotest-add test&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/18/autotest/"&gt;Autotest:Autotest-Linux distribution detection&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 17 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-17:2015/08/17/autotest/</guid><category>autotest</category></item><item><title>Autotest-add test</title><link>http://king32783784.github.io/2015/08/16/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;测试模块开发&lt;/h2&gt;
&lt;p&gt;测试模块必需是独立的单元，包含测试需要的所有内容（除了调用测试框架的）&lt;/p&gt;
&lt;p&gt;测试模块需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以跨多硬件架构&lt;/li&gt;
&lt;li&gt;可以支持不同的发行版&lt;/li&gt;
&lt;li&gt;至少一个维护者&lt;/li&gt;
&lt;li&gt;提供一个默认的简单例子&lt;/li&gt;
&lt;li&gt;对自己目录外的东西不做修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;添加测试项&lt;/h2&gt;
&lt;p&gt;增加一个测试项，可能是最容易的开发工作了．&lt;/p&gt;
&lt;p&gt;每一个测试项都有一个自己的子目录（client 端的是client/tests,server端的是server/tests),一个标准的目录包括
&lt;em&gt; 一个control 文件（tests/mytest/control)
&lt;/em&gt; 一个测试包装脚本（tests/mytest/mytest.py)
* 如果不仅仅是python脚本中实现的，还需要补充测试源码&lt;/p&gt;
&lt;p&gt;可以查看已有的测试，比如tests/dbench.首先包括测试目录tests/dbench,测试控制脚本dbench.py,  包括其中命名为dbench的类．这些这新开发的测试中
也必须要有．&lt;/p&gt;
&lt;p&gt;control文件至少是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test(&amp;#39;dbench&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子只包含了基本的参数，通过这个去了解一些新测试项的基本的设置，随后可以自己扩展其他的东西．&lt;/p&gt;
&lt;p&gt;目录下同样有个测试工具源码包dbench-3.04.tar.gz,随后会解压源码在src／
大多要执行的测试都包括在python脚本．可以看一下dbench.py.你会看到继承至test类，并且定义版本．你可以看到４个功能：
&lt;em&gt; initialize() -这个是每个测试前执行的，而且每次都要执行．
&lt;/em&gt; setup()- 这个会在第一次测试时执行，并且会进行源码的编译
&lt;em&gt; run_once()- 可以调用job.run_test N 次，其中Ｎ是通过run_test的iterations参数指定的.它同时也会启动分析器,如果你已经使能了一些分析器
&lt;/em&gt; postprocess_iteration() -此处理由测试迭代产生的任何结果，并写出来变成KEYVAL。 它一般不要求的分析迭代．&lt;/p&gt;
&lt;p&gt;测试结果输出一个PASS,你可以抛出一个异常，当一个测试失败，警告，或ｅｒｒｏｒ．绝大数出错时，ｐｙｔｈｏｎ都会抛出一个异常．所以不必担心这个，你可以处理之外的一些事情．下面说一下这些funtions的细节．
&lt;strong&gt;setup&lt;/strong&gt;
一次测试需要执行一次的setup.除非版本变动，不然只允许一次．在本文的例子中，解压dbench-3.04.tar.gz至src/,并且进行编译．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#http://samba.org/ftp/tridge/dbench/dbench-3.04.tar.gz
def setup(self, tarball=&amp;#39;dbench-3.04.tar.gz&amp;#39;):
    tarball = utils.unmap_url(self.bindir, tarball, self.tmpdir)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释告诉我们测试程序源码的下载地址．函数开头定义了源码包的名字（你可以通过不同control文件采用不同源码版本）最后，采用unmap_url(重写的url),它会下载源码，并返回localｐａｔｈ．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils.extract_taball_to_dir(tarball, self.srcdir)
os.chdir(self.srcdir)
utils.system(&amp;#39;./configure&amp;#39;)
utils.system(&amp;#39;make&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解压源码到指定目录self.srcdir.然后切换目录src.然后运行./configure; make 去建立测试环境;
我们使用了本地的system(),而不是os.system&lt;/p&gt;
&lt;p&gt;如果返回值不是0,会自动抛出一个异常.
除了编译源码包外,你可以通过software_manager模块去进行系统依赖包的安装.
如何使用?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;software_manager&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;software_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SoftwareManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;run_once&lt;/strong&gt;
它是实际执行测试的.核心只是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.results.append(utils.system_output(cmd))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行dbench,输出到self.results。 需要记录测试记录,以便以后进行结果处理.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;postprocess_iteration&lt;/strong&gt;
对于性能基准,我们希望产生一个键值文件key=value ,来描述运行的情况.key只是一个字符,值是整点或浮点值.比如dbench
只有两个参数,"throughout","nprocs".这个函数,每次iteration调用一次.最后会出现一个文件结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;throughout = 217
nprocs = 4
throughout =220
nprocs = 4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其他方法&lt;/h3&gt;
&lt;p&gt;这些方法没有用在dbench,但是可以进行添加
&lt;strong&gt;warmup&lt;/strong&gt;
在正式性能测试前,可以进行一次验证测试,确保结果有效;可以在设置之后,进行调用job.run_test来执行一次测试.
&lt;strong&gt;cleanup&lt;/strong&gt;
测试后的清理工作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;execute&lt;/strong&gt;
通过调用warmup, run_once,postprocess用于测试.提供的基本的test类已实现了支持使能分析器和并行运行.如果需要支持自定义行为,就需要重写.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加自己的测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只需创建测试下一个新的子目录，并添加自己的控制文件，源代码和包装。 比较简单的做法是,复制dbench.py ​​为mytest.py ,然后对它进行编辑.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/15/autotest/"&gt;Autotest：Autotest-Control file specification&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/17/autotest/"&gt;Autotest:Using and developing job profilers&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-16:2015/08/16/autotest/</guid><category>autotest</category></item><item><title>Autotest-Control file specification</title><link>http://king32783784.github.io/2015/08/15/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;Control file specification&lt;/h2&gt;
&lt;p&gt;该篇主要介绍control文件的标准.该标准主要为了使自定义的control文件能够提供前端或测试所需要的信息,并且能够通过前端修改.
主要内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名control文件&lt;/li&gt;
&lt;li&gt;常用变量&lt;/li&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;control文件命名&lt;/h3&gt;
&lt;p&gt;control文件命名必须是control.xxxx,xxxx是你定义或则代码评审定义．　例如，５００次硬重启测试，一个正规的定义就是　control.hard500&lt;/p&gt;
&lt;h3&gt;常用变量&lt;/h3&gt;
&lt;p&gt;下面是一个常用变量的列表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*AUTHOR&lt;/td&gt;
&lt;td&gt;测试编写的个人或公司信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ＤEPENENCIES&lt;/td&gt;
&lt;td&gt;测试依赖信息，比如"CONSOLE"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*DOC&lt;/td&gt;
&lt;td&gt;描述测试包括哪些参数的说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXPERIMENTAL&lt;/td&gt;
&lt;td&gt;如果定义为True,测试忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*NAME&lt;/td&gt;
&lt;td&gt;前端识别测试的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUN_VERIFY&lt;/td&gt;
&lt;td&gt;定义scheduler是否执行验证，默认为True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SYNC_COUNT&lt;/td&gt;
&lt;td&gt;次数，接受大于等于１的参数，默认为１&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*TIME&lt;/td&gt;
&lt;td&gt;说明测试时长，　ＳＨＯＲＴ&amp;lt;15m, MEDIUM &amp;lt; 4H ,LONG &amp;gt;4H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEST_CLASS&lt;/td&gt;
&lt;td&gt;描述类属于类型，如内核．硬件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEST_CATEGORY&lt;/td&gt;
&lt;td&gt;描述测试的类型，如压力，功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*TEST_TYPE&lt;/td&gt;
&lt;td&gt;测试类型：client server&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;标*是每个control文件的必填．并且提供一个脚本用于检查utils/check_control_file_vars.py&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AUTHOR(必填)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计者的信息是必填，用来后续追踪测试和修改bug,邮箱地址是必须的．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DEPENDENCIES（可选，默认：none)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相关性是描述你需要运行测试什么类型硬件的一种方式。 依赖是说,比如你需要测试蓝牙：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEPENDENCY =“bluetooth”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中， Bluetooth是在自动测试创建并已添加到一台机器,自动测试或者通过CLI或Django管理界面的确切标签。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DOC(必需)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文档需要说明测试项测试时需要的条件，确认测试正常运行．以及如果进行调整和修改．同时def execute()调用的参数代表什么含义．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPERIMENTAL(可选默认：False)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果设置，前端会忽略这些测试生产自动测试服务器测试导入过程。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NAME(必需)&lt;/strong&gt;
指定的名字，前端会用来显示，这对于不同测试文件为了同一测试的不同验证需求非常有用．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RUN_VERIFY(可选，默认TRUE)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用来定义scheduler是否进行验证&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SYNC_COUNT(可选默认１)&lt;/strong&gt;
　１代表的是可以异步执行，大于１代表需同步执行
如果一个测试需要两台机器，SYNC_COUNT=2.autotest就会判断是否满足条件
例如，发布向２３台机器发布任务，单只有２２个可以执行，单独的那个会失败．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIME(Required)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试需要的时间，不包括设置时间．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SHORT&lt;/td&gt;
&lt;td&gt;小于１５分钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUM&lt;/td&gt;
&lt;td&gt;少于４Ｈ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONG&lt;/td&gt;
&lt;td&gt;大于４Ｈ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;TEST_CATEGORY(必需)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义测试属于哪一类
例如　功能性或压力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST_CLASS(必需)&lt;/strong&gt;
　xxxx描述类类型的测试。 如果你有不同类型的要过滤的测试，这是非常有用的。
如果一个测试中加入一个TEST_CLASS，前端如果不存在这个类，就要补充这个类。
示例测试类
&lt;em&gt;内核
&lt;/em&gt;硬件 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST_TYPE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个要告诉前端什么类型的测试．有效值是server或client.&lt;/p&gt;
&lt;h3&gt;示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIME =&amp;#39;MEDIUM&amp;#39;
AUTHOR = &amp;#39;Scott Zawalski ( scott@xxx.com )&amp;#39;
TEST_CLASS = &amp;#39;Hardware&amp;#39;
TEST_CATEGORY = &amp;#39;Functional&amp;#39;
NAME = &amp;#39;Hard Reboot&amp;#39;
SYNC_COUNT = 1
TEST_TYPE = &amp;#39;server&amp;#39;
TEST_CLASS = &amp;#39;Hardware&amp;#39;
DEPENDCIES = &amp;#39;POWER, CONSOLE&amp;#39;

DOC = &amp;quot;&amp;quot;&amp;quot;
Tests the reliability of platforms when rebooted. This test allows
you to do a hard reboot or a software reboot.

Args:
type: can be &amp;quot;soft&amp;quot; or &amp;quot;hard&amp;quot;, default is &amp;quot;hard&amp;quot;
e.g. job.run_test(&amp;#39;reboot&amp;#39;, machine, type=&amp;quot;soft&amp;quot;)
This control file does a HARD reboot
&amp;quot;&amp;quot;&amp;quot;

def run(machine):
job.run_test(&amp;#39;reboot&amp;#39;, machine, type=&amp;quot;hard&amp;quot;)
parallel_simple(run, machines)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/14/autotest/"&gt;Autotest:Autotest-client control&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/16/autotest/"&gt;Autotest:Autotest-add test&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-15:2015/08/15/autotest/</guid><category>autotest</category></item><item><title>Autotest-client control</title><link>http://king32783784.github.io/2015/08/14/autotest/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;Client Control files&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jobs 例子&lt;/li&gt;
&lt;li&gt;扩展测试&lt;/li&gt;
&lt;li&gt;流程控制&lt;/li&gt;
&lt;li&gt;系统信息抓取&lt;/li&gt;
&lt;li&gt;分析器&lt;/li&gt;
&lt;li&gt;创建文件系统&lt;/li&gt;
&lt;li&gt;job执行期间重启&lt;/li&gt;
&lt;li&gt;并行运行多个测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;control file定义了一次test job 关键信息,它定义了一次测试的方方面面.control文件是一个python脚本,它驱动这个测试.&lt;/p&gt;
&lt;h2&gt;job例子&lt;/h2&gt;
&lt;p&gt;可以添加一个job对象用来驱动测试和一些服务支持.一个job例子可以是这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test(&amp;#39;kernbench&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参数只有测试的名字(kernbench).autotest有很多测试用例,每个测试都有一个简单的control文件(tests/&lt;testname&gt;/control
在autotestclient端的顶层目录下,你可以执行测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ client/autotest-local &amp;lt;control_file_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在control文件中同样可以指定测试参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test(&amp;#39;kernbench&amp;#39;, iterations=2, threads=5)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第一个参数是测试名称;&lt;/li&gt;
&lt;li&gt;第二个参数是执行次数和线程数,大多数你可以执行它的默认参数.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以指定一个tag参数,用来给测试结果目录命名:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test(&amp;#39;kernbench&amp;#39;, iterations=2, threads=5, tag=&amp;#39;mine&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试时会创建结果目录"kernbench.mine"来替代之前的"kernbench".这个功能非常重要,当你执行了多次测试,可以用来区分测试结果.&lt;/p&gt;
&lt;h2&gt;扩展测试&lt;/h2&gt;
&lt;p&gt;当开发一个测试时,为了让它能正常的下载和执行时,需要符合扩展测试的要求.&lt;/p&gt;
&lt;h2&gt;流程控制&lt;/h2&gt;
&lt;p&gt;真正掌握一门语言用于脚本控制是学会它的控制结构和错误检查机制.这里给出一个kernbench运行不同threads的例子.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for t in [8, 16, 32]:
    job.run_test(&amp;#39;kernbench&amp;#39;, iterations=2, threads=t, tag=&amp;#39;%d&amp;#39; % t)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;系统信息抓取&lt;/h2&gt;
&lt;p&gt;每次重启和测试时,autotest都会生成一个目录用来保存系统的信息.比如/proc/meminfo文件内容,"uname-a"的输出信息.可以在测试结果目录找那个查看.
sysinfo/(每次重启前的数据), &lt;testname&gt;/sysinfo(每次测试前的数据)
每次收集的信息列表的内容,可以通过查看&lt;strong&gt;clent/bin/base_sysinfo.py&lt;/strong&gt;.当然autotest也提供了自定义收集系统信息的机制.可以通过这个方式进行自定义
的系统信息收集:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_file(&amp;quot;/proc/vmstat&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以设置每次重启后,收集/proc/vmstat的信息.可以通过on_every_test参数实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_file(&amp;quot;/proc/vmstat&amp;quot;, on_ervey_test=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一种方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_command(&amp;quot;lspci -v&amp;quot;, logfile=&amp;quot;lspci.txt&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样每次重启都可以执行lspci -v,并把信息导入到lspci.txt. logfile的参数是可选的.如果不指定它,就会默认以lspci_ -v作为名字.这个方法,同样是每次reboot都会
 执行.&lt;/p&gt;
&lt;h2&gt;使用分析器&lt;/h2&gt;
&lt;p&gt;你可以启用一个或多个分析器.下面是添加和移除的例子:
    job.profilers.add('oprofile')
    job.run_test('sleeptest')
    job.profilers.delete('oprofile')&lt;/p&gt;
&lt;p&gt;多个测试使用方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.profilers.add(&amp;#39;oprofile&amp;#39;)
job.run_test(&amp;#39;kernbench&amp;#39;)
job.run_test(&amp;#39;dbench&amp;#39;)
job.profilers.delete(&amp;#39;oprofile&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它会为每个测试生成独立的分析结果,以免不影响性能结果.分析结果会在测试结果目录下的&lt;testname/profiling&gt;
当然,在profilers/&lt;profiler-name&gt;/control下有所有的示例.&lt;/p&gt;
&lt;h2&gt;创建文件系统&lt;/h2&gt;
&lt;p&gt;autotest内建支持创建文件系统.用来支持在不同文件系统中进行fsx测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# uncomment this line, and replace the device with something sensible
# for you ...
# fs = job.filesystem(&amp;#39;/dev/hda2&amp;#39;, job.tmpdir)

for fstype in (&amp;#39;ext2&amp;#39;, &amp;#39;ext3&amp;#39;):
    fs.mkfs(fstype)
    fs.mount()
    try:
        job.run_test(&amp;#39;fsx&amp;#39;, job.tmpdir, tag=fstype)
    finally:
        fs.unmount()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样支持为不同的文件系统添加不同的挂载参数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fs = job.filesystem(&amp;#39;/dev/sda3&amp;#39;, job.tmpdir)
iters=10
for fstype, mountopts, tag in ((&amp;#39;ext2&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;ext2&amp;#39;),
                               (&amp;#39;ext3&amp;#39;, &amp;#39;-o data=writeback&amp;#39;, &amp;#39;ext3writeback&amp;#39;),
                               (&amp;#39;ext3&amp;#39;, &amp;#39;-o data=ordered&amp;#39;, &amp;#39;ext3ordered&amp;#39;),
                               (&amp;#39;ext3&amp;#39;, &amp;#39;-o data=journal&amp;#39;, &amp;#39;ext3journal&amp;#39;)):
    fs.mkfs(fstype)
    fs.mount(args=mountopts)
    try:
        job.run_test(&amp;#39;fsx&amp;#39;, job.tmpdir, tag=tag)
        job.run_test(&amp;#39;iozone&amp;#39;, job.tmpdir, iterations=iters, tag=tag)
        job.run_test(&amp;#39;dbench&amp;#39;, iterations=iters, dir=job.tmpdir, tag=tag)
        job.run_test(&amp;#39;tiobench&amp;#39;, dir=job.tmpdir, tag=tag)
    finally:
        fs.umount()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;job测试中重启&lt;/h2&gt;
&lt;p&gt;当一个job需要重启时,比如导入一个新的内核.这样就会导致control脚本执行中断.这样就需要分布执行的模块.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def step_init():
    job.next_step([step_test])
    testkernel = job.kernel(&amp;#39;2.6.18&amp;#39;)
    testkernel.config(&amp;#39;http://mbligj.org/congig/opteron2&amp;#39;)
    testkernel.build()
    testkernel.boot()  #does autotest by default

def step_test():
    job.run_test(&amp;#39;kernbench&amp;#39;, iterations=2, threads=5)
    job.run_test(&amp;#39;dbench&amp;#39;, iterations=5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过指定&lt;strong&gt;step_init&lt;/strong&gt;表明控制脚本已一种分布模式执行.在执行中断时(如reboot)会保存测试环境.&lt;/p&gt;
&lt;p&gt;一个重要的提示是分布执行引擎并不意味支持这个测试过程的分步执行.只能支持再控制文件级别中实现.因为在测试程序执行时一些返回值.实现自动测试过程中中断测试
不太现实.如果出现超时,会杀死子线程.
因此,代码插入到control文件中是正确的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; def step_init():
     job.next_step([step_test])
     testkernel = job.kernel(&amp;#39;testkernel.rpm&amp;#39;)
     testkernel.install()
     testkernel.boot()

def step_test()
     job.run_test(&amp;#39;ltp&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关代码插入到测试模块中,是不行的.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kerneltest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;testkernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testkernel.rpm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;testkernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接的,当使用分布引擎时,控制文件不是简单的执行一次.而是循环执行,直到测试完成.在一个独立的情况下，当一个控制文件存在，在重启之后会自动启动执行.在托管环境中管理服务器将执行相同的作用.
当面对分步执行时,循环会变得更加困难.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def step_init():
    step_test(1)

def step_test(iteration):
    if (iteration &amp;lt; 5):
        job.next_step([step_test, iteration + 1])

    print &amp;quot;boot: %d&amp;quot; % iteration

    job.run_test(&amp;#39;kernbench&amp;#39;, tag=&amp;quot;%s&amp;quot; % i)
    job.reboot()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;并行运行&lt;/h2&gt;
&lt;p&gt;job对象同样提供一个并行运行多个测试的方法. 该方法采用可变数量的参数，分别代表不同的任务并行运行。 每个参数应该是一个列表，其中该列表中的第一项是一个函数的调用和所有其余元素都将被传递给函数被调用时的参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def first_task():
    job.run_test(&amp;#39;kernbench&amp;#39;)

def second_task():
    job.run_test(&amp;#39;dbench&amp;#39;)

job.parallel([first_task], [second_task])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;控制文件会同时执行kernbench和dbench.代码还可以如此写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.parallel([job.run_test, &amp;#39;kernbench&amp;#39;, [job.run_test, &amp;#39;dbench&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想这样更复杂的东西在你的任务中,而不是要求单一的功能，那么你就必须定义自己的函数来做到这一点，如在第一个例子。&lt;/p&gt;
&lt;p&gt;并行任务执行在自己的地址空间,你不比担心.但是毕竟是运行在同一台物理机中.仍然需要主要避免访问同一资源,如相同的文件.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/13/autotest02/"&gt;Autotest：Autotest-Local&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/15/autotest/"&gt;Autotest：Autotest-Control file specification&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 14 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-14:2015/08/14/autotest/</guid><category>autotest</category></item><item><title>Autotest-Local</title><link>http://king32783784.github.io/2015/08/13/autotest02/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h2&gt;Local (Former Client)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;client端控制文件&lt;/li&gt;
&lt;li&gt;测试模块开发&lt;/li&gt;
&lt;li&gt;如何添加测试到autotest&lt;/li&gt;
&lt;li&gt;使用和开发job profilers&lt;/li&gt;
&lt;li&gt;linux发行版检测&lt;/li&gt;
&lt;li&gt;API 参考&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;快速入门&lt;/h3&gt;
&lt;p&gt;Autotest 客户端需要很少的依赖,需要安装python2.4或以上版本.推荐使用虚拟机或测试机验证,避免出现异常.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载client端&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --recursive git://github.com/autotest/autotest.git
cd autotest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;测试例子&lt;/strong&gt;
比如autotest中的sleeptest,sleeptest是一个简单的sleep几秒测试.可以从autotest目录启动(/usr/local/autotest/client):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local --verbose run sleeptest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过以下方式,进行任何独立测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local run &amp;lt;testname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以通过control文件启动测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local client/tests/sleeptest/control
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一些测试可能需要root权限,比如rtc测试.当提示结果为"permission denied error"时,意味着权限不足,你需要以root执行.
&lt;strong&gt;如果以root身份执行client端,后又切回到普通用户,一些重要的目录,可能是root用户的,再进行测试可能会出错.这时你可以删除这些目录:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rm -rf client/tmp
sudo rm -rf client/results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在client/samples目录下面有一些测试例子,非常适合练习.kbuile_and_tests/control会下载一个内核,并且编译,而且会重启后进入该内核.
可以以root身份执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-loacl --verbose client/samples/kbuild_and_tests/control
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意,尽量在一个测试机或虚拟机执行,不然会丢失之前系统的启动设置.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/12/Autotest01/"&gt;Autotest：Autotest-summary&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/14/autotest/"&gt;Autotest：Autotest-client control&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 13 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-13:2015/08/13/autotest02/</guid><category>autotest</category></item><item><title>Autotest-summary</title><link>http://king32783784.github.io/2015/08/12/Autotest01/</link><description>&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;Autotest是一个开源的自动化测试框架.设计目的是为了测试Linux内核,同样可以用来检查新的硬件,虚拟化测试以及linux平台用户空间程序.它遵循GPL协议,并有大量的开发组织成员,其中包括像谷歌,IBM,红帽等.
Avocado,是Autotest开发组,开发的下一代的自动化测试框架.详细信息参考&lt;a href="http://avocado-framework.github.io/"&gt;Avocado&lt;/a&gt;,后续有时间会再对Avocado进行介绍.
本专题主要介绍以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 基本信息
* 客户端介绍
* 服务端介绍
* 前端介绍
* 系统管理
* 调度模块
* 如何开发
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本文主要介绍关于Autotest的一些基本信息.主要内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Autotest主要结构
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Autotest项目主页:&lt;a href="http://autotest.github.io/"&gt;Autotest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href="https://github.com/autotest/autotest"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Autotest主要结构&lt;/h2&gt;
&lt;p&gt;下图是Autotest框架简化图:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest1.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h3&gt;Web接口和命令行接口&lt;/h3&gt;
&lt;p&gt;Web接口和命令行接口是相辅相成的方式去连接Autotest并创建job.这两则具有相同的功能,意在方便用户.你可以用这些接口做以下事情:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 管理jobs,如创建,监控,中止等
* 管理客户端
* 查看测试结果
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前端会通过向mysql数据库中创建记录的方式将jobs插入服务端.&lt;/p&gt;
&lt;h3&gt;服务端&lt;/h3&gt;
&lt;p&gt;服务端主要包括3个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个Mysql数据库,该数据库保存了所有的job,客户端(测试物理机),用户,测试项目等信息&lt;/li&gt;
&lt;li&gt;调度程序(monitor_db),从数据库中选择jobs 运行.它对数据库的操作,主要是为了启动autoserv进程去调用服务请求.&lt;ul&gt;
&lt;li&gt;通常一台测试机一个调度进程&lt;/li&gt;
&lt;li&gt;客户机端的jobs是异步的(设置客户端机变为可用)&lt;/li&gt;
&lt;li&gt;服务器端的jobs是同步的(它启动前要等待所有客户端机)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoserv: 服务端通过autoserv程序管理客户端,每个运行的job都会有一个autoserv进程.每个autoserv进程:&lt;ul&gt;
&lt;li&gt;控制和监控一个或多个客户端&lt;/li&gt;
&lt;li&gt;确认客户端是否工作正常,如果确认失败,会尝试修复.&lt;/li&gt;
&lt;li&gt;管理job的执行&lt;/li&gt;
&lt;li&gt;在开始测试前,更新客户端的autotest程序.(如新增了测试项)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外,mysql数据库可用部署在不同的机器上进行调度,虽然有一定的调度负载,但每个可用管理几千个客户端.所以没必要部署在不同机器上.&lt;/p&gt;
&lt;h3&gt;客户端&lt;/h3&gt;
&lt;p&gt;启动一个job后,client端做了大部分的工作.它的调用方式有:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;手动执行:通过client/autotest-local &amp;lt;control_file_name&amp;gt;命令启动
通过服务端调用
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个典型的工作流程如下:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest2.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简要说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户创建job(可以通过web端或命令行)或自动事件触发;将job信息记录插入前端数据库;调度器(monitor_db)将job匹配到空闲机器;调度器创建autoserv进程启动job;Autoserv确认客户端或修复;Autoserv在测试机器上安装或更新autotest客户端;Autoserv监控客户端状态,监视问题;
客户机器触发autotest客户端执行测试(已开发测试项目)-运行control文件-log模块记录测试信息-setup-执行测试-测试结果文件由autoserv回收;分析机器新的job;log结果信息处理;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果目录&lt;/strong&gt;:按照一定格式结果目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果数据库&lt;/strong&gt;:一个简单的数据库保存每个测试的job信息 测试结果 性能指标等&lt;/p&gt;
&lt;p&gt;随着前面的介绍,下图是更容易理解的基本框架图:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest3.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简要说明:&lt;/strong&gt;
Autotest通过 Web 前端或者命令行工具提交测试任务， Autotest Server 通过调度器将任务分发到不同的 Client（测试机）， Client 端任务执行完之后，再将结果返回到结果分析后端，Web 前端与命令行接口即可查看测试结果
.
主要构成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local：在测试机Client上执行测试的引擎&lt;/li&gt;
&lt;li&gt;Remote：从Server端推送测试代码到客户测试机，触发测试执行，监控测试状态，并且把测试结果从测试机反馈到服务器。&lt;/li&gt;
&lt;li&gt;Scheduler：根据用户输入分配测试任务，为每个任务创建服务进程，存储结果到测试数据库&lt;/li&gt;
&lt;li&gt;Frontends：允许用户运行作业并且方便地使测试结果可视化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/08/13/autotest02/"&gt;Autotest：Autotest-Local&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 12 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-12:2015/08/12/Autotest01/</guid><category>autotest</category></item><item><title>selenium-expected_conditions源码分析</title><link>http://king32783784.github.io/2015/02/03/selenium/</link><description>&lt;h4&gt;expected_conditions 模块的源码分析&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NoSuchFrameException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StateElementReferenceException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NoAlertPresentException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导入异常处理模块。&lt;/p&gt;
&lt;h5&gt;title_is&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;title_is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：用于检查页面的标题，title是期望的标题，必须是完全匹配，如果标题匹配则返回True，否则返回false。&lt;/p&gt;
&lt;p&gt;用法：比如判断标题是否为"hi | word", title_is("hi | word")&lt;/p&gt;
&lt;h5&gt;title_contains&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;title_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查页面的标题是否包含指定的字符，如果包含返回True,否则返回false。&lt;/p&gt;
&lt;p&gt;用法：判断标题是否包含"hi", title_is("hi")&lt;/p&gt;
&lt;h5&gt;presence_of_element_located&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查页面的DOM上是否存在指定元素。该元素并不需要是可见的。 locator - 用于找到元素的元组，包括找到元素的方式和值.
返回找到元素。&lt;/p&gt;
&lt;p&gt;用法：例如判断当前页面是否存在id为“kw"的元素，presence_of_located((By.ID, "kw"))&lt;/p&gt;
&lt;p&gt;By中包含ID、XPATH、LINK_TEXT、 PARTIAL_LINK_TEXT、NAME、TAG_NAME、CLASS_NAME、CSS_SELECTOR&lt;/p&gt;
&lt;p&gt;_find_elemnt()用于查找元素，简单看一下_find_elment()方法的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _find_element(driver, by)
    try:
        return driver.find_element(*by)
    except NoSuchElementException as e:
        raise e
    except WebDriverException as e:
        raise e
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;visibility_of_element_located&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;visibility_of_element_located&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_element_if_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：期望检查元素是否出现在页面的DOM上并可见。 可见性意味着元素不仅显示，而且具有大于0的高度和宽度。
locator - 用于找到元素的元组，包括找到元素的方式和值.
返回找到的元素&lt;/p&gt;
&lt;p&gt;方法：例如判断当前页面是否存在name为“wd"的元素，并且该元素可视，visibility_of_element_located((By.NAME, "wd"))&lt;/p&gt;
&lt;p&gt;调用_element_if_visible()方法检查元素是否存在并可视&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _element_if_visible(element, visibility=True):
    retrun element if element.is_displayed() == visibility else False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_element_if_visible通过调用element.is_displayed()判断元素是否可视。element.is_displayed不再描述，以后的文章会再着重说明。&lt;/p&gt;
&lt;h5&gt;visibility_of&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;visibility_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_element_if_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：该类和visibility_of_element_located类似，不同的地方是该类直接传入要判断的元素。&lt;/p&gt;
&lt;p&gt;如果存在返回True,如果不存在返回False&lt;/p&gt;
&lt;h5&gt;presence_of_all_elements_located(object):&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def __init__(sel, locator):
    self.locator = locator

def __call__(self, driver):
    retrun _find_elments(driver, self.locator)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：该类和presence_of_element_located类似。该类检查页面是否存在至少一个符合要求的元素，返回符合要求的列表。&lt;/p&gt;
&lt;h5&gt;visibility_of_any_elements_located(object):&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;visibility_of_any_elements_located&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;retrun&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;_find_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;_element_if_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：期望页面中至少出现一个符合条件的元素。符合定位方式并且可视。
方法：方法同 visibility_of_element_located
简单看一下_find_elements()和_find_element()类似&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _find_elements(driver, by):
    try:
        return driver.find_elements(*by)
    except WebDriverException as e:
        raise e
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;text_to_be_present_in_element&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;text_to_be_present_in_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text_&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;element_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;element_text&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明： 期望检查给定的文本是否存在于指定的element.locator的text中。存在返回True,不存在返回false.
用法： 例如检查名称为”tj_trhao123"的元素文本中是否包含"hao123",((By.NAME, "tj_trhao123"), "hao123"))&lt;/p&gt;
&lt;h5&gt;text_to_be_present_in_element_value&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;text_to_be_present_in_element_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text_&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;element_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;element_text&lt;/span&gt;:
                &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;element_text&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明： 期望检查给定文本是否存在于元素的定位器定位到元素的文本中。存在返回True，不存在返回false。
用法： 判断"百度一下“，是否存在于id为su的元素的”value"属性值中，text_to_be_present_in_element_value((By.ID, "su"), "百度一下"))&lt;/p&gt;
&lt;p&gt;从代码中可以看到同样是通过_find_element找到元素，并且通过get_attribute获取元素值。&lt;/p&gt;
&lt;h5&gt;frame_to_be_available_and_switch_to_it&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;frame_to_be_available_and_switch_to_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame_locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame_locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                     &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame_locator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame_locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;NoSuchFrameException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查给定的frame是否可切换。 如果帧可用，则将给定的webdriver切换到指定的frame.如果切换成功，返回True,否则返回false。
用法：参数locator可以为定位frame的元组，也可以是frame元素。&lt;/p&gt;
&lt;p&gt;isinstance首先判断给点的locator是否为元组（包含定位方式和对应值），如果是，先通过_find_element获取元素，然后再通过switch_to.frame切换。&lt;/p&gt;
&lt;p&gt;简单看一下switch_to.frame的实现代码片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;@property&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;retrun&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_switch_to&lt;/span&gt;

&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_switch_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SwitchTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SwitchTo&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frame_reference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SWITCH_TO_FRAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frame_reference&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;invisibility_of_element_located&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;invisibility_of_element_located&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_element_if_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查一个元素是不可见的或不存在于DOM中.&lt;/p&gt;
&lt;p&gt;用法：传入定位元素的locator&lt;/p&gt;
&lt;p&gt;try表示元素存在，但调用_element_if_visible判断元素是否可视，传入判断的值为False,也就是如果可见则返回False.&lt;/p&gt;
&lt;p&gt;except中NoSuchElementException表示指定元素没有在DOM中。StaleElementReferenceException表示是元素状态是不可见的。&lt;/p&gt;
&lt;h5&gt;element_to_be_clickable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;element_to_be_clickable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;visibility_of_element_located&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_enabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查元素是可用的，意思就是可以点击或操作的。&lt;/p&gt;
&lt;p&gt;用法：传入locator定位元素，如果可用返回元素，如果不可用返回false.&lt;/p&gt;
&lt;p&gt;简单看一下is_enabled,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_enabled(self):
    return self.execute(Command.IS_ELEMENT_ENABLED)[&amp;#39;value&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;staleness_of&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;staleness_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_enabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：等待元素不再附着在DOM中，传入的element是要等待的元素。如果元素仍然可用，则返回false, 如果不可用则返回True.&lt;/p&gt;
&lt;h5&gt;element_to_be_selected&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;element_to_be_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：检查元素的选择框是否选中。&lt;/p&gt;
&lt;p&gt;用法：传入要验证的元素&lt;/p&gt;
&lt;p&gt;is_selected 用于检查是否选中了复选框或单选按钮&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_selected(self):
    return self._execute(Command.IS_ELEMENT_SELECTED)[&amp;#39;value&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;element_located_to_be_selected&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;element_located_to_be_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：和element_to_be_selected类似，传入的参数不同，这个是传入locator,先定位元素再判断。&lt;/p&gt;
&lt;h5&gt;element_selection_state_to_be&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;element_selection_state_to_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;is_selected&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明： 给定元素和是否选中的状态（布尔值如True或False)
用法： 传入判定的元素和状态，如果和输入状态一致返回True,否则返回false。&lt;/p&gt;
&lt;h5&gt;element_located_selection_state_to_be&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;element_located_selection_state_to_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;locator&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;is_selected&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_selected&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;StaleElementReferenceException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：和element_selection_state_to_be类似，不同的是该类需要传入定位方法和状态。
返回值，如果和输入状态一致返回True，如果不一致返回false。另外，如果元素没找到，返回false。&lt;/p&gt;
&lt;h5&gt;alert_is_present&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;alert_is_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;NoAlertPresentException&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：判断是否有弹窗（一般为警告信息）。有返回alert,没有返回False.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/X0VEL34U0E.jpg" height="280" width="480"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 03 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-02-03:2015/02/03/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(五）</title><link>http://king32783784.github.io/2015/02/01/selenium/</link><description>&lt;h4&gt;示例10 不同等待方法示例&lt;/h4&gt;
&lt;p&gt;等待方法包括多种策略，具体参见前面文章。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding:utf-8 *-*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expected_conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;testurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.baidu.com/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;testurl1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# presence_of_element_located方法&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by presence_of_element_located sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by presence_of_element_located failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# title_is 方法&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;百度一下，你就知道&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by title_is sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by title_is failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byTitlecontains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;百度&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by title_contains sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by title_contains failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visibility_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by visibility_of_element_located sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by visibility_of_element_located by name failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byelement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visibility_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by visibility_of sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by visibility_of failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bypresenceelements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_all_elements_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by presence_of_all_elements_located sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by presenceelements failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bytextinelement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_be_present_in_element&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tj_trhao123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hao123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by text_to_be_present_in_element sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by text_to_be_present_in_element failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bytextvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_to_be_present_in_element_value&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;su&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;百度一下&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by text_to_be_present_in_element_value sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by text_to_be_present_in_element_value failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame_to_be_available_and_switch_to_it&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tj_trhao123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by frame_to_be_available_and_switch_to_it sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by frame_to_be_available_and_switch_to_it failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byinvisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invisibility_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tj_trha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by invisibility_of_element_located sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by invisibility_of_element_located failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byclickable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_to_be_clickable&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;su&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_to_be_clickable sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_to_be_clickable failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bystaleness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;su&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staleness_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by staleness_of failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by staleness_of sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bybeselected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;short_desc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;tab_specific&amp;#39;]/a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;product&amp;#39;]/option[1]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;elemnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_to_be_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_to_be_selected sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_to_be_selected failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bylocatedselected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;short_desc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;tab_specific&amp;#39;]/a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_located_to_be_selected&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;product&amp;#39;]/option[1]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_located_to_be_selected sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_located_to_be_selected failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byselectionstate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bug_status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
            &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab_advanced&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;negate0&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;custom_search_filter_section&amp;#39;]/table/tbody/tr[1]/td/label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_selection_state_to_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_selection_state_to_be sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_selection_state_to_be failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bylocatedstate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bug_status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab_advanced&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;negate0&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_located_selection_state_to_be&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;negate0&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
           &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_located_selection_state_to_be sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by element_located_selection_state_to_be failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byisalert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alert_is_present&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by alert_is_present sucessfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wait by alert_is_present failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_byimplicitly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;示例中覆盖了expected_condition类中的大部分等待方式。包括title_is 、title_contains、presence_of_element_located、visibility_of_element_located、visibility_of、presence_of_all_elements_located、text_to_be_present_in_element、text_to_be_present_in_element_value、frame_to_be_available_and_switch_to_it、invisibility_of_element_located、element_to_be_clickable-it is Displayed and Enabled、staleness_of、element_to_be_selected、element_located_to_be_selected、element_selection_state_to_be、element_located_selection_state_to_be、alert_is_present
及implicitly_wait.&lt;/p&gt;
&lt;p&gt;下一篇会研究一下expected_condition中各个类的实现。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/T0EGHT3KZM.jpg" height="280" width="480"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-02-01:2015/02/01/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(四）</title><link>http://king32783784.github.io/2015/01/26/selenium/</link><description>&lt;h4&gt;示例9 各种元素定位方法&lt;/h4&gt;
&lt;p&gt;下面的例子将展示webdriver 元素定位的几种方式。包括id、name、xpath、link_tetx、partial_link_text、tag_name、class_name、css_selector等。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# *-* coding: utf-8 *-*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="n"&gt;testurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ElementLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iddriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iddriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namedriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namevalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;namedriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;namevalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyxpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xpathdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xpathvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xpathdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpathvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbylinktext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linkdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linktextvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;linkdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_link_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linktextvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyclassname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classnamevalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;classdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classnamevalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbytagname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tagdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tagnamevalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tagdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_tag_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tagnamevalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbycssselector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cssdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssvalue&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbypartiallink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partialdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partialvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partialdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_partial_link_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partialvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchvalue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_localmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bugzilla Main Page&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;quicksearch_main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11023&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;11023&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;namedriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbynametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;xpathdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyxpathtest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;namedriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;linkdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbylinktexttest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpathdriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;classdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyclassnametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linkdriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tagdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbytagnametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classdriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cssdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbycsstest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tagdriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbypartiallinktest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssdriver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbynametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;quicksearch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11024&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;11024&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyxpathtest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyxpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;quicksearch_top&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11025&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;11025&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbylinktexttest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbylinktext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbyclassnametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbyclassname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11026&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;11026&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbytagnametest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbytagname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbycsstest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbycssselector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a.bz_common_actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;localbypartiallinktest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localbypartiallink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;示例代码比较简单，就不在一一解释，主要覆盖了几种元素定位方式，可能在页面中找这些元素定位的特征反而比较费劲。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/I0T0E4Y826.jpg" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/25/selenium/"&gt;selenium-Sample(三)&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/27/selenium/"&gt;selenium-Sample(五)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 26 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-26:2015/01/26/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(三）</title><link>http://king32783784.github.io/2015/01/25/selenium/</link><description>&lt;h4&gt;示例５　拖放drag和drop&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;forgot_link_bottom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;quicksearch_main&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;action_chains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;action_chains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_and_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = self.driver.find_element_by_id(&amp;quot;forgot_link_bottom&amp;quot;)　＃获取源元素
target = self.driver.find_element_by_xpath(&amp;quot;//*[@id=&amp;#39;quicksearch_main&amp;#39;]&amp;quot;)　#获取移动到的元素
action_chains = ActionChains(self.driver)
action_chains.drag_and_drop(element, target).perform()　#执行拖放
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;示例6 弹出对话框示例&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;alert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to_alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;#获取警告对话框&lt;/span&gt;
        &lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　＃确定警告对话框&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;示例７　历史记录和位置示例&lt;/h4&gt;
&lt;p&gt;代码
    #!/bin/bash/env python
    # -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enter_bug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testhistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testhistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testhistory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testhistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：　&lt;/p&gt;
&lt;p&gt;self.driver.back()和self.driver.forward()　实现了页面的返回和前进。&lt;/p&gt;
&lt;h4&gt;示例８　Cookies添加&lt;/h4&gt;
&lt;p&gt;代码：
    #!/bin/bash/env python
    # &lt;em&gt;-&lt;/em&gt; coding: utf-8 &lt;em&gt;-&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.baidu.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cookieslist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cookies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieslist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test02&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cookieslist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cookies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieslist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testcookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testcookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addcookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：  cookie格式为字典包括"name"和“value"两个键值对。add_cookie方法将cookie添加到cookies中。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/WBB0EXYSWE.jpg" height="380" width="420"&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/24/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/26/selenium/"&gt;selenium-Sample(四)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 25 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-25:2015/01/25/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(二）</title><link>http://king32783784.github.io/2015/01/24/selenium/</link><description>&lt;h3&gt;常见应用的示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Sample List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填写表单示例1-自动设置bugzilla Simple Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填写表单示例2-自动设置bugzilla Advanced Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拖放drag和drop示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;窗口和框架之间移动示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弹出对话框示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;历史记录和位置示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookies示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元素定位不同方式示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;定位&lt;/span&gt;
&lt;span class="err"&gt;名称定位&lt;/span&gt;
&lt;span class="nx"&gt;Xpath&lt;/span&gt;&lt;span class="err"&gt;定位&lt;/span&gt;
&lt;span class="err"&gt;链接文本定位超链接&lt;/span&gt;
&lt;span class="nx"&gt;Tag&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="err"&gt;定位&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="err"&gt;定位&lt;/span&gt;
&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="err"&gt;选择器定位&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;等待-不同条件显示等待示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;title_is
title_contains
presence_of_element_locate
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element_value
text_to_be_present_in_element
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
elements_to_be_clickable-it is Displayed and Enabled
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
arelt_is_present
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;等待-等待示例-隐式等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面对象设计模式示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/RGBIHR91YT.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例3. 填写表单示例1-自动设置bugzilla Simple Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="c1"&gt;# test网址&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;


    &lt;span class="c1"&gt;# 导航到samplesearch页面&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;simplesearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searchdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab_specific&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sampledriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simplesearch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sampledriver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;statusvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__all__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bug_status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;statusvalues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;productvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iSoft_Desktop_v4.0_for loongson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productvalues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchbutton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;search&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchbutton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;分析：
doclick方法实现对选定元素的点击。&lt;/p&gt;
&lt;p&gt;getSearchpage 方法获取简单搜索页面&lt;/p&gt;
&lt;p&gt;dosearch方法是流程控制&lt;/p&gt;
&lt;p&gt;重点讲一下setseclect方法，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setseclect(self, driver, name, values):
    select = Select(driver.find_element_by_name(name))) # 通过Select类的调用，获取下拉框
    for value in values: # 进行指定下拉框选项的设定
        select.select_by_value(value)
    return driver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实现对下拉框的定位和下拉框值的设定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例4. 填写表单示例2-自动设置bugzilla Advanced Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.32.3/&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdvanceSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;searchdriver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;selectlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;selectlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iSoft_Desktop_v4.x_x86-64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;iSoft_Desktop_v4.0_x86-64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;selects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;product&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;setselect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchbutton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;setselect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setselect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchbutton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autosearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AdvanceSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autosearch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;分析：
　　大部分和上一个例子代码类似。其中setseclect方法不同&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setseclect(self, driver, selects):
    for k, v in selects.iteritems():
        selectlist = Select(driver.find_element_by_name(k))
        for value in v:
            selectlist.select_by_value(value)
    return driver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过一个字典将选择框的name属性和要选择的项目列表传入。通过遍历，将两个项目复选。&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/23/selenium/"&gt;selenium-Sample(一)&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/25/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 24 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-24:2015/01/24/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(一）</title><link>http://king32783784.github.io/2015/01/23/selenium/</link><description>&lt;h3&gt;应用示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.通过selenium爬取"https://stocksnap.io/"上的图片。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简要说明，通过selenium打开firefox浏览器，导航到指定网址；然后定位到图片源地址，并保存；然后调用urllib模块，下载图片到指定位置。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#!/bin/bash/env python&lt;/span&gt;
    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

    &lt;span class="c1"&gt;# 爬取页面地址  &lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://stocksnap.io/&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetpicHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gethtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximize_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;img_url_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 模拟滚动窗口以浏览下载更多图片  &lt;/span&gt;
            &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# 图片编号  &lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="c1"&gt;# 每次下滚500  &lt;/span&gt;
                &lt;span class="n"&gt;js&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;document.documentElement.scrollTop=&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;elemlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;main&amp;#39;]/a[*]/img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elemlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;img_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;img_url&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;img_url_dic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                
                        &lt;span class="n"&gt;img_url_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img_url&lt;/span&gt;
                        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;img_url_dic&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_list&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_dir&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downloadfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Download error:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;control&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/(.+?).jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.jpg&amp;quot;&lt;/span&gt;
                &lt;span class="n"&gt;localname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;getsrc&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetpicHtml&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;urllist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getsrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethtml&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;downloadpic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/isoft_lp/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.execute_script(js)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用execute_scripts执行JavaScript脚本，随后会重点说明该方法；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elemlist= self.driver.find_elements_by_xpath(&amp;quot;//*[@id=&amp;#39;main&amp;#39;]/a[*]/img&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过xpath获取图片元素；&lt;/p&gt;
&lt;p&gt;元素内容”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;&amp;lt;img src=&amp;quot;https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/9XCA8GIDBS.jpg&amp;quot; height=&amp;quot;280&amp;quot; width=&amp;quot;420&amp;quot;&amp;gt;&amp;quot;；
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/9XCA8GIDBS.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;img_url = elem.get_attribute(&amp;#39;src&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取图片源地址；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;filename = re.findall(r&amp;quot;https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/(.+?).jpg&amp;quot;, v)[0] + &amp;quot;.jpg&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取图片文件的原名字；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;response = urllib2.urlopen(url)
urllib.urlretrieve(url, localname)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指定url和本地地址，进行文件的下载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;２．自动登陆https://github.com/&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简要说明，通过selenium打开firefox浏览器，导航到指定网站，点击Sign in,自动输入账号密码，实现自动登陆。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# 登陆网址&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 账号密码&lt;/span&gt;

&lt;span class="n"&gt;loginname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxxx@xx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;passwordvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxxxx&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoLoginGithub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# 导航到github登陆页面&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getloginpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 定位signin按钮&lt;/span&gt;
        &lt;span class="n"&gt;signin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/html/body/header/div/div/div/a[2]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 点击signin按钮，进入登陆页面&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#　移动光标至sigin按钮 &lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;autologin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="err"&gt;　　　&lt;/span&gt;&lt;span class="c1"&gt;#　获取新的页面对象&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getloginpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位账号输入框&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login_field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　输入账号信息&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位密码输入框&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　输入密码信息&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwordvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位登陆按钮&lt;/span&gt;
        &lt;span class="n"&gt;dologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;login&amp;#39;]/form/div[4]/input[3]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　点击登陆按钮&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dologin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dologin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoLoginGithub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;代码说明：&lt;/p&gt;
&lt;p&gt;以下代码，实现按钮的点击&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;actions = ActionChains(self.driver)
#　移动光标至sigin按钮 
actions.move_to_element(signin)
actions.click(signin)
actions.perform()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;未完待续&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/22/selenium/"&gt;Selenium主题10&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/24/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 23 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-23:2015/01/23/selenium/</guid><category>Selenium</category></item><item><title>selenium-常见问题</title><link>http://king32783784.github.io/2015/01/22/selenium/</link><description>&lt;h3&gt;1.常见问题&lt;/h3&gt;
&lt;h4&gt;1.1 如何使用ChromeDriver?&lt;/h4&gt;
&lt;p&gt;下载最新的chromedriver&lt;a href="https://sites.google.com/a/chromium.org/chromedriver/downloads"&gt;chromedriver from download page&lt;/a&gt;,解压文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip chromedriver_linux32_x.x.x.x.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解压后，会看到chromedriver的二进制文件。然后可以像这样创建Chrome WebDriver实例：
　
    driver = webdriver.Chrome(executable_path="/path/to/chromedriver")&lt;/p&gt;
&lt;h4&gt;1.2　Selenium 2是否支持XPath2.0?&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="http://www.seleniumhq.org/docs/03_webdriver.jsp#how-xpath-works-in-webdriver"&gt; http://seleniumhq.org/docs/03_webdriver.html#how-xpath-works-in-webdriver&lt;/a&gt;
Selenium 将XPath查询委派给浏览器自己的XPath引擎查询，所以Selenium支持的XPath取决于浏览器的支持。如果浏览器没有XPath引擎（如IE6,7,8)，则Selenium就支持XPath1.0.&lt;/p&gt;
&lt;h4&gt;1.3　如何滚动到页面底部&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="http://blog.varunin.com/2011/08/scrolling-on-pages-using-selenium.html"&gt;http://blog.varunin.com/2011/08/scrolling-on-pages-using-selenium.html&lt;/a&gt;
可以使用execute_script方法执行加载页面中的javascript.因此，可以调用JavaScript API滚动只页面底部或任意位置。
这里给出一个滚动到页面底部的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.execute_script(&amp;quot;window.scrollTo(0, document.body.scrollHeight);&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.w3schools.com/jsref/obj_window.asp"&gt;window&lt;/a&gt;DOM对象中有&lt;a href="http://www.w3schools.com/jsref/met_win_scrollto.asp"&gt;scrollTo&lt;/a&gt;方法可以滚动到打开窗口的任意位置。&lt;a href="www.w3schools.com/jsref/dom_obj_all.asp"&gt;scrollHeight&lt;/a&gt;是所有元素的公共部分。document.body.scrollHeight会提供页面的整个高度。&lt;/p&gt;
&lt;h4&gt;1.4 Firefox profile如何自动保存文件？&lt;/h4&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/1176348/access-to-file-download-dialog-in-firefox"&gt;http://stackoverflow.com/questions/1176348/access-to-file-download-dialog-in-firefox&lt;/a&gt;
参考：&lt;a href="https://blog.codecentric.de/en/2010/07/file-downloads-with-selenium-mission-impossible/"&gt;http://blog.codecentric.de/en/2010/07/file-downloads-with-selenium-mission-impossible/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一步要确定要保存文件的类型
要确定自动下载的内容类型，可以使用&lt;a href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -I URL | grep &amp;quot;Content -Type&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一种方式是通过&lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;模块去找到文本类型，可以像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当content类型被识别后，可以用来进行firefox的偏好设置：
    browser.helperApps.neverAsk.saveToDisk&lt;/p&gt;
&lt;p&gt;示例如下：
　　
    import os&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirefoxProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;browser.download.folerList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;browser.download.manager.showWhenStarting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;browser.download.dir&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;browser.helperApps.nerverAsk.saveToDisk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://pypi.python.org/pypi/selenium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_partial_link_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;selenium-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;在上面的例子中，&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;octet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="err"&gt;用作&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="err"&gt;类型。&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="err"&gt;选项指定需要下载文件的目录。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.5 如何上传文件到文件输入？&lt;/h4&gt;
&lt;p&gt;选择&lt;input typ="file"&gt;元素并调用send_keys()方法传递路径，相对test scipt的相对路径，或绝对路径。注意Windows和unix系统直接路径的差异性。&lt;/p&gt;
&lt;h4&gt;1.6 如何使用Firefox中的firebug？&lt;/h4&gt;
&lt;p&gt;首先下载Firebug XPI文件，然后调用add_extension方法进行firefox profile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirefoxProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;firebug-1.8.4.xpi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extensions.firebug.currentVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.8.4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Avoid startup screen&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.7 如何获取当前窗口的截屏&lt;/h4&gt;
&lt;p&gt;使用webdriver提供的save_screenshot方法获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;screenshot.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/21/selenium/"&gt;Selenium主题9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/01/23/selenium/"&gt;selenium-Sample(一)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 22 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-22:2015/01/22/selenium/</guid><category>Selenium</category></item><item><title>selenium-Remote WebDriver</title><link>http://king32783784.github.io/2015/01/21/selenium/</link><description>&lt;h3&gt;Remote WebDriver&lt;/h3&gt;
&lt;p&gt;WebDriver实现。&lt;/p&gt;
&lt;p&gt;class selenium.webdriver.remote.webdriver.WebDriver(command_executor='http://127.0.0.1:4444/wd/hub', desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False, file_detector=None)&lt;/p&gt;
&lt;p&gt;Bases: object
控制浏览器向remote server发送命令。Remote server 运行的协议定义为&lt;a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol"&gt;https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol&lt;/a&gt;.
属性：
    * session_id- webdriver用于打开和控制浏览器窗口的ＩＤ字符串
    * capabilities- Dictionaty of effective capabilities of this browser session as returned
    　　　remote server,见&lt;a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities"&gt;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&lt;/a&gt;
    * command_executor -远程链接。RemoteConnection对象执行命令。
    * error_handler- errorhandler. ErrorHandler对象用于处理错误。
    　　　
add_cookie(cookie_dict)&lt;/p&gt;
&lt;p&gt;添加cookie到当前会话。
Args: * cookie_dict:字典对象，具有所需要的秘钥－”name"和“value".
keys选项　”path", "domain", "secure", "expiry"&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.add_cookie({&amp;#39;name&amp;#39;:&amp;#39;foo&amp;#39;, &amp;#39;value&amp;#39;:&amp;#39;bar&amp;#39;}) driver.add_cookie({&amp;#39;name&amp;#39;:&amp;#39;foo&amp;#39;, &amp;#39;value&amp;#39;:
&amp;#39;bar&amp;#39;, &amp;#39;path&amp;#39;:&amp;#39;/&amp;#39;}) driver.add_cookie({&amp;#39;name&amp;#39;:&amp;#39;foo&amp;#39;, &amp;#39;value&amp;#39;:&amp;#39;bar&amp;#39;,&amp;#39;path&amp;#39;:&amp;#39;/&amp;#39;,&amp;#39;secure&amp;#39;:True})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;back()&lt;/p&gt;
&lt;p&gt;浏览器历史记录中后退一步
用法：driver.back()&lt;/p&gt;
&lt;p&gt;close()&lt;/p&gt;
&lt;p&gt;关闭当前窗口
用法：driver.close()&lt;/p&gt;
&lt;p&gt;create_web_element(element_id)&lt;/p&gt;
&lt;p&gt;创建指定元素id的web元素&lt;/p&gt;
&lt;p&gt;delete_all_cookies()&lt;/p&gt;
&lt;p&gt;删除会话中所有的cookies
用法：driver.delete_all_cookies&lt;/p&gt;
&lt;p&gt;delete_cookies(name)&lt;/p&gt;
&lt;p&gt;删除给出名字的单一cookie
用法：driver.delete_cookie('my_cookie')&lt;/p&gt;
&lt;p&gt;execute(driver_command, params=None)&lt;/p&gt;
&lt;p&gt;通过 command.CommandExecutor发送命令
参数：
    * driver_command: 执行命令名称的字符串
    * params: 使用命令发送的命名参数的字典
返回：命令的json导入到字典对象&lt;/p&gt;
&lt;p&gt;excute_async_scipt(scipt, *args)&lt;/p&gt;
&lt;p&gt;异步执行当前窗口／框架中的javascript
Args:
    * script: 要执行的javascript
    * *ags: 任何javascript适用的参数
用法：driver.execute_async_script('document.title')&lt;/p&gt;
&lt;p&gt;execute_script(script, *args)&lt;/p&gt;
&lt;p&gt;同步执行当前窗口/框架中的javascript
Args: 
    * script: 要执行的javascript
    * *ags: 任何javascript适用的参数
用法：driver.execute_scipt('document.title')&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_detector_context(*args, **kwds)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在limited　context覆盖当前的file　detector. 确保original file detector已设置。
例如：
    with webdriver.file_detector_context(UselessFileDetector):
        someinput.send_keys('/etc/hosts')&lt;/p&gt;
&lt;p&gt;参数：　file_detector_clss－ 如果类不同，需要提供文件检测器的类&lt;/p&gt;
&lt;p&gt;从当前file_detector，那么该类用args和kwargs实例化，并在上下文管理器的持续时间期间用作文件检测器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;args－ 期间需要传递给file detector的可选参数
kwargs - 关键字参数，传递方式和args相同
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;find_element(by='id', value=None)&lt;/p&gt;
&lt;p&gt;'Private'方法由find_element_by_&lt;em&gt;方法们使用
用法：　使用相应的find_element_by_&lt;/em&gt; 替换
返回：　WebElement&lt;/p&gt;
&lt;p&gt;find_element_by_class_name(name)&lt;/p&gt;
&lt;p&gt;按类名查找元素
参数：　name-要查找元素的类名
用法：　driver.find_element_by_class_name("foo")&lt;/p&gt;
&lt;p&gt;find_element_by_css_selector(css_selector)&lt;/p&gt;
&lt;p&gt;通过css selector查找元素
参数：css_selector 查找元素使用的css selector
用法：driver.find_element_by_css_selector('#foo')&lt;/p&gt;
&lt;p&gt;find_element_by_id(id_)&lt;/p&gt;
&lt;p&gt;通过id查找元素
参数： id  查找元素的id
用法： driver.find_element_by_id('foo')&lt;/p&gt;
&lt;p&gt;find_element_by_link_text(link_text)&lt;/p&gt;
&lt;p&gt;通过link text查找元素
参数：　link_text 查找元素的link_text
用法：　driver.find_element_by_link_text('Sign ln')&lt;/p&gt;
&lt;p&gt;find_element_by_name(name)&lt;/p&gt;
&lt;p&gt;通过name查找元素
参数：　name: 查找元素的name
用法：　driver.find_element_by_name('foo')&lt;/p&gt;
&lt;p&gt;find_element_by_xpath(xpath)&lt;/p&gt;
&lt;p&gt;通过xpath查找元素
args: xpath 查找元素的xpath定位器
用法：driver.find_element_by_xpath('//div/td/[1]')&lt;/p&gt;
&lt;p&gt;find_element(by='id', value=None)&lt;/p&gt;
&lt;p&gt;find_elements_by_&lt;em&gt;methods使用的'Pvivate'方法
用法：　使用符合要求的find_elements_by_&lt;/em&gt;替换现有的
返回类型：　WebElement列表&lt;/p&gt;
&lt;p&gt;find_elements_by_class_name(name)&lt;/p&gt;
&lt;p&gt;按类名查找元素
参数name: 查找元素的类名
用法：driver.find_elements_by_class_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_css_selector(css_selector)&lt;/p&gt;
&lt;p&gt;按css selector查找元素
css_selector: 查找元素使用的css selector
用法：driver.find_element_by_css_selector('.foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_id(id_)&lt;/p&gt;
&lt;p&gt;按id查找多个元素
id_:要查找元素的id&lt;/p&gt;
&lt;p&gt;find_elements_by_link_text(text)&lt;/p&gt;
&lt;p&gt;通过链接文本查找元素
link_text: 查找元素的链接文本
driver.find_elements_by_link_text('Sign In')&lt;/p&gt;
&lt;p&gt;find_elements_by_name(name)&lt;/p&gt;
&lt;p&gt;按名称查找元素
name:查找元素的名称
driver.find_elements_by_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_partial_link_text(link_text)&lt;/p&gt;
&lt;p&gt;通过部分匹配链接文本查找元素。
link_text: 查找元素部分匹配的链接文本
driver.find_element_by_partial_link_text('Sign')&lt;/p&gt;
&lt;p&gt;find_elements_by_tag_name(name)&lt;/p&gt;
&lt;p&gt;通过tag　name查找元素
name: 查找元素使用的tag name
driver.find_elements_by_tag_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_xpath(xpath)&lt;/p&gt;
&lt;p&gt;通过xpath查找多个元素
xpath: 要查找元素的xpath的定位符
driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")&lt;/p&gt;
&lt;p&gt;forward()&lt;/p&gt;
&lt;p&gt;回退一次浏览器历史记录
driver.forward()&lt;/p&gt;
&lt;p&gt;get(url)&lt;/p&gt;
&lt;p&gt;在当前浏览器窗口加载网页&lt;/p&gt;
&lt;p&gt;get_cookie(name)&lt;/p&gt;
&lt;p&gt;按名称找到单个cookie,如果找到，返回cookie,没有返回None
driver.get_cookie('my_cookie')&lt;/p&gt;
&lt;p&gt;get_cookies()&lt;/p&gt;
&lt;p&gt;返回一组字典，对应当前会话可用的cookies&lt;/p&gt;
&lt;p&gt;driver.get_cookies()&lt;/p&gt;
&lt;p&gt;get_log(log_type)&lt;/p&gt;
&lt;p&gt;获取给定log类型的log
log_type:返回log的log类型
用法：driver.get_log('browser') driver.get_log('driver')
driver.get_log('client') driver.get_log('server')&lt;/p&gt;
&lt;p&gt;get_screenshot_as_base64()&lt;/p&gt;
&lt;p&gt;获取当前窗口截屏的base64编码字符串
这个在嵌入图像到html时非常有用。
用法：driver.get_screentshot_as_base64()&lt;/p&gt;
&lt;p&gt;get_screenshot_as_file(filename)&lt;/p&gt;
&lt;p&gt;获取当前窗口的截屏。如果存在，返回False
任何IOError，否则返回True.在filename中使用绝对路径
filename: 将屏幕截图保存到的完整路径。
driver.get_screenshot_as_file('/Screenshots/foo.png')&lt;/p&gt;
&lt;p&gt;get_screenshot_as_png()&lt;/p&gt;
&lt;p&gt;获取当前窗口的截屏，并保存为二进制数据。
driver.get_screenshot_as_png()&lt;/p&gt;
&lt;p&gt;get_window_position(windowHandle='current')&lt;/p&gt;
&lt;p&gt;获取当前窗口的x,y位置
driver.get_window_position()&lt;/p&gt;
&lt;p&gt;get_window_size(windowHandle='current')&lt;/p&gt;
&lt;p&gt;获取当前窗口的宽和高
driver.get_window_size()&lt;/p&gt;
&lt;p&gt;implicitly_wait(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置固定超时时间等待元素被找到，或命令完成
这个方法只需要在每个对话框执行一次。设置timeout需要调用execute_async_script.
time_to_wait:等待的时间
driver.implicitly_wait(30)&lt;/p&gt;
&lt;p&gt;maximize_window()&lt;/p&gt;
&lt;p&gt;将当前webdriver的窗口最大化&lt;/p&gt;
&lt;p&gt;quit()&lt;/p&gt;
&lt;p&gt;退出dirver并关闭每一个关联的窗口
driver.quit()&lt;/p&gt;
&lt;p&gt;refresh()&lt;/p&gt;
&lt;p&gt;刷新当前的窗口
driver.refresh()&lt;/p&gt;
&lt;p&gt;save_screenshot(filename)&lt;/p&gt;
&lt;p&gt;同 get_screenshot_as_file.&lt;/p&gt;
&lt;p&gt;set_page_load_timeout(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置等待网页加载完成的时间（抛出异常之前）
time_to_wait:等待的时间
driver.set_page_load_timeout(30)&lt;/p&gt;
&lt;p&gt;set_script_timeout(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置脚本运行的时间，直到抛出异常之前
time_to_wait:等待时间
driver.set_script_timeout(30)&lt;/p&gt;
&lt;p&gt;set_window_position(x,y, windowHandle='current')&lt;/p&gt;
&lt;p&gt;设置当前窗口的x,y
driver.set_window_position(0,0)
        　　　
set_window_size( width, height, windowHandle='current')&lt;/p&gt;
&lt;p&gt;设置当前窗口的高和宽
driver.set_window_size(800,600)&lt;/p&gt;
&lt;p&gt;start_client()&lt;/p&gt;
&lt;p&gt;启动新窗口前调用。这个方法使用时可以重写。&lt;/p&gt;
&lt;p&gt;start_session(desired_capabilities, browser_profile=None)&lt;/p&gt;
&lt;p&gt;创建所需功能的新会话
browser_name : 浏览器请求的名称
vesion: 哪些浏览器版本要求。
platform: 哪个平台要求在浏览器上。
javascript_enabled :新回话是否应支持JavaScript。
browser_profile : 一个selenium.webdriver.firefox.firefox_profile.FirefoxProfile对象。只有当被请求的Firefox使用。&lt;/p&gt;
&lt;p&gt;stop_client()&lt;/p&gt;
&lt;p&gt;执行quit命令后调用。用户可以根据需要自定义shutdown行为方法&lt;/p&gt;
&lt;p&gt;switch_to_active_element()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.active_element&lt;/p&gt;
&lt;p&gt;switch_to_alert()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.alert&lt;/p&gt;
&lt;p&gt;switch_to_default_content()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.default_content&lt;/p&gt;
&lt;p&gt;switch_to_frame(frame_reference)&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.frame&lt;/p&gt;
&lt;p&gt;switch_to_window(window_name)&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.window&lt;/p&gt;
&lt;p&gt;application_cache&lt;/p&gt;
&lt;p&gt;返回一个与浏览器的应用程序缓存交互的ApplicationCache对象&lt;/p&gt;
&lt;p&gt;current_url&lt;/p&gt;
&lt;p&gt;获取当前页的URL
driver.current_url&lt;/p&gt;
&lt;p&gt;current_window_handle&lt;/p&gt;
&lt;p&gt;返回当前窗口的handle
driver.current_window_handle&lt;/p&gt;
&lt;p&gt;desired_capabilities&lt;/p&gt;
&lt;p&gt;返回正在使用当前所需功能的驱动程序 
        　　　
file_detector&lt;/p&gt;
&lt;p&gt;log_types&lt;/p&gt;
&lt;p&gt;获取可用log types的列表
driver.log_types&lt;/p&gt;
&lt;p&gt;mobile&lt;/p&gt;
&lt;p&gt;name
返回此实例中底层浏览器的名称
driver.name&lt;/p&gt;
&lt;p&gt;orientation
获取当前设备的当前位置
orientation = driver.orientation&lt;/p&gt;
&lt;p&gt;page_source
获取当前页面的源码
driver.page_source&lt;/p&gt;
&lt;p&gt;switch_to&lt;/p&gt;
&lt;p&gt;title
返回当前页面的ｔｉｔｌｅ
driver.title&lt;/p&gt;
&lt;p&gt;window_handles
返回当前会话中所有窗口的句柄
driver.window_handles&lt;/p&gt;
&lt;h3&gt;WebElement&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.remote.webelement.WebElement(parent, id_, w3c=False)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="err"&gt;表示一个&lt;/span&gt;&lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="err"&gt;元素&lt;/span&gt;
&lt;span class="err"&gt;通常与一个文档交互的所有有趣操作将通过该接口来执行&lt;/span&gt;
&lt;span class="err"&gt;所有方法调用前会做一个&lt;/span&gt;&lt;span class="n"&gt;freshness&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;确保引用元素仍然有效。这实际上是检查元素是否仍然连接到&lt;/span&gt;&lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;如果检测测试失败，将会抛出&lt;/span&gt;&lt;span class="n"&gt;StaleElementReferenceException&lt;/span&gt;&lt;span class="err"&gt;异常，并且所有调用都会失败。&lt;/span&gt;

&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;清除文本，如果是一个文本输入元素。&lt;/span&gt;

&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;点击元素&lt;/span&gt;

&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;find_element_by_class_name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;通过子元素的类名查找元素&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;查找元素的类名&lt;/span&gt;

&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;通过子元素的&lt;/span&gt;&lt;span class="n"&gt;CSS&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="err"&gt;查找元素&lt;/span&gt;
    &lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CSS&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="err"&gt;例如‘&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nav&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;find_element_by_id(id_)&lt;/span&gt;

&lt;span class="s1"&gt;    通过子元素的ID查找元素&lt;/span&gt;
&lt;span class="s1"&gt;    id_: 用于定位的子元素的ID&lt;/span&gt;

&lt;span class="s1"&gt;find_elements_by_partial_link_text(link_text)&lt;/span&gt;
&lt;span class="s1"&gt;    通过子元素的link text查找元素的列表&lt;/span&gt;
&lt;span class="s1"&gt;    link_text：元素的Link text&lt;/span&gt;

&lt;span class="s1"&gt;find_element_by_tag_name(name)&lt;/span&gt;
&lt;span class="s1"&gt;    通过子元素的tag　name查找元素的列表&lt;/span&gt;
&lt;span class="s1"&gt;    name - html的tag的name（如h1,a,span)&lt;/span&gt;

&lt;span class="s1"&gt;find_elements_by_xpath(xpath)&lt;/span&gt;

&lt;span class="s1"&gt;    通过xpath查找元素&lt;/span&gt;
&lt;span class="s1"&gt;    xpath:xpath位置字符&lt;/span&gt;
&lt;span class="s1"&gt;    基本路径相对于这个元素的位置&lt;/span&gt;
&lt;span class="s1"&gt;    这将选择此元素下的所有链接。&lt;/span&gt;
&lt;span class="s1"&gt;        myelement.find_elements_by_xpath(&amp;quot;.//a&amp;quot;)&lt;/span&gt;

&lt;span class="s1"&gt;    然而，将会选择该页面本身的所有links&lt;/span&gt;
&lt;span class="s1"&gt;        myelement.find_elements_by_xpath(&amp;quot;//a&amp;quot;)&lt;/span&gt;

&lt;span class="s1"&gt;    get_attribute(name)&lt;/span&gt;

&lt;span class="s1"&gt;        获取给定元素的属性或特性&lt;/span&gt;
&lt;span class="s1"&gt;        这个方法会首先尝试返回给定名字的属性的值。如果具有该名称的属性不存在，它返回具有相同名称的属性值。如果什么都没有，返回None&lt;/span&gt;
&lt;span class="s1"&gt;        name:检索的属性的名字&lt;/span&gt;
&lt;span class="s1"&gt;        例如：&lt;/span&gt;
&lt;span class="s1"&gt;            #check if the &amp;quot;active&amp;quot; CSS class is applied to an element.&lt;/span&gt;
&lt;span class="s1"&gt;            is_active = &amp;quot;active&amp;quot; in target_element.get_attribute(&amp;quot;class&amp;quot;)&lt;/span&gt;

&lt;span class="s1"&gt;    is_displayed()&lt;/span&gt;
&lt;span class="s1"&gt;         判断该元素是否对用户可见。      &lt;/span&gt;

&lt;span class="s1"&gt;    is_enabled()&lt;/span&gt;
&lt;span class="s1"&gt;         返回元素是否已启用&lt;/span&gt;

&lt;span class="s1"&gt;    is_selected()&lt;/span&gt;
&lt;span class="s1"&gt;        返回元素是否已选择&lt;/span&gt;
&lt;span class="s1"&gt;        可以用来检查复选框或单选框是否已选择&lt;/span&gt;

&lt;span class="s1"&gt;    Screenshot(filename)&lt;/span&gt;

&lt;span class="s1"&gt;        获取当前元素的截屏。如果出现任何IOError,返回False,否则返回True。filename使用绝对路径。&lt;/span&gt;
&lt;span class="s1"&gt;        filename: 保存截屏文件的绝对路径&lt;/span&gt;
&lt;span class="s1"&gt;        用法：element.Screenshot(&amp;#39;&lt;/span&gt;&lt;span class="sr"&gt;/Screenshots/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;png&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;

&lt;span class="s1"&gt;    send_keys(*value)&lt;/span&gt;
&lt;span class="s1"&gt;        模拟键入元素&lt;/span&gt;
&lt;span class="s1"&gt;        value: 键入字符串，或设置表单。设置文件输出，可以为文件的绝对路径&lt;/span&gt;

&lt;span class="s1"&gt;        可以用来发送简单的按键事件或填充表单：&lt;/span&gt;
&lt;span class="s1"&gt;           form_textfield = driver.find_element_by_name(&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;           form_textfield.send_keys(&amp;quot;admin&amp;quot;)&lt;/span&gt;

&lt;span class="s1"&gt;        同样可以用于设置文件输入。&lt;/span&gt;

&lt;span class="s1"&gt;            file_input = driver.find_element_by_name(&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;profilePic&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;            file_input.send_keys(&amp;quot;path/to/profilepic.gif&amp;quot;)&lt;/span&gt;
&lt;span class="s1"&gt;            #Generally it&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;cross&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;file_input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send_keys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abspath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path/to/profilepic.gif&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;提交表单&lt;/span&gt;

    &lt;span class="n"&gt;value_of_css_property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;CSS&lt;/span&gt;&lt;span class="err"&gt;属性的值&lt;/span&gt;

    &lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="n"&gt;selenium&lt;/span&gt; &lt;span class="err"&gt;使用的内部编号&lt;/span&gt;
        &lt;span class="err"&gt;主要内部用户使用。可以用于简单检查&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;个元素是否为同一元素，可以使用“&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="err"&gt;”：&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;element2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;These 2 are equal&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt;
        &lt;span class="err"&gt;在渲染画布中元素的位置&lt;/span&gt;

    &lt;span class="n"&gt;location_once_scrolled_into_view&lt;/span&gt;
        &lt;span class="err"&gt;元素可能在没有提示的情况下修改。用它可以找到我们可以点击的元素。此方法可以将元素滚动到视图。&lt;/span&gt;
        &lt;span class="err"&gt;返回屏幕上的顶部左侧角落的位置，或者&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="err"&gt;如果该元素是不可见的。&lt;/span&gt;

    &lt;span class="n"&gt;parent&lt;/span&gt;
      &lt;span class="n"&gt;Internal&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebDriver&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

    &lt;span class="n"&gt;rect&lt;/span&gt;
       &lt;span class="err"&gt;元素的位置和大小的字典&lt;/span&gt;

    &lt;span class="n"&gt;screenshot_as_base64&lt;/span&gt;
        &lt;span class="err"&gt;获取当前元素截屏的&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="err"&gt;位编码&lt;/span&gt;
        &lt;span class="err"&gt;用法：&lt;/span&gt;&lt;span class="n"&gt;img_b64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screenshot_as_base64&lt;/span&gt;

    &lt;span class="n"&gt;screensh_as_png&lt;/span&gt;
        &lt;span class="err"&gt;获取当前元素截屏的二进制&lt;/span&gt;
        &lt;span class="err"&gt;用法：&lt;/span&gt;&lt;span class="n"&gt;element_png&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screensh_as_png&lt;/span&gt;

    &lt;span class="n"&gt;size&lt;/span&gt; 
        &lt;span class="err"&gt;元素的大小&lt;/span&gt;

    &lt;span class="n"&gt;tag_name&lt;/span&gt; 
        &lt;span class="err"&gt;元素的&lt;/span&gt;&lt;span class="n"&gt;tagname&lt;/span&gt;&lt;span class="err"&gt;属性&lt;/span&gt;

    &lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="err"&gt;元素的文本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;UI Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.select.Select(webelement)
    deselect_all()
        清除所有选中的条目。只对选中多个支持的选择有效。如果SELECT如果不支持复合选择，则抛出NotImplementedError.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deselect_by_index(index)
    取消给定索引出的选项。通过元素的“index”属性进行，不仅仅通过计数。
    index: 被取消选项的索引
    如果指定的index没有SELECT,将抛出“NoSuchElementException&amp;quot;异常。

deselect_by_value(value)
   取消匹配参数值的选项。例如给点参数”foo&amp;quot;，将取消这样的选项：
       &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;

   value: 要匹配的值
   如果没有选项匹配给定的参数值，将抛出“NoSuchElementException&amp;quot;异常。

deselect_by_visible_text(text)
       取消同参数值匹配的可见文本的选择项。例如给出”Bar&amp;quot;，这样的选项就会取消：
           &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;

           text:要匹配的可见文本

select_by_index(index)
    选择指定索引的选项。通过元素的index属性进行，不是通过counting.
    index:被选中选项的索引
    如果给定的索引指定的选项不存在，将抛出”NoSuchElementException&amp;quot;异常

select_by_value(value)
    选择匹配参数值的所有选项。例如，给定“foo&amp;quot;，这样的选项将会选中：
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        vale:需要匹配的值
    如果没有选项匹配给定的参数值，将抛出”NoSuchElementException&amp;quot;异常。

select_by_visible_text(text)
    选择所有匹配可视文本的选项。例如给定参数“Bar&amp;quot;，这样的选项将会选中：
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        text:要匹配的可见文本
    如果没有选项匹配给定的参数值，将会抛出StaleElementReferenceException异常。

all_selected_options
   返回属于这个选项标签的所有选择选项的列表

first_selected_option
   返回选项标签的第一个选项（或则当前已选中的选项）

options 
返回属于这个选择标签的所有选项的列表
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.wait.WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)
    Bases:object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;until(method, message=&amp;quot;)
    Calls the method provided with the driver as an argument until the return value is not False.

until_not(method, message=&amp;#39;&amp;#39;)

    Calls the method provided with the driver as an argument until the return value is False.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Color Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.color.Color(red, green, blue, alpha=1)
    Bases:object
    颜色转换支持类。
    例如：
    from selenium.webdriver.support.color import Color&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    print(Color.from_string(&amp;#39;#00ff33&amp;#39;).rgba)
    print(Color.from_string(&amp;#39;rgb(1, 255, 3)&amp;#39;).hex)
    print(Color.from_string(&amp;#39;blue&amp;#39;).rgba)

    static from_string(str_)

    hex
    rgb
    rgba
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Expected conditions Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.alert_is_present
    Bases:object
    弹出预期alert&lt;/p&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_located_selection_state_to_be(locator, is_selected)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;is_selected&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_located_to_be_selected(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_selection_state_to_be(element, is_selected)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;is_selected&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;Expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_to_be_selected(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.frame_to_be_available_and_switch_to_it(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;whether&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;switches&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.invisibility_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;Expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="n"&gt;invisible&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.presence_of_all_elements_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;WebElements&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.presence_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;necessarily&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.staleness_of(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;Wait&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;attached&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;attached&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.text_to_be_present_in_element(locator, text_)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.text_to_be_present_in_element_value(locator, text_)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.title_contains(title)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sensitive&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.title_is(title)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;known&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Visibility&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;displayed&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of_any_elements_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;WebElements&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Visibility&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;displayed&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/20/selenium/"&gt;Selenium主题8&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/22/selenium/"&gt;Selenium主题10&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 21 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-21:2015/01/21/selenium/</guid><category>Selenium</category></item><item><title>selenium-API-2</title><link>http://king32783784.github.io/2015/01/20/selenium/</link><description>&lt;h3&gt;Alert&lt;/h3&gt;
&lt;p&gt;警告相关的实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;selenium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Bases&lt;/span&gt;: &lt;span class="kt"&gt;object&lt;/span&gt;
    &lt;span class="err"&gt;允许使用&lt;/span&gt;&lt;span class="nx"&gt;alerts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;使用这个类作为与&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="err"&gt;互动的接口。它包括&lt;/span&gt;&lt;span class="nx"&gt;dismissing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;忽略），&lt;/span&gt;&lt;span class="nx"&gt;accepting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;接受），&lt;/span&gt;&lt;span class="nx"&gt;inputting&lt;/span&gt;&lt;span class="err"&gt;（输入）和获取警告提示的文本信息的方法。&lt;/span&gt;
    &lt;span class="err"&gt;接受／忽略警报信息：&lt;/span&gt;
        &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;accpet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;往警报信息中输入：&lt;/span&gt;
        &lt;span class="nx"&gt;name_prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;name_prompt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Willian Shakesphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;name_prompt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;读取警报信息作为验证：&lt;/span&gt;
        &lt;span class="nx"&gt;alert_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Do you wish to quit?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alert_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;接受可用的警报信息&lt;/span&gt;
        &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;确认一个警告提示框&lt;/span&gt;

    &lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;发送用户名／密码到身份验证框（例如&lt;/span&gt;&lt;span class="nx"&gt;Basic&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;隐性发送“&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;用法&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secretGouda&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;参数：　－&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;用户名对话框的字符串　&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　密码对话框的字符串&lt;/span&gt;

    &lt;span class="nx"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;忽略警报&lt;/span&gt;

    &lt;span class="nx"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keysToSend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;向&lt;/span&gt;&lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="err"&gt;发送键&lt;/span&gt;
        &lt;span class="nx"&gt;Aargs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;keysToSend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;发送给&lt;/span&gt;&lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="err"&gt;的文本&lt;/span&gt;

    &lt;span class="nx"&gt;text&lt;/span&gt;
        &lt;span class="err"&gt;获取警报的文本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;特殊键&lt;/h3&gt;
&lt;p&gt;该键实现如下
　
    class selenium.webdriver.common.keys.Keys&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Bases: object
    一套特殊的键码：
    ADD=u&amp;#39;\ue025&amp;#39;
    ALT=u&amp;#39;\ue00a&amp;#39;
    ARROW_DOWN=u&amp;#39;\ue015&amp;#39;
    ARROW_RIGHT=u&amp;#39;\ue014&amp;#39;
    ARROW_UP=u&amp;#39;\ue013&amp;#39;
    BACKSPACE=u&amp;#39;\ue003&amp;#39;
    BACK_SPACE=u&amp;#39;\ue003&amp;#39;
    CHANCE=u&amp;#39;\ue001&amp;#39;
    CLEAR=u&amp;#39;\ue005&amp;#39;
    COMMAND=u&amp;#39;\ue03d&amp;#39;
    CONTROL=u&amp;#39;\ue009&amp;#39;
    DECIMAL=u&amp;#39;\ue028&amp;#39;
    DELETE=u&amp;#39;\ue017&amp;#39;
    DIVIDE=u&amp;#39;\ue029&amp;#39;
    DOWN=u&amp;#39;\ue015&amp;#39;
    END=u&amp;#39;\ue010&amp;#39;
    ENTER=u&amp;#39;\ue007&amp;#39;
    EQUALS=u&amp;#39;\ue019&amp;#39;
    ESCAPE=u&amp;#39;\ue00c&amp;#39;
    F1=u&amp;#39;\ue031&amp;#39;
    F10=u&amp;#39;\ue03a&amp;#39;
    F11=u&amp;#39;\ue03b&amp;#39;
    F12=u&amp;#39;\ue032&amp;#39;
    F2 = u&amp;#39;\ue032&amp;#39;
    F3 = u&amp;#39;\ue033&amp;#39;
    F4 = u&amp;#39;\ue034&amp;#39;
    F5 = u&amp;#39;\ue035&amp;#39;
    F6 = u&amp;#39;\ue036&amp;#39;
    F7 = u&amp;#39;\ue037&amp;#39;
    F8 = u&amp;#39;\ue038&amp;#39;
    F9 = u&amp;#39;\ue039&amp;#39;
    HELP = u&amp;#39;\ue002&amp;#39;
    HOME = u&amp;#39;\ue011&amp;#39;
    INSERT = u&amp;#39;\ue016&amp;#39;
    LEFT = u&amp;#39;\ue012&amp;#39;
    LEFT_ALT = u&amp;#39;\ue00a&amp;#39;
    LEFT_CONTROL = u&amp;#39;\ue009&amp;#39;
    LEFT_SHIFT = u&amp;#39;\ue008&amp;#39;
    META = u&amp;#39;\ue03d&amp;#39;
    MULTIPLY = u&amp;#39;\ue024&amp;#39;
    NULL = u&amp;#39;\ue000&amp;#39;
    NUMPAD0 = u&amp;#39;\ue01a&amp;#39;
    NUMPAD1 = u&amp;#39;\ue01b&amp;#39;
    NUMPAD2 = u&amp;#39;\ue01c&amp;#39;
    NUMPAD3 = u&amp;#39;\ue01d&amp;#39;
    NUMPAD4 = u&amp;#39;\ue01e&amp;#39;
    NUMPAD5 = u&amp;#39;\ue01f&amp;#39;
    NUMPAD6 = u&amp;#39;\ue020&amp;#39;
    NUMPAD7 = u&amp;#39;\ue021&amp;#39;
    NUMPAD8 = u&amp;#39;\ue022&amp;#39;
    NUMPAD9 = u&amp;#39;\ue023&amp;#39;
    PAGE_DOWN = u&amp;#39;\ue00f&amp;#39;
    PAGE_UP = u&amp;#39;\ue00e&amp;#39;
    PAUSE = u&amp;#39;\ue00b&amp;#39;
    RETURN = u&amp;#39;\ue006&amp;#39;
    RIGHT = u&amp;#39;\ue014&amp;#39;
    SEMICOLON = u&amp;#39;\ue018&amp;#39;
    SEPARATOR = u&amp;#39;\ue026&amp;#39;
    SHIFT = u&amp;#39;\ue008&amp;#39;
    SPACE = u&amp;#39;\ue00d&amp;#39;
    SUBTRACT = u&amp;#39;\ue027&amp;#39;
    TAB = u&amp;#39;\ue004&amp;#39;
    UP = u&amp;#39;\ue013
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;定位元素&lt;/h3&gt;
&lt;p&gt;有很多特征可以用于元素定位，实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;selenium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;By&lt;/span&gt;
    &lt;span class="nx"&gt;Bases&lt;/span&gt;:&lt;span class="kt"&gt;object&lt;/span&gt;

    &lt;span class="nx"&gt;CLASS_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class name&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;CSS_SELECTOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css selector&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;LINK_TEXT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link text&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;PARTIAL_LINK_TEXT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;partial link text&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;TAG_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag name&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;XPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xpath&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Desired Capabilities&lt;/h3&gt;
&lt;p&gt;Desired Capabilities实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;
    &lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;

    &lt;span class="err"&gt;设置默认支持的所需功能&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;以此为起点创建&lt;/span&gt;&lt;span class="n"&gt;desired&lt;/span&gt; &lt;span class="n"&gt;capbilities&lt;/span&gt;&lt;span class="err"&gt;对象用于连接&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="err"&gt;服务器或&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="n"&gt;webdrivers&lt;/span&gt;&lt;span class="err"&gt;请求&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;例如：&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
        &lt;span class="n"&gt;selenium_grid_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://198.0.0.1:4444/wd/hub&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Creat a desired capabilities object as a starting point. capabilities = &lt;/span&gt;
        &lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FIREFOX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WINDOWS&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Instantiate an instance of Remove WebDriver with the desired capabilities. driver = &lt;/span&gt;
        &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;selenium_grid_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;注：&lt;/span&gt;&lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="err"&gt;对象始终使用“&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;，避免出现改变全局类实例的副作用。&lt;/span&gt;

        &lt;span class="n"&gt;ANDROID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ANDROID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;andorid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chrome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;#39;javascriptEnabled&amp;#39;: True}&lt;/span&gt;

        &lt;span class="n"&gt;EDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WINDOWS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;broserNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MicrosoftEdge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&lt;/span&gt;

        &lt;span class="n"&gt;FIREFOX&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;firefox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;#39;marionette&amp;#39;:False,&amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;HTMLUNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;htmlunit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&lt;/span&gt;

        &lt;span class="n"&gt;HTMLUNITWITHJS&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;htmlunit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;firefox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;javascriptEnabled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;INTERNETEXPLORER&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WINDOWS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;internet explorer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;IPAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iPad&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;IPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iPhone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;OPERA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;opera&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;. &amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;PHANTOMJS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ANY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;phantomjs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;

        &lt;span class="n"&gt;SAFART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;browserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;safari&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;#39;javascriptEnabled&amp;#39;:True}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;公共部分&lt;/h3&gt;
&lt;p&gt;Utils 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;selenium.webdriver.common.utils.find_connectable_ip(host, port=None)

    将hostname解析为ip,建议ipv4.
    之所以建议ipv4,不是因为只支持ipv4,是因为一些dirvers（如firfoxdriver)不支持ipv6连接。
    如果提供了可选的端口号，仅监听给定端口号的ip.
    参数：
        * host - hostname
        * port - 可选的端口号

    返回值：
        一个单一的ip地址，字符串类型。如果找到任意ipv4地址，就会返回。或则，找到任意的ipv6地址，也会返回。如果都没有找到，返回None.


selenium.webdriver.common.utils.free_port()

    确定一个使用套接字的空闲端口

selenium.webdriver.common.utils.is_connectable(port, host=&amp;#39;localhost&amp;#39;)

    尝试通过端口连接server,查看server是否在运行。
    参数：* port:　连接的端口

selenium.webdriver.common.utils.is_url_connectable(port)

    尝试通过端口连接到／status HTTP server，查看HTTPserver是否响应。
    参数：　*port: 连接的端口

selenium.webdriver.common.utils.join_host_port(host, port)

    将hostname和port拼接到一起
    这是一个小的实现用于应对ipv6,如：
    _join_host_port(&amp;#39;::1&amp;#39;,80) == &amp;#39;[::1]:80&amp;#39;.

    参数：
       *host - hostname
       *port - 整数端口

    selenium.webdriver.common.utils.keys_to_typing(value)

        处理元素键入的值
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Firefox WebDriver&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;selenium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firefox_binary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;executable_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wires&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firefox_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;Base&lt;/span&gt;: &lt;span class="kt"&gt;selenium.webdriver.remote.webdriver.WebDriver&lt;/span&gt;
    &lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="err"&gt;退出&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="err"&gt;并每一个相关窗口&lt;/span&gt;

    &lt;span class="nx"&gt;set_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;NATIVE_EVENTS_ALLOWED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;

    &lt;span class="nx"&gt;firefox_profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Chrome WebDriver&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;selenium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;executable_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chromedriver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;service_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;service_log_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;Bases&lt;/span&gt;: &lt;span class="kt"&gt;selenium.webdriver.remote.webdriver.WebDriver&lt;/span&gt;

    &lt;span class="err"&gt;控制&lt;/span&gt;&lt;span class="nx"&gt;ChromeDriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;并允许&lt;/span&gt;&lt;span class="nx"&gt;drive&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nx"&gt;Chromedriver&lt;/span&gt;&lt;span class="err"&gt;下载地址&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//chromedriver.storage.googleapis.com/index.html](http://chromedriver.storage.googleapis.com/index.html)&lt;/span&gt;

    &lt;span class="nx"&gt;create_options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;launch_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="err"&gt;启动由&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="err"&gt;指定的&lt;/span&gt;&lt;span class="nx"&gt;Chrome&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="err"&gt;关闭浏览器和关闭启动&lt;/span&gt;&lt;span class="nx"&gt;ChromeDriver&lt;/span&gt;&lt;span class="err"&gt;时启动的&lt;/span&gt;&lt;span class="nx"&gt;ChromeDriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/19/selenium/"&gt;Selenium主题7&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/21/selenium/"&gt;Selenium主题9&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 20 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-20:2015/01/20/selenium/</guid><category>Selenium</category></item><item><title>selenium-API</title><link>http://king32783784.github.io/2015/01/19/selenium/</link><description>&lt;h3&gt;WebDriver API&lt;/h3&gt;
&lt;p&gt;注：这不是官方API文档，官方在这：&lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/api.html"&gt;Selenium Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇覆盖了Selenium Webdriver的所有接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐导入样式&lt;/strong&gt;
本节API展示了类的绝对位置。推荐的导入风格如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，可以访问的类如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webdriver.Firefox
webdriver.FirefoxProfile
webdriver.Chrome
webdriver.ChromeOptions
webdriver.Ie
webdriver.Opera
webdriver.PhantomJS
webdriver.Remote
webdriver.DesiredCapabilities
webdriver.ActionChains
webdriver.TouchActions
webdriver.Proxy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特殊键类（keys)可以这样导入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;异常类可以这样导入（以实际的类名替换TheNameOfTheExceptionClass):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TheNameOfTheExceptionClass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;API使用约定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些属性（如方法）是可调用的，一些属性（如properties)是不可调用的，所有可调用的属性均以圆括号结尾。&lt;/p&gt;
&lt;p&gt;属性的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current_url
当前加载页面的URL
Usage:
    driver.current_url&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法的例子：
* close()
选择关闭的窗口
Usage:
    driver.close()&lt;/p&gt;
&lt;h4&gt;异常&lt;/h4&gt;
&lt;p&gt;所有的webdriver代码都可能会触发异常&lt;/p&gt;
&lt;p&gt;exception Selenium.common.exceptions.ElementNotSelectableException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidElementStateException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试图选择一个不能选择的元素时抛出
例如，选择“script"元素&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ElementNotVisibleException(msg=None,screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Bases:selenium.common.exceptions.InvalidElementStateException
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当一个元素存在于DOM中，但是不可访问的，如果试图与之互动，则会触发该异常。
大多数情况是试图点击或读取试图中隐藏的元素的文本&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ErrorInResponseException(response, msg)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;服务端发生错误时抛出
当和firefox插件或remote driver server通信时可能会触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ImeActivationFailedException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当激活输入法引擎失败时触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ImeNotAvailableException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IME支持不可用时。当平台上任何依赖IME的方法，调用IME不可用时，均会触发。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.InvalidCookieDomainException(msg=None, srceen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试图在超出当前URL的不同域添加一个cookie时触发&lt;/p&gt;
&lt;p&gt;exceptin selenium.common.exceptions.InvalidElementStateException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exception selenium.common.exceptions.InvalidSelectorException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NoSuchElementException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当selector被用来查找返回一个不是WebElement时触发。
目前只用在当selector查找一个无效的 xpath或 xpath指向的不是一个WebElements.&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.InvalidSwitchToTargetException(msg=None, screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当切换到的frame或窗口目标不存在时触发&lt;/p&gt;
&lt;p&gt;exeption selenium.common.exceptions.MoveTargetOutOfBoundsException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当供给ActionsChains move() 方法的目标无效时触发，如超出文本&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoAlertPresentException(msg=None, screen=None,
stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当切换到没有弹出警告时触发。
当通过调用Alert()类的操作后，屏幕中未弹出警告窗口时触发。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchAttributeException(msg=None,screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当元素的属性找不到时抛出
可能会检查测试时浏览器中属性。在不同浏览器中，相同的属性可能会有不同的名称。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptionsNoSuchElemention(msg=None, screen=None,stacktrace)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当元素找不到时抛出该异常。
如果遇到此异常，可能要检查以下内容：
    * 检查find_by...使用的selector
    * 元素在查找时没有在页面上
    页面可能仍在加载中，需要使用wait方法去等待&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchFrameException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidSwitchToTargetException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当切换的Frame不存在时触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchWindowException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidSwitchToTargetException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当切换的窗口不存在时触发
要想获取当前活动窗口的句柄，可以通过下面的方法获取活动窗口的句柄列表：
        print driver.windown_handles&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.RemoteDriverServerException(msg=None, screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exception selenium.common.exceptions.StaleElementReferenceException(msg=None. screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当引用一个过期的元素时触发该异常
过期的意思是不再在页面的ＤＯＭ中出现。
触发StaleElementReferenceException的原因包括，但不限于：
    * 很长时间没有操作页面，当定位元素时，页面已经更新。
    * 元素出现后，该元素可能被删除后重新添加到屏幕的。这可能发生在javascript框架更新和节点重建时。
    * 元素可能在iframe中，或文本内容已更新&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.TimeoutException(msg=Noe, scren=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当已命令没有在规定时间内完成时会触发该异常&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnableToSetCookieException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exeptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当driver设置cookie失败时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnexpectdAlertPresentException(msg=None, screen=None, stacktrace=None, alert_text=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当未知的警告窗口弹出时抛出
通常阻止执行许多预期命令的webdriver时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnexpectedTagNameException(msg=None, scren=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当支持的类没有得到预期的web元素时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.WebDriverException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Webdriver　基本异常&lt;/p&gt;
&lt;h3&gt;动作链&lt;/h3&gt;
&lt;p&gt;该动作链实施，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;selenium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action_chains&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Base&lt;/span&gt;:&lt;span class="kt"&gt;object&lt;/span&gt;
    &lt;span class="nx"&gt;ActionChains&lt;/span&gt;&lt;span class="err"&gt;是底层自动化交互，比如鼠标移动，鼠标按键操作，按键和上下文交互菜单。可以用来做一些负责的动作比如悬停和拖放等。&lt;/span&gt;
    &lt;span class="err"&gt;生成用户操作&lt;/span&gt;
    &lt;span class="err"&gt;当你调用&lt;/span&gt;&lt;span class="nx"&gt;ActionChains&lt;/span&gt; &lt;span class="err"&gt;类的一些方法实现动作，这些动作可以存储到&lt;/span&gt;&lt;span class="nx"&gt;ActionChains&lt;/span&gt;&lt;span class="err"&gt;类中。当你调用&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="err"&gt;这些事件会顺序发射执行。&lt;/span&gt;
    &lt;span class="nx"&gt;action_chains&lt;/span&gt;&lt;span class="err"&gt;可以在链模式中使用：&lt;/span&gt;

        &lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.nav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;hidden_submenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.new #submen1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　　　&lt;/span&gt;
        &lt;span class="nx"&gt;action_chains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hidden_submenu&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;　　　　&lt;/span&gt;
    &lt;span class="err"&gt;或动作一个接一个顺序执行：&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.nav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;hidden_submenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.nav #submenu1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;move_to_elment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hidden_submenu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;　　&lt;/span&gt;
    &lt;span class="err"&gt;无论哪种方式，这些动作都会顺序调用执行。&lt;/span&gt;

    &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;点击一个元素&lt;/span&gt;

        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;鼠标点击元素，如果没有，点击当前鼠标的位置。&lt;/span&gt;

    &lt;span class="nx"&gt;click_and_hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on_elememt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;按住在元素上按住鼠标左键&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;鼠标点击元素，没有，点击当前鼠标的位置&lt;/span&gt;

    &lt;span class="nx"&gt;context_click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;在元素上右击&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;上下文点击该元素，如果没有，点击鼠标当前的位置&lt;/span&gt;

    &lt;span class="nx"&gt;double_click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;双击元素&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;双击该元素，如果，双击鼠标当前的位置&lt;/span&gt;

    &lt;span class="nx"&gt;drag_and_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="err"&gt;　左击并保持&lt;/span&gt;
        &lt;span class="err"&gt;然后移动到目标元素并且是否鼠标&lt;/span&gt;

        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;鼠标按下的元素&lt;/span&gt;
            &lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　鼠标移动到元素&lt;/span&gt;
            &lt;span class="err"&gt;　&lt;/span&gt;
    &lt;span class="nx"&gt;drag_and_drop_by_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xoffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;左击点击&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;然后，移动到目标偏移地址，并释放鼠标&lt;/span&gt;

        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;鼠标点击的元素&lt;/span&gt;
              &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;xoffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;元素移动的&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="err"&gt;偏移量&lt;/span&gt;
              &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;元素移动的Ｙ偏移量&lt;/span&gt;

    &lt;span class="nx"&gt;key_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;仅发送一个按键，不释放&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;多用于组合键）&lt;/span&gt;
        &lt;span class="err"&gt;需要和修饰键一起使用（控制，&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;Aargs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;被发送的修饰键，在&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="err"&gt;类中定义&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;发送键作用的元素。如果为空，则向作用于当前焦点元素&lt;/span&gt;

        &lt;span class="err"&gt;例如，按下&lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;:
            &lt;span class="kt"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;key_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTROL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;key_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTROL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;key_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;释放修饰键&lt;/span&gt;
        &lt;span class="nx"&gt;Aargs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;发送的修饰键盘，在&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="err"&gt;类中定义。&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;作用于的元素，如果为空，默认作用于当前焦点元素&lt;/span&gt;
        &lt;span class="err"&gt;例如，按下&lt;/span&gt;&lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;:
            &lt;span class="kt"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;key_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTROL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;key_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTROL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;move_by_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xoffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;从当前鼠标位置，移动一定的偏移位置&lt;/span&gt;
        &lt;span class="nx"&gt;Aargs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;xoffset&lt;/span&gt;: &lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="err"&gt;偏移量，可以为正或负的整数&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;: &lt;span class="kt"&gt;y&lt;/span&gt;&lt;span class="err"&gt;偏移量，可以为正或负的整数&lt;/span&gt;

    &lt;span class="nx"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;移动鼠标到元素的中间&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;to_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;移动的目标&lt;/span&gt;&lt;span class="nx"&gt;WebElement&lt;/span&gt;

    &lt;span class="nx"&gt;move_to_element_with_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to_element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xoffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;指定元素偏移一定量&lt;/span&gt;
            &lt;span class="err"&gt;偏移量相对于元素的左上角&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;to_elemnt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;被移动的&lt;/span&gt;&lt;span class="nx"&gt;WebElement&lt;/span&gt;
              &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;xoffset&lt;/span&gt;: &lt;span class="kt"&gt;x&lt;/span&gt;&lt;span class="err"&gt;偏移量&lt;/span&gt;
              &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;yoffset&lt;/span&gt;: &lt;span class="kt"&gt;y&lt;/span&gt;&lt;span class="err"&gt;偏移量&lt;/span&gt;

    &lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;执行所有存储的操作&lt;/span&gt;

    &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;释放作用于元素的按键&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;on_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;指定作用的元素，如果为空，释放当前鼠标作用的位置&lt;/span&gt;

    &lt;span class="nx"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;keys_to_send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;发送按键到当前焦点元素&lt;/span&gt;
        &lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;keys_to_send&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;发送的按键。修饰键常量可以在‘&lt;/span&gt;&lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;类中找到&lt;/span&gt;

&lt;span class="s1"&gt;    send_keys_to_element(element, *keys_to_send)&lt;/span&gt;
&lt;span class="s1"&gt;        发送按键到一个元素&lt;/span&gt;
&lt;span class="s1"&gt;        Args: * element: 发送按键作用的元素&lt;/span&gt;
&lt;span class="s1"&gt;              * keys_to_send: 发送的按键类型，修饰键常量可以在“Keys&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;类中找到。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/18/selenium/"&gt;Selenium主题6&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/20/selenium/"&gt;Selenium主题8&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 19 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-19:2015/01/19/selenium/</guid><category>Selenium</category></item><item><title>selenium-页面对象</title><link>http://king32783784.github.io/2015/01/18/selenium/</link><description>&lt;h3&gt;一、页面对象&lt;/h3&gt;
&lt;p&gt;该篇是介绍页面对象设计模式的方法。页面对象是Web应用程序用户界面的区域，测试时主要在此区域。&lt;/p&gt;
&lt;p&gt;使用页面对象模式的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建多测试用例共用的可重复代码&lt;/li&gt;
&lt;li&gt;减少重复的代码&lt;/li&gt;
&lt;li&gt;如果用户界面发生改变，只需修改一次对应部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.测试用例&lt;/h4&gt;
&lt;p&gt;以下是一个测试python.org搜索字符串的用例，并且确保可以查到一些结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;page&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PythonOrgSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;A sample teest class to show how page object works&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.python.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_python_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Tests python.org search feature. searchs for the word &amp;quot;pycon&amp;quot; then verified that some results show up.&lt;/span&gt;
&lt;span class="sd"&gt;        Note that it does not look for any particular test in search results page. This test verifies that the &lt;/span&gt;
&lt;span class="sd"&gt;        results were not empty.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Load the main page. In this case the home page of Python.org.&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#Checks if the word &amp;quot;python&amp;quot; is in title&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_title_matches&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python.org title desn&amp;#39;t match.&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;#Sets the text of search textbox to &amp;quot;pycon&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_text_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pycon&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click_go_button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;search_results_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResultsPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#Verifies that the results page is not empty&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;search_results_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_results_found&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No results found.&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.Page　对象类&lt;/h4&gt;
&lt;p&gt;Page 对象模式是为每个页面创建一个对象。按照此方法，创建一个测试代码与技术实施之间的隔离层。
page.py可以为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;element&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BasePageElement&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainPageLocators&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchTextElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePageElement&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; This class gets search text from the specified locator&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# The locator for search box where search string is entered&lt;/span&gt;
    &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Base class to initialize the base page that will be called from all pages&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Home page action methods come here. I.e. Python.org&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#Declares a variable that will contain the retrieved text&lt;/span&gt;
    &lt;span class="n"&gt;search_text_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchTextElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_title_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Verifies that the hardcoded text &amp;quot;Python&amp;quot; appers in page title&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;click_go_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Triggers the search&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MainPageLocators&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GO_BUTTON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchResultsPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Search results page action methods come here&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_results_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Probably should search for this text in the specific page&lt;/span&gt;
        &lt;span class="c1"&gt;# element, but as for now it works fine&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No results found.&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.Page elements&lt;/h4&gt;
&lt;p&gt;element.py 可以是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasePageElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Base page class that is initialized on every page object class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Sets the text to the value supplied&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.Locators&lt;/h4&gt;
&lt;p&gt;一种方式为将locators字符串和使用的地方分离。下面的例子，同一页面的locators属于同一个类。
locators.py：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPageLOcators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A class for main page locators. All main page locators should come here&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;GO_BUTTON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchResultPageLocators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A class for search results locators. All search results locators should come here&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/17/selenium/"&gt;Selenium主题5&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/19/selenium/"&gt;Selenium主题7&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 18 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-18:2015/01/18/selenium/</guid><category>Selenium</category></item><item><title>selenium-等待</title><link>http://king32783784.github.io/2015/01/17/selenium/</link><description>&lt;h3&gt;一、等待&lt;/h3&gt;
&lt;p&gt;目前大多数网络应用都在使用AJAX技术。当浏览器加载一个页面，页面上的元素可能分多次进行加载。这会导致元素定位困难，如果元素没有在DOM中出现，则会触发ElementNotVisibleException异常。通过等待，我们可以解决这个问题。等待提供了设置操作间的时间间隔－元素定位直接或其他元素操作。&lt;/p&gt;
&lt;p&gt;Selenium Webdriver 提供了等待的两种类型，implicit和explicit。显式等待是使webdriver在操作之间有确定的时间等待。隐式等待是使WebDriver 去间隔的轮询DOM，尝试定位到元素。&lt;/p&gt;
&lt;h4&gt;1.显式等待&lt;/h4&gt;
&lt;p&gt;显式等待是代码中定义一定的条件，等待条件达成，继续执行。最差的方式是time.sleep(),通过设置等待时间间隔实现。有一些便利方法，会帮助设置等待时间。WebDriverWait与ExpectedCondition组合就是其中一种实现方式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expected_conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;


&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://somedomain/url_that_delays_loading&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myDynamicElement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例代码，默认等待１０s或则在１０s内找到元素，否则触发TimeoutException异常。默认情况下，WebDriverWait等待500ms就会触发异常，直到成功返回元素.ExpectedCondition成功的返回值是布尔值true或非空代表其他值的异常类型。&lt;/p&gt;
&lt;h5&gt;2.预期条件&lt;/h5&gt;
&lt;p&gt;以下列举了浏览器自动化测试常用的条件。Python＆selenium提供了一些便利方法，所以不必自己编写一个expected_condition类或为他们创建自己的工具包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title_is&lt;/li&gt;
&lt;li&gt;title_contains&lt;/li&gt;
&lt;li&gt;presence_of_element_located&lt;/li&gt;
&lt;li&gt;visibility_of_element_located&lt;/li&gt;
&lt;li&gt;visibility_of&lt;/li&gt;
&lt;li&gt;presence_of_all_elements_located&lt;/li&gt;
&lt;li&gt;text_to_be_present_in_element&lt;/li&gt;
&lt;li&gt;text_to_be_present_in_element_value&lt;/li&gt;
&lt;li&gt;frame_to_be_available_and_switch_to_it&lt;/li&gt;
&lt;li&gt;invisibility_of_element_located&lt;/li&gt;
&lt;li&gt;element_to_be_clickable-it is Displayed and Enabled&lt;/li&gt;
&lt;li&gt;staleness_of&lt;/li&gt;
&lt;li&gt;element_to_be_selected&lt;/li&gt;
&lt;li&gt;element_located_to_be_selected&lt;/li&gt;
&lt;li&gt;element_selection_state_to_be&lt;/li&gt;
&lt;li&gt;element_located_selection_state_to_be&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alert_is_present&lt;/p&gt;
&lt;p&gt;from selenium.webdriver.support import expected_conditions as EC&lt;/p&gt;
&lt;p&gt;wait = WebDriverWait(driver, 10)
element = wait.until(EC.element_to_be_clickable(By.ID, 'someid')))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该预期条件模块包含了通过WebDriverWait实现的预期条件。&lt;/p&gt;
&lt;h4&gt;3.隐式等待&lt;/h4&gt;
&lt;p&gt;隐式等待让WebDriver试图找单个元素或多个元素失败后，在一定时间间隔下轮询DOM.默认设置为０。一旦设置，隐式等待会伴随WebDriver对象的整个生命周期。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# seconds&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://somedomain/url_that_delays_loading&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;myDynamicElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myDynamicElement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/16/selenium/"&gt;Selenium主题4&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/18/selenium/"&gt;Selenium主题6&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-17:2015/01/17/selenium/</guid><category>Selenium</category></item><item><title>selenium-元素定位</title><link>http://king32783784.github.io/2015/01/16/selenium/</link><description>&lt;h3&gt;元素定位&lt;/h3&gt;
&lt;p&gt;提供很多种方式去定位页面的元素。可以从中选择一个适合的用于测试。Selenium 提供了以下方法用于定位页面元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*find_element_by_id
*find_element_by_name
*find_element_by_xpath
*find_element_by_link_text
*find_element_by_partial_link_text
*find_element_by_tag_name
*find_element_by_class_name
*find_element_By_css_selector
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要找到多个元素（这些方法将返回一个列表）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*find_elements_by_name
*find_elements_by_xpath
*find_elements_by_link_text
*find_elements_by_partial_link_text
*find_elements_by_tag_name
*find_elements_by_class_name
*find_elements_by_css_selector
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了上面列出的公共方法外，还有两个用于页面对象定位器的私有方法。这两个私有方法是：find_element 和　find_elements.
用法例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//button[test()=&amp;quot;Some text&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些都是类可用的属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ID = &amp;quot;id&amp;quot;
XPATH = &amp;quot;xpath&amp;quot;
LINK_TEXT = &amp;quot;link text&amp;quot;
PARTIAL_LINK_TEXT = &amp;quot;partial link text&amp;quot;
NAME = &amp;quot;name&amp;quot;
TAG_NAME = &amp;quot;tag name&amp;quot;
CLASS_NAME = &amp;quot;class name&amp;quot;
CSS_SELECTOR = &amp;quot;css selector&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.使用ID定位&lt;/h4&gt;
&lt;p&gt;当你知道元素的id属性时，可以用ＩＤ定位。这种方式，将返回第一个和ＩＤ属性匹配的元素。如果没有匹配的元素，将会触发NoSuchElementException异常.
例如，参考这个页面的源代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loginForm&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Login&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过下面方式定位form元素：
　
    login_form = driver.find_element_by_id('loginForm')&lt;/p&gt;
&lt;h4&gt;2.使用名称定位&lt;/h4&gt;
&lt;p&gt;当知道元素的名称属性时，可以通过名称的方式定位。这种方式，将返回第一个和name属性匹配的元素。如果没有匹配的元素，将触发NoSuchElementException异常。
例如，参考页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;loginForm&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Login&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clear&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;username和password元素可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username = driver.find_element_by_name(&amp;#39;username&amp;#39;)
password = driver.find_element_by_name(&amp;#39;password&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样在“Clear"按钮之前，“login”按钮将先被获取：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;continue = driver.find_element_by_name(&amp;#39;continue&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.使用Xpath定位&lt;/h4&gt;
&lt;p&gt;Xpath是ＸＭＬ文档中定于节点的语言。ＨTML可以看做是XML的一种实现，Selenium可以通过这一强大的语言去定位web应用的元素。XPath定位方法超过了id和name定位方法，它可以实现一些更多的定位可能，比如定位页面中第三个复选框。&lt;/p&gt;
&lt;p&gt;使用Xpath定位一个很大原因是需要定位一个没有合适的is/name的元素。XPath可以定位相对路径的元素，还可以定位有id/name的元素。Xpath还可以用于指定通过id/name定位的元素。&lt;/p&gt;
&lt;p&gt;XPaths可以获取所有root(html)中的元素的位置，虽然结果可能会失败，但对ＡＰＰ基本不会造成影响。可以借助通过id/name定位目标元素临近的元素的相对关系去定位目标元素。这种方式一般不太会改变，所有能增加测试的鲁棒性。&lt;/p&gt;
&lt;p&gt;例如，参考下面的页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loginForm&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Login&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clear&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;form元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;login_form = driver.find_element_by_xpath(&amp;quot;/html/body/form[1]&amp;quot;)
login_form = driver.find_element_by_xpath(&amp;quot;//form[1]&amp;quot;)
login_form = driver.find_element_by_xpath(&amp;quot;//form[@id=&amp;#39;loginForm&amp;#39;]&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;1.绝对路径（只对HTML可能造成轻微影响）&lt;/li&gt;
&lt;li&gt;2.HTML中第一个form元素&lt;/li&gt;
&lt;li&gt;3.通过表单元素的id定位值为”loginForm“的表单元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;username元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username = driver.find_element_by_xpath(&amp;quot;//form[input/@name=&amp;#39;username&amp;#39;]&amp;quot;)
username = driver.find_element_by_xpath(&amp;quot;//form[@id=&amp;#39;loginForm&amp;#39;]/input[1]&amp;quot;)
username = driver.find_element_by_xpath(&amp;quot;//input[@name=&amp;#39;username&amp;#39;]&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;1.通过第一个form元素的input子元素中name属性为"username"的元素定位&lt;/li&gt;
&lt;li&gt;2.通过name属性为"loginForm"的form元素的input元素的第一个子元素定位&lt;/li&gt;
&lt;li&gt;3.通第一个name属性为”username"的input元素定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Clear"元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clear_button = driver.find_element_by_xpath(&amp;quot;//input[@name=&amp;#39;continue&amp;#39;][@type=&amp;#39;button&amp;#39;]&amp;quot;)
clear_button = driver.find_element_by_xpath(&amp;quot;//form[@id=&amp;#39;loginForm&amp;#39;]/input[4]&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;1.通过name属性为”continue"的input元素中name属性为"button"的元素定位。&lt;/li&gt;
&lt;li&gt;2.通过id值为'loginForm'的form元素的第４个input子元素定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的例子基本覆盖了基本用法，如果想了解更多，可以参考一下链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.whoishostingthis.com/resources/xslt/"&gt;W3Schools Xpath Tutorial&lt;/a&gt; (Thanks Jennifer for the original link invalid reminder.It's updated now)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/xpath/"&gt;W3C Xpath Recommendition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zvon.org/comp/r/tut-XPath_1.html"&gt;XPath Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也有几个非常有用的附加组件，可帮助通过XPath定位元素：
&lt;em&gt; &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/?id=1095"&gt;XPath Checker&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/"&gt;Firebug&lt;/a&gt;
* &lt;a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl"&gt;XPath Helper&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;4.通过链接文本定位超链接&lt;/h4&gt;
&lt;p&gt;当你知道一个锚点的链接文本，可以通过下面方式定位。这种方式，会返回第一个匹配的位置。如果没有匹配的元素，将会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;参考一下页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Are you sure you want to do this?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Continue&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cancel.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;continue.html的链接可以这样定位：
　
    continue_link = driver.find_element_by_link_text('Continue')
    continue_link = driver.find_element_by_partial_link_text('Conti')&lt;/p&gt;
&lt;h4&gt;5.通过Tag Name定位元素&lt;/h4&gt;
&lt;p&gt;当知道tag name的情况下，可以通过tag name去定位元素。同样，这个方式只会返回第一个匹配tagname的元素。如果找不到，同样会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;页源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;h1元素可以这样定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heading1 = driver.find_element_by_tag_name(&amp;#39;h1&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;6.通过class name定位元素&lt;/h4&gt;
&lt;p&gt;下面的方式可以通过class name属性去定位元素。同样会返回第一个匹配的元素。如果找不到元素，就会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;页源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元素“p"可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;content = driver.find_element_by_class_name(&amp;#39;content&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;7.通过CSS选择器定位元素&lt;/h4&gt;
&lt;p&gt;使用下面的方式，可以通过CSS选择器去定位元素。同样，该方式也是返回第一个匹配CSS选择器的元素。如果没有匹配的元素，则触发NoSuchElementException异常。
页面源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元素”p"可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;content = driver.find_element_by_css_selector(&amp;#39;p.content&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/15/selenium/"&gt;Selenium主题3&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/17/selenium/"&gt;Selenium主题5&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 16 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-16:2015/01/16/selenium/</guid><category>Selenium</category></item><item><title>selenium-常用方法</title><link>http://king32783784.github.io/2015/01/15/selenium/</link><description>&lt;h3&gt;一 导航&lt;/h3&gt;
&lt;p&gt;使用WebDriver第一件想做的事情就是导航到指定链接。通常可以调用get方法去实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get(&amp;quot;http://www.google.com&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;driver.get方法会导航到url指定的页面。webdriver会等待页面完全加载后，把控制权还给test脚本。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。如果你想确保页面加载完全可以使用wait.&lt;/p&gt;
&lt;h4&gt;1.页面交互&lt;/h4&gt;
&lt;p&gt;只是导航到指定链接并不是很有用。我们想做的页面上的交互，准确的说是页面的元素操作。首先，我们要先找到它。webdriver提供了很多方法去找到元素，例如，元素定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;passwd&amp;quot; id=&amp;quot;passwd-id&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以使用下面方法找到该元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = driver.find_element_by_id(&amp;quot;passwd-id&amp;quot;)
element = driver.find_element_by_name(&amp;quot;passwd&amp;quot;)
element = driver.find_element_by_xpath(&amp;quot;//input[@id=&amp;#39;passwd-id&amp;#39;]&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以通过文本去找到链接，但要小心。该文本必须完全匹配。同样需要小心使用XPATH. 如果有多个元素匹配，只有第一个会返回。如果都没有找到，则会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;WebDriver有一个”Object-based"API;所有类型的元素使用相同的接口。这意味着，虽然使用IDE自动补全功能会看到大量可用的方法，但是并不是所有的都可用或有效。不必担心，Webdriver 会尽量去做正确的事情，如果调用了一个没有意义的方法，会触发异常。&lt;/p&gt;
&lt;p&gt;获取了元素之后，就可以输入文本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.send_keys(&amp;quot;some text&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以通过“Key"类模拟使用方向键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.send_keys(&amp;quot; and some&amp;quot;, Keys.ARROW_DOWN)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;send_keys可以将键盘快捷键应用到任何元素中，例如Gmail.但有一个副作用是输入的文本区的内容不能自动清除。相反，输入的内容会追加到输入区。可以clear方法容易的清除这些内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.clear()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.填写表单&lt;/h4&gt;
&lt;p&gt;前面已经说了如何在输入区输入文本，但其他元素呢？可以使用"toggle"下拉状态，使用“setSelected"进行选择框的设置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = driver.find_element_by_xpath(&amp;quot;//select[@name=&amp;#39;name&amp;#39;]&amp;quot;
all_options = element.find_element_by_tag_name(&amp;quot;option&amp;quot;)
for option in all_options:
    print(&amp;quot;Value is: %s&amp;quot; % option.get_attribute(&amp;quot;value&amp;quot;))
    option.click()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它会找到第一个”SELECT"元素，并且循环打印每个选项的值，并且选中。
这不是处理SELECT元素最有效的方式。WebDriver支持一个“Select"类，这个类提供了处理这些的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_visible_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WebDriver 同样提供取消所有选项的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select = Select(driver.find_element_by_id(&amp;#39;id&amp;#39;))
select.deselect_all()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这会取消页面上第一个SELECT中选项。&lt;/p&gt;
&lt;p&gt;假设在一次测试中，我们需要所有默认选项的列表。Select类提供的方法可以返回一个列表。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select = Select(driver.find_element_by_xpath(&amp;quot;xpath&amp;quot;)
all_selected_options = select.all_selected_options
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取所有可用的选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;options = select.options
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当完成表格填写后，需要提交。一种方式就是找到"submit”键进行点击：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Assume the button has the ID &amp;quot;submit&amp;quot;:)
driver.find_element_by_id(&amp;quot;submit&amp;quot;).click()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，WebDriver有适用每个元素"submit"的简单方法。如果你在form中调用submit方法，webdriver会遍历DOM并调用submit，直到找到form的结束。如果元素不是一个form,就会触发NoSuchElementException异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.submit()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.拖放&lt;/h4&gt;
&lt;p&gt;可用使用drag和drop，或移动元素，或移动到另一个元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="n"&gt;action_chains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;action_chains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_and_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.窗口和框架之间移动&lt;/h4&gt;
&lt;p&gt;现在的web应用很少只有一个窗口或没有框架的。WebDriver支持使用"switch_to_window"方法移动不同名称的窗口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_window(&amp;quot;windowName&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在应用到driver的调用，全部解析到指定名称的窗口。但是如何获取窗口的名称呢？看下打开的javascript或链接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;somewhere.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;windowName&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here to open a　window&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或则，可以通过窗口句柄去使用“switch_to_window"方法。了解了这个，就可以像这样打开每一个遍历的窗口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for handle in driver.window_handles:
    driver.switch_to_window(handle)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以进行frame到frame的摆动（或在frame中）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_frame(&amp;quot;frameName&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过.路径访问子框架，或通过它的索引指定框架：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_frame(&amp;quot;frameName.0.child&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就会到达名字为frameName框架的第一个子框架的名为"child"的框架。如果使用from &lt;em&gt;top&lt;/em&gt;，所有框架都会被evaluated.&lt;/p&gt;
&lt;p&gt;当我们操作框架时，有时我们需要从子框架返回到它的父框架：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_default_content()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;5.弹出对话框&lt;/h4&gt;
&lt;p&gt;Selenium WebDriver内置了对弹出对话框的支持。当触发动作弹出一个对话框后，可以通过　alert访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alert = driver.switch_to_alert()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这会返回当前打开的alert对象。获取对象后，可以接受、忽略、读取内容或输入标志等操作。该接口同样适用于警报、确认、提示等对话框。可以参阅相关ＡＰＩ了解更多内容。&lt;/p&gt;
&lt;h4&gt;6.导航：历史记录和位置&lt;/h4&gt;
&lt;p&gt;前面，我们通过"get"命令导航到指定网页（driver.get("http://www.example.com").WebDriver有一些小的，任务聚焦的接口，并且导航也是有用的task,导航到具体网页，可以通过：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get(&amp;quot;http://www.example.com&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前后移动浏览器记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.forward()
driver.back()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，这些功能依赖于底层驱动。当你调用这些方法的时候，不同的浏览器可能会有不同行为。&lt;/p&gt;
&lt;h4&gt;7.Cookies&lt;/h4&gt;
&lt;p&gt;当离开这些后续步骤后，可能感兴趣的是了解如何使用cookies.首先，我们要确定当前域名的cookie是有效的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#　Go to the correct domain
driver.get(&amp;quot;http://www.example.com&amp;quot;)

# Now set the cookie. This one&amp;#39;s valid for the entire domain
cookie = {&amp;#39;name&amp;#39; : &amp;#39;foo&amp;#39;, &amp;#39;value&amp;#39; : &amp;#39;bar&amp;#39;}
driver.add_cookie(cookie)

# And now output all the avilable cookies for the current URL
driver.get_cookies()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/14/selenium/"&gt;Selenium主题2&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/16/selenium/"&gt;Selenium主题4&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-15:2015/01/15/selenium/</guid><category>Selenium</category></item><item><title>selenium-入门</title><link>http://king32783784.github.io/2015/01/14/selenium/</link><description>&lt;h3&gt;入门&lt;/h3&gt;
&lt;h4&gt;简单用法&lt;/h4&gt;
&lt;p&gt;如果已经具备了Selenium＆Python，可以这样开始使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.python.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pycon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No results found.&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的脚本可以保存到一个文件（例如： - python_org_search.py），那么就可以像这样运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python python_org_search.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;示例解释&lt;/h4&gt;
&lt;p&gt;selenium.webdriver 模块提供了WebDriver全部实现。目前支持WebDriver实现的是Firefox、Chrome、IE和Remote.
Keys类提供键盘操作比如RETURN, F1,ALT等。
　
    from selenium import webdriver
    form selenium.webdriver.common.keys import keys&lt;/p&gt;
&lt;p&gt;接下来，火狐的WebDriver实例被创建。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = webdriver.Firefox()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;driver.get方法会导航到url指定的页面。webdriver会等待页面完全加载后，把控制权还给test脚本。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get(&amp;quot;http://www.python.org&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一行断言确认包含"Python"字母在里面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert &amp;quot;Python&amp;quot; in driver.title
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;webdriver 提供一些如find_element_by_*的方法用于定位元素。例如，输入文本元素可以通过find_element_by_name方法使用名称属性来定位。定位方法会在后续进行详细解释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem = driver.find_element_by_name(&amp;quot;q&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，是发送关键信息，比较像从键盘输入。特殊关键信息可以通过selenium.webdriver.common.keys中的Keys 类实现。安全考虑，首先要确认输入区没有其他信息（如“搜索框”），以免影响搜索结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem.clear()
elem.send_keys(&amp;quot;pycon&amp;quot;)
elem.send_keys(Keys.RETURN)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交页面后，可以看到搜索结果或没有找到。为了确保找到了一些结果，我们需要做一些断言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert &amp;quot;No results found.&amp;quot; not in driver.page_source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，要关闭浏览器窗口。还可以通过调用quit方法去关闭。quit方法会退出整个浏览器，close会关闭一个标签页，默认情况下，大部分浏览器会关闭整个浏览器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sample1:
测试百度首页的查询功能：
百度搜索框“&lt;input class="s_ipt" name="wd" id="kw" maxlength="100" autocomplete="off" type="text"&gt;”
code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.baidu.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;百度一下，你就知道&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="c1"&gt;#elem = driver.find_element_by_name(&amp;quot;wd&amp;quot;) #locate by name&lt;/span&gt;
&lt;span class="c1"&gt;##elem = driver.find_element_by_id(&amp;quot;kw&amp;quot;) #locate by id&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;kw&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# locate by xpath&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;isoft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No results found.&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;使用Selenium编写测试&lt;/h4&gt;
&lt;p&gt;Selenium 大部分情况下都是用来编写测试用例的。Selenium本身是不提供测试工具或框架的。可以通过Python的unittest　模块去编写case,另外还可以通过pt.test或ｎｏｓｅ框架。&lt;/p&gt;
&lt;p&gt;下面是一个使用unittest框架的例子，测试的是python.org 的搜索功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PythonOrgSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_python_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.python.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pycon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No results found.&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以运行以下命令进行验证：&lt;/p&gt;
&lt;p&gt;python test_python_org_search.py&lt;/p&gt;
&lt;h4&gt;示例解析&lt;/h4&gt;
&lt;p&gt;最初，基本模块需要导入。unittest基于java的junit的内嵌模块。该模块提供了测试组织的框架。selenium.webdriver模块提供了WebDriver的所有实现。目前支持的是firefox chrome ie remote。Ｋeys类提供了键盘输入如RETURN F1 ALT等.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试用例类继承自unittest.TestCase,通过这个方式说明这是一个测试用例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PythonOrgSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup是初始化的一部分，这个方法在进行编写测试用例之前被每个测试方法调用。这里以firfox webdriver为例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setUp(self):
    self.driver = webdriver.Firefox()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个测试用例的方法。这个测试用例方法总是characters 测试开始。第一行是创建一个本地driver,来源于setUp方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_search_in_python_org(self):
    driver = self.driver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;driver.get 方法会导航到URL指定的页面。Ｗebdriver会等待页面加载完成。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get(&amp;quot;http://www.python.org&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一行断言确认包含"Python"字母在里面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert &amp;quot;Python&amp;quot; in driver.title
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;webdriver 提供一些如find_element_by_*的方法用于定位元素。例如，输入文本元素可以通过find_element_by_name方法使用名称属性来定位。定位方法会在后续进行详细解释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem = driver.find_element_by_name(&amp;quot;q&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，是发送关键信息，比较像从键盘输入。特殊关键信息可以通过selenium.webdriver.common.keys中的Keys 类实现。安全考虑，首先要确认输入区没有其他信息（如“搜索框”），以免影响搜索结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem.clear()
elem.send_keys(&amp;quot;pycon&amp;quot;)
elem.send_keys(Keys.RETURN)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交页面后，可以看到搜索结果或没有找到。为了确保找到了一些结果，我们需要做一些断言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert &amp;quot;No results found.&amp;quot; not in driver.page_source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tearDown方法每个测试方法之后都会调用。这是用来清理动作的地方。当前这个方法，实现了浏览器的关闭。同样可以调用quit方法替换close.quit方法有些地方是关闭一个标签页，默认情况下是关闭整个浏览器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tearDown(self):
    self.driver.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后是标准代码用于执行测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;
    unittest.main()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sample 
测试百度搜索
code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaiduSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_baidu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.baidu.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;百度一下，你就知道&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;isoft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No result found.&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;使用Selenium remote WebDriver&lt;/h4&gt;
&lt;p&gt;使用remote　WebDriver之前需确保Selenium server在运行。启动该server命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -jar selenium-server-standalone-2.x.x.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行Selenium　server时，会返回以下信息：
    15:43:08.541 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub&lt;/p&gt;
&lt;p&gt;上面的反馈信息说明可以使用这个URL连接到remote WebDriver.示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.desired_capabilities&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:4444/wd/hub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:4444/wd/hub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPERA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:4444/wd/hub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTMLUNITWITHJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;功能是个字典结构，可以通过字典来明确指定这些值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = webdriver.Remote(
    command_executor=&amp;#39;http://127.0.0.1:4444/wd/hub&amp;#39;,
    desired_capabilities={&amp;#39;browserName&amp;#39;: &amp;#39;htmlunit&amp;#39;,
                          &amp;#39;version&amp;#39;:&amp;#39;2&amp;#39;,
                          &amp;#39;javascriptEnabled&amp;#39;: True})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/13/selenium/"&gt;Selenium主题1&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/15/selenium/"&gt;Selenium主题3&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-14:2015/01/14/selenium/</guid><category>Selenium</category></item><item><title>selenium-基本介绍</title><link>http://king32783784.github.io/2015/01/13/selenium/</link><description>&lt;p&gt;该topic将开始学习selenium的使用。主要内容如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.安装&lt;/li&gt;
&lt;li&gt;2.入门&lt;/li&gt;
&lt;li&gt;3.导航&lt;/li&gt;
&lt;li&gt;4.元素定位&lt;/li&gt;
&lt;li&gt;5.等待&lt;/li&gt;
&lt;li&gt;6.页面对象&lt;/li&gt;
&lt;li&gt;7.WebDriver API&lt;/li&gt;
&lt;li&gt;8.常见问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;h4&gt;简介&lt;/h4&gt;
&lt;p&gt;Selenium＆python提供了使用Selenium WebDriver编写功能／通过性测试的ＡＰＩ。通过Selenium Python API可以直观的使用Selenium的功能。
Selenium&amp;amp;python提供了直观的ＡＰＩ访问Selenium WebDrivers如firefox、ie、chrome、Remote等。目前支撑的python版本为2.7\3.2及以上。
本文只涉及Selenium 2 WebDriver.Selenium1没有覆盖。&lt;/p&gt;
&lt;h4&gt;下载Selenium python支持包&lt;/h4&gt;
&lt;p&gt;可以在&lt;a href="https://pypi.python.org/pypi/selenium"&gt;PyPI page for selenium package&lt;/a&gt;下载Selenium python支持包。更好的方式是通过pip去安装，在python3.5已集成进标准库: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install selenium
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以考虑使用&lt;a href="www.virtualenv.org"&gt;virtualenv&lt;/a&gt;创建的独立python环境。Python 3.5的&lt;a href="https://docs.python.org/3.5/using/scripts.html#scripts-pyvenv"&gt;pyvenv&lt;/a&gt;和virtualenv类似。&lt;/p&gt;
&lt;h4&gt;针对windows环境的说明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1.安装python 3.5 &lt;/li&gt;
&lt;li&gt;2.在cmd.exe命令行下，使用pip命令安装
    C:\Python35\scripts\pip.exe install selenium&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就可以运行python脚本，例如一个脚本放到C:\my_selenium_script.py,可以这样执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Python35\python.exe C:\my_selenium_script.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;下载Selenium server&lt;/h4&gt;
&lt;p&gt;Selenium server是一个Java程序。建议使用JRE1.6或以上版本运行Selenium server.
可以从&lt;a href="seleniumhq.org/download/"&gt;下载&lt;/a&gt;下载Selenium server2.x,文件名类似selenium-server-standalone-2.x.x.jar.
在此之前，确认系统中已经安装了ＪＲＥ。
如果java支持，可以通过下面命令来启动Selenium server:
    java -jar selenium-server-standalone-2.x.x.jar&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/01/14/selenium/"&gt;selenium-专题２&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 13 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-13:2015/01/13/selenium/</guid><category>Selenium</category></item><item><title>selenium-浏览器性能测试</title><link>http://king32783784.github.io/2015/01/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>&lt;p&gt;浏览器是系统下比较常用的软件，在linux系统比较常用的是firefox、chrome.如何评估浏览器的基础性能？有很多评测网站进行了这边的测试。
如
&lt;em&gt; &lt;a href="http://css4-selectors.com/browser-selector-test/"&gt;CSS&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://acid3.acidtests.org/"&gt;acid3&lt;/a&gt;
&lt;em&gt; &lt;a href="http://chrome.360.cn/test/v8/run.html"&gt;v8test&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://chrome.2345.com/labs/test/octanebenchmark.html"&gt;octane&lt;/a&gt;
&lt;em&gt; &lt;a href="http://html5test.com/"&gt;html5&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://dromaeo.com/"&gt;dromaeo&lt;/a&gt;等&lt;/p&gt;
&lt;p&gt;考虑到每次测试都需要点击这些网站和取测试结果，决定采用selenium去实现自动测试。
测试代码如下：
browser-run.py:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#encoding = utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runtest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create logger with &amp;#39;spam_application&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create file handler which logs even debug messages&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create console handler with a higher log level&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create formatter and add it to the handlers&lt;/span&gt;
&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add the handlers to the logger&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;css4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://css4-selectors.com/browser-selector-test/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start-browser-selector-test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;diagram&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type2test&lt;/span&gt;
&lt;span class="n"&gt;acid3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;acid3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://acid3.acidtests.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;v8test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v8test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://chrome.360.cn/test/v8/run.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;octane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;octane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://chrome.2345.com/labs/test/octanebenchmark.htm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;main-banner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type3test&lt;/span&gt;
&lt;span class="n"&gt;html5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://html5test.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;score&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;]/div[1]/h2/strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type4test&lt;/span&gt;
&lt;span class="n"&gt;dromaeo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dromaeo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://dromaeo.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;timebar&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;]/span/strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;testxpath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;tests&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;]/li[8]/a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;runid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pause&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;resultid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialresults&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialresults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;which chromium-browser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csstest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cssresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csstest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;css4 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssresult&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;acidtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acid3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;acidresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acidtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;acid3 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;acidresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v8test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;V8test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;vresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octanetest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;octane&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octaneresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;octanetest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;octane result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;octaneresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmltest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmlresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmltest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html5test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;htmlresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dromaeo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dromaeotest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dromaeotest result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test finish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Execution failed:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;which firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csstest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cssresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csstest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;css4 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssresult&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;acidtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acid3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;acidresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acidtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;acid3 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;acidresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v8test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;V8test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;vresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octanetest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;octane&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octaneresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;octanetest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;octane result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;octaneresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmltest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmlresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmltest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html5test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;htmlresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dromaeo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dromaeotest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dromaeotest result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test finish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Execution failed:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;runtest.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;

&lt;span class="n"&gt;module_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test.runtest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dromaetest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//*[@id=&amp;#39;tests&amp;#39;]/li[3]/b/a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;check the xpath ready or not&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;module_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is  not ok&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_idon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dromaeotest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pause&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_idoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dromaeotest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test.runtest.Do_type1test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There are some errors about this test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test.runtest.Do_type2test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test.runtest.Do_type3test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browser-test.runtest.Do_type4test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;check_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testxpath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testxpath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;check_idon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;check_idoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;resultid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```                                                                                                     &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 12 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-12:2015/01/12/自动化测试/</guid><category>Selenium</category></item><item><title>测试风险识别</title><link>http://king32783784.github.io/2014/10/17/%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6/</link><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;Google所提供的开源Web应用可以分析项目信息，包括测试用例、代码变更、产品缺陷等，以确定Capabilities矩阵中的高风险区域。下图引用自James Whittaker在GTAC 2010的闭幕演讲的幻灯片，是Chrome OS的Capabilities矩阵的热点图（heap map）。图中绿色表示低风险区域，红色表示高风险区域，粉红色和橙色则表示风险居于前两者之间。测试人员可以根据热点图，更好地确定测试优先级，将有限的资源运用在最需要的地方。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/201204230733037356.jpg" height="160" width="540"&gt;&lt;/p&gt;
&lt;h3&gt;风险分析&lt;/h3&gt;
&lt;p&gt;影响软件风险的因素有很多，试图精确、定量的计算风险可能比降低风险还有困难。但软件风险基本在于“失败频率”和“影响”两个重要因素。
比如：
影响
   那些事件需要担心？ 一旦发生，对产品、公司、客户有多大影响？处理这些失败的成本多大？
失败频率
   那些区域容易出现问题？ 相同问题在持续构建时，是否重复出现？&lt;/p&gt;
&lt;p&gt;许多团队的风险分析依赖于测试人员的经验和猜测，Google的ACC工具则通过分析项目元素（测试用例、代码变更、产品缺陷等）来识别风险。这些被分析的元素位于HTSM-&amp;gt;Project Environment，是项目环境的一部分。即便不使用Google的工具，测试人员也可以利用电子表格记录Capabilities矩阵，并自行计算各个条目的风险（一些Google的测试人员也是这么做的）。在评估风险时，他可以考虑如下因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动化测试用例：该区域有自动化测试用例吗？测试在定期运行吗？测试通过率是多少？测试用例覆盖了哪些方面，没有覆盖哪些方面？&lt;/li&gt;
&lt;li&gt;手动测试：有人手动测试该区域吗？经过测试，他们对该区域有信心吗？如果满分是10分，他们会打几分？&lt;/li&gt;
&lt;li&gt;代码变更：该区域近期存在代码变更吗？变更频繁吗？变更是新增功能、代码重构、还是缺陷修复？&lt;/li&gt;
&lt;li&gt;代码复杂度：代码的规模是多少？代码是否复杂？如果复杂度的满分是10分，该区域的代码能得几分？&lt;/li&gt;
&lt;li&gt;产品缺陷：该区域的缺陷多吗？有哪些典型缺陷？哪些缺陷已经被修复？哪些缺陷还没有被修复？活跃的缺陷是在快速增加还是稳步下降？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算此类风险因素时，测试人员可以采用尽可能简单的度量方法。&lt;/p&gt;
&lt;p&gt;一方面，简单的方法更容易解释度量值的含义，从而有助于针对度量值采取相应的行动。
另一方面，复杂的方法增大了分析的难度，却往往不能提供更多的收益。&lt;/p&gt;
&lt;p&gt;通过测试去获得直接的反馈，并定期重新度量风险因素，是更注重实效的方法。这也符合ACC的风格：快速的前进，持续的迭代。在测试计划时，测试人员只要快速地确定Capabilities矩阵，而不必担心遗漏。随着测试的进展，他会对矩阵做出必要的调整，以优化测试的价值。&lt;/p&gt;
&lt;h3&gt;风险缓解&lt;/h3&gt;
&lt;p&gt;风险分析完成后，该考虑如何降低风险。风险理论上是不可能完全消除的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分析风险大的功能点，一方面从产品定义上进行合理的规避。一方面反馈到开发团队，请他们增加约束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写回归测试用例，确保问题重现时能够捕捉到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写和运行引发故障的测试用例，推动开发实现恢复和回滚的特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入对应的监听代码，以便更早的检测故障&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入代码监听软件，发现新旧版本间的行为变化以发现回归问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是一些风险缓解的有用指南：&lt;/p&gt;
&lt;p&gt;(1) 对于能力矩阵中显示为红色的高风险的功能点，一定要编写对应的测试用例或有针对性的测试指定。&lt;/p&gt;
&lt;p&gt;(2) 认真了解之前已经完成的前期测试或开发人员自测的情况，评估一些功能区域的风险级别，判断这些测试是否足够，是否需要额外增加测试？&lt;/p&gt;
&lt;p&gt;(3) 分析每个高风险区域相关的bug，保证回归测试用例的存在。&lt;/p&gt;
&lt;p&gt;(4) 仔细思索高风险的区域，咨询可能的回滚和恢复进制。&lt;/p&gt;
&lt;p&gt;(5) 推动开发人员对高风险区域的识别和测试，毕竟他们是最了解的一群人。&lt;/p&gt;
&lt;p&gt;(6) 时间存在限制时，要优先进行重要特性的测试&lt;/p&gt;
&lt;p&gt;总结，测试建模、风险分析、风险缓解都应该建立在对产品的详细了解的基础上。对产品的了解不应只留在产品需求定义和外部表现上，也要深入到产品的内部，对其内部实现上也要做到深入了解。只有做到这点，才能够创建准确、全面的测试计划、编写出可操作的测试用例、识别出产品的风险、提出合理的风险缓解的策略。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 17 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-10-17:2014/10/17/风险控制/</guid><category>test</category></item><item><title>测试建模</title><link>http://king32783784.github.io/2014/10/11/%E6%B5%8B%E8%AF%95/</link><description>&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;ACC（Attributes Components Capability）是Google测试团队使用的一种建模方法，用来快速地建立产品的模型，以指导下一步的测试计划和设计。在Google内部，ACC得到较普遍的应用，一些工程师还开发了支持ACC模型的Web应用，并将其开源。&lt;/p&gt;
&lt;p&gt;ACC的指导原则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免散漫的文字，使用简明的列表&lt;/li&gt;
&lt;li&gt;不必推销，避免华丽的介绍&lt;/li&gt;
&lt;li&gt;简洁&lt;/li&gt;
&lt;li&gt;不要把不重要的、无法执行的东西放进测试计划&lt;/li&gt;
&lt;li&gt;渐进式的描述　&lt;/li&gt;
&lt;li&gt;指导计划者的思路&lt;/li&gt;
&lt;li&gt;最终结果应该是测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ACC通过指导计划者依次考察产品的三个维度达成这个目标：描述产品目标的形容词和副词；确定产品各部分、各特性的名词；描述产品实际做什么的动词。测试需要完成的就是验证这些能力能够正常运作、产品各组件能满足应用的目标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A代表特质&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特质是系统的形容词，代表了产品的品质和特色，是区别于竞争对手的关键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C代表组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组件是系统的名词，在特质被识别之后确定。组件是构成待建系统的模块，是一个软件之所以如此的关键代码块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C代表能力　&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能力是系统的动词，代表着系统在用户指令之下完成的动作。&lt;/p&gt;
&lt;h3&gt;示例一&lt;/h3&gt;
&lt;p&gt;参考《How Google　Tests Software》中的Google+的例子。&lt;/p&gt;
&lt;p&gt;Ｇoogle+的特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Social（社交）：鼓励用户去分享信息和他们的状态&lt;/li&gt;
&lt;li&gt;Expressive（表现力）：用户可以运用各种功能去表达自我&lt;/li&gt;
&lt;li&gt;Easy（容易）：让用户以直观的方式做他们想做的事&lt;/li&gt;
&lt;li&gt;Relevant（相关）：只显示用户感兴趣的内容&lt;/li&gt;
&lt;li&gt;Extensible（可扩展）：能够与Google的已有功能、第三方网站和应用（Application）集成&lt;/li&gt;
&lt;li&gt;Private（隐私）：用户数据不会泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二步，确定Google+的Components组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Profile（个人资料）：用户的帐户信息和兴趣爱好&lt;/li&gt;
&lt;li&gt;People（人脉）：用户已经连接的好友&lt;/li&gt;
&lt;li&gt;Stream（信息流）：由帖子、评论、通知、照片等组成的有序的信息流&lt;/li&gt;
&lt;li&gt;Circles（圈子）：将好友分组，如把不同的好友归于“朋友”、“同事”等小组&lt;/li&gt;
&lt;li&gt;Notifications（通知）：当用户被帖子提到时，向他显示提示信息&lt;/li&gt;
&lt;li&gt;Hangouts（视频群聊）：视频对话的小组&lt;/li&gt;
&lt;li&gt;Posts（帖子）：用户和好友所发表的信息&lt;/li&gt;
&lt;li&gt;Comments（评论）：对帖子、照片、视频等的评论&lt;/li&gt;
&lt;li&gt;Photos（照片）：用户和好友所上传的照片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组件可以看做功能列表的顶层元素，是产品核心功能的清单。《How Google Tests Software》建议Components列表要尽可能简单，10个Components很好，20个就太多了。其目的是重点考虑对产品、对用户最重要的功能与代码，并避免漫长的Components列表所导致的分析瘫痪。&lt;/p&gt;
&lt;p&gt;第三步是确定产品的Capabilities（能力）&lt;/p&gt;
&lt;p&gt;Google+的Capabilities矩阵如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;社交&lt;/th&gt;
&lt;th&gt;表现力&lt;/th&gt;
&lt;th&gt;容易&lt;/th&gt;
&lt;th&gt;相关&lt;/th&gt;
&lt;th&gt;可扩展&lt;/th&gt;
&lt;th&gt;隐私&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;个人资料&lt;/td&gt;
&lt;td&gt;在好友中分享个人资料和兴趣爱好&lt;/td&gt;
&lt;td&gt;用户可以在网上表达自我&lt;/td&gt;
&lt;td&gt;很容易创建、更新、传播信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;向被批准的、拥有恰当访问权限的应用提供数据&lt;/td&gt;
&lt;td&gt;用户可以保密隐私信息 只向被批准、拥有恰当访问权限的应用提供信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;人脉&lt;/td&gt;
&lt;td&gt;用户能够连接他的朋友&lt;/td&gt;
&lt;td&gt;用户可以定制个人资料，使自己与众不同&lt;/td&gt;
&lt;td&gt;提供工具让管理好友变得轻松&lt;/td&gt;
&lt;td&gt;用户可以用相关性规则过滤好友&lt;/td&gt;
&lt;td&gt;向应用提供好友数据&lt;/td&gt;
&lt;td&gt;只向被批准、拥有恰当访问权限的应用提供信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息流&lt;/td&gt;
&lt;td&gt;向用户提示其好友的更新&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;用户可以根据兴趣过滤好友更新&lt;/td&gt;
&lt;td&gt;向应用提供信息流&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;圈子&lt;/td&gt;
&lt;td&gt;将好友分组&lt;/td&gt;
&lt;td&gt;根据用户的语境创建新圈子&lt;/td&gt;
&lt;td&gt;鼓励创建和修改圈子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;向应用提供圈子数据&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通知&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;简明地展示通知&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;向应用提供通知数据&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;视频群聊&lt;/td&gt;
&lt;td&gt;用户可以邀请他们的圈子加入群聊 用户可以公开其群聊 好友访问用户的信息流时，他们被告知群聊&lt;/td&gt;
&lt;td&gt;加入群聊前，用户可以预览自己的形象&lt;/td&gt;
&lt;td&gt;只要几次点击就可以创建并加入群聊 只要一次点击就可以关闭视频和音频输入 可将好友加入已有的群聊&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;用户可以在群聊中使用文字交流 YouTube视频可以加入群聊 在“设置”中可以配置群聊的硬件 没有摄像头的用户可以音频交谈&lt;/td&gt;
&lt;td&gt;只有被邀请的用户才能加入群聊 只有被邀请的用户才能收到群聊通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;帖子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;表达用户的想法&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;向应用提供帖子数据&lt;/td&gt;
&lt;td&gt;帖子只向被批准用户公布&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;评论&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;用评论表达用户的想法&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;向应用提供评论数据&lt;/td&gt;
&lt;td&gt;评论只向被批准的用户公布&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;照片&lt;/td&gt;
&lt;td&gt;用户可以分享他的照片&lt;/td&gt;
&lt;td&gt;用户能方便地上传照片 用户能方便的从其他来源导入照片&lt;/td&gt;
&lt;td&gt;与其他照片服务集成&lt;/td&gt;
&lt;td&gt;照片只向被批准的用户公布&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Capabilities通常是面向用户的（user-oriented），反映了用户视角的产品行为。测试人员也应该保持Capabilities矩阵的简洁，他们应该关注对用户而言最有价值、最有吸引力的能力，并在合适的抽象层次（right level of abstraction）记录Capabilities。最重要的是，Capabilities应该是可测的（testable），测试人员能够设计测试来检查产品实现了预期的Capabilities。&lt;/p&gt;
&lt;p&gt;有了Capabilities矩阵，测试团队就完成初始的测试计划。这就是前Google测试总监James Whittaker所说的10分钟测试计划（The Ten Minutes Test Plan）。其基本思路是专注于核心属性、核心功能和核心能力，而省略一切不必要的细节。之后，测试团队会利用矩阵去指导测试设计，通常矩阵中的一条Capability就是一个测试对象、测试策略或测试情景，而复杂的Capability会演化出更多的测试设计。&lt;/p&gt;
&lt;p&gt;总结来说，测试计划制定时可以参考ACC策略快速制定，在产品进行开发迭代时，再进行必要的调整和完善。&lt;/p&gt;
&lt;h3&gt;示例二&lt;/h3&gt;
&lt;p&gt;如果Linux桌面系统按ACC建模，如何区分？&lt;/p&gt;
&lt;p&gt;Linux桌面系统的特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易用性　良好的用户界面，包括图形用户界面、文本行界面&lt;/li&gt;
&lt;li&gt;安全性　多种安全措施，包括读写控制、审计跟踪、应用授权等&lt;/li&gt;
&lt;li&gt;可定制　可以根据应用场景进行定制&lt;/li&gt;
&lt;li&gt;易扩展　可以扩展丰富的应用&lt;/li&gt;
&lt;li&gt;兼容性　兼容多种硬件设备、基础软件&lt;/li&gt;
&lt;li&gt;支撑　　支持非法的系统调用、基础服务、基础库、开发组件等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux桌面系统的顶层组，这里是组的分类，并不是组件的分类。linux系统组件过多，不再一一说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装程序 操作系统的安装程序&lt;/li&gt;
&lt;li&gt;firstboot　firstboot设置&lt;/li&gt;
&lt;li&gt;core组　核心组件&lt;/li&gt;
&lt;li&gt;framework组　框架组件&lt;/li&gt;
&lt;li&gt;KDE　桌面环境&lt;/li&gt;
&lt;li&gt;App　系统集成应用&lt;/li&gt;
&lt;li&gt;extra　系统扩展应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linux系统的组件过多，不再详细列出，举例说明。&lt;/p&gt;
&lt;p&gt;core组件包括kernel、gcc、bash、automake、make、xorg、syslinux、systemd、glibc...
framework组件包括NetworkManager、QT、python、Perl、openvpn...
KDE组件包括isoftapp、fcitx、kde-baseapps、kf5、kde-workspace、plasma、kwin、ark、dolphin、sddm...
App组件包括chromium、bomi、isoft-safe-center、qt-creator、isoft-update...
extra组件包括k3b、clouldmusic、bullet、opencv、golang...&lt;/p&gt;
&lt;p&gt;linux系统的Capabilities（能力）&lt;/p&gt;
&lt;p&gt;linux系统的能力矩阵，不再详细划分，这里只进行顶层分组进行简略划分。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;易用性&lt;/th&gt;
&lt;th&gt;安全性&lt;/th&gt;
&lt;th&gt;可定制&lt;/th&gt;
&lt;th&gt;易扩展&lt;/th&gt;
&lt;th&gt;兼容性&lt;/th&gt;
&lt;th&gt;支撑&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;安装程序&lt;/td&gt;
&lt;td&gt;LiveCD、安装操作简便&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;分区数量、容量设置；&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swap分区、文件系统类型、home分区设置；&lt;/td&gt;
&lt;td&gt;分区助手，还原、迁移助手&lt;/td&gt;
&lt;td&gt;UEFI、legacy、多系统、多硬盘、多种硬件平台(台式机、笔记本）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firstboot&lt;/td&gt;
&lt;td&gt;设置简便&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;定制语言、账户、登陆设置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;core组&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;支持审计、读写控制&lt;/td&gt;
&lt;td&gt;各个组件可以进行裁剪和修改&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;framework组&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KDE组&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extra&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;组件太多，不再详细列出每个组件的能力。每个组件都可以再根据ACC进行测试建模。&lt;/p&gt;
&lt;h3&gt;示例二&lt;/h3&gt;
&lt;p&gt;此处，linux的包含组件过多，需要进行拆分，分别进行ACC测试建模&lt;/p&gt;
&lt;p&gt;以普华应用商店为例&lt;/p&gt;
&lt;p&gt;普华应用商店特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易　应用软件安装简单，操作容易&lt;/li&gt;
&lt;li&gt;可扩展　可以进行软件种类的丰富&lt;/li&gt;
&lt;li&gt;相关　　展示linux桌面用户常用软件&lt;/li&gt;
&lt;li&gt;独立性　安装对应应用软件，不影响系统及其他软件&lt;/li&gt;
&lt;li&gt;完整性　应用软件安装包完整&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;普华应用商店的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首页&lt;/li&gt;
&lt;li&gt;升级&lt;/li&gt;
&lt;li&gt;卸载&lt;/li&gt;
&lt;li&gt;软件分类&lt;/li&gt;
&lt;li&gt;软件介绍&lt;/li&gt;
&lt;li&gt;软件操作&lt;/li&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;li&gt;设置&lt;/li&gt;
&lt;li&gt;软件包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;普华应用商店的能力矩阵：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;容易&lt;/th&gt;
&lt;th&gt;可扩展&lt;/th&gt;
&lt;th&gt;相关&lt;/th&gt;
&lt;th&gt;独立性&lt;/th&gt;
&lt;th&gt;完整性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;首页&lt;/td&gt;
&lt;td&gt;打开简单；展示常用菜单&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;首页展示下载量大常用软件；首页新闻定期更新&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;显示完整，菜单功能正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;升级&lt;/td&gt;
&lt;td&gt;直观显示可升级软件，支持一键升级、全部升级、软件选择性升级&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;只显示可升级软件&lt;/td&gt;
&lt;td&gt;软件升级，不影响其他功能或软件&lt;/td&gt;
&lt;td&gt;软件可正常升级，升级后不影响其他应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;卸载&lt;/td&gt;
&lt;td&gt;直观显示可卸载软件，支持一键卸载、全部卸载、选择性卸载&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;只显示已安装软件&lt;/td&gt;
&lt;td&gt;软件卸载，不影响其他功能或软件&lt;/td&gt;
&lt;td&gt;软件卸载完整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;软件分类&lt;/td&gt;
&lt;td&gt;软件分类查看直观，分类清晰，支持按类全选，一键安装、选择性安装&lt;/td&gt;
&lt;td&gt;可以后台进行软件的增删&lt;/td&gt;
&lt;td&gt;分类准确，软件各组分类只包含本类相关软件&lt;/td&gt;
&lt;td&gt;同一软件只归属一个分类&lt;/td&gt;
&lt;td&gt;完整显示后台的软件分类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;软件介绍&lt;/td&gt;
&lt;td&gt;软件对应介绍页容易找到，介绍页包含软件的操作功能&lt;/td&gt;
&lt;td&gt;可以进行软件介绍的定制&lt;/td&gt;
&lt;td&gt;软件介绍内容和软件符合&lt;/td&gt;
&lt;td&gt;软件介绍页和软件一一对应，直接无干扰&lt;/td&gt;
&lt;td&gt;对软件介绍完整、准确，操作功能正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;软件操作&lt;/td&gt;
&lt;td&gt;软件操作简单，安装、卸载、升级操作简单&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;软件多种操作之间互不影响&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;搜索&lt;/td&gt;
&lt;td&gt;提供搜索框且容易找到，搜索简单便捷&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;搜索按照一定规则，并按用户搜索内容显示&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;完整显示用户查询条件下的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设置&lt;/td&gt;
&lt;td&gt;设置菜单直观&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;只包含相关菜单&lt;/td&gt;
&lt;td&gt;设置项之间互不干扰&lt;/td&gt;
&lt;td&gt;功能设置准确，包含全部相关设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;软件包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;软件包和软件分类中的软件菜单一一对应&lt;/td&gt;
&lt;td&gt;软件菜单和软件包相对独立&lt;/td&gt;
&lt;td&gt;软件包全部能够正确安装、卸载、升级且之间互不干扰&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;ACC测试建模至上而下，从产品的特质到组件，再到能力（功能）进行解析，可以快速、准确的生成一个产品测试计划。另外，对于比较大的系统产品，比如linux发行版，可以先进行大模块的划分，然后再进行各个组件的建模。像操作系统产品是多个组件或产品集成而来。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 11 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-10-11:2014/10/11/测试/</guid><category>ACC</category></item><item><title>Spec2006使用说明</title><link>http://king32783784.github.io/2014/10/10/linux/</link><description>&lt;h3&gt;一、工具介绍&lt;/h3&gt;
&lt;p&gt;SPEC CPU 2006 benchmark是SPEC新一代的行业标准化的CPU测试基准套件。重点测试系统的处理器，内存子系统和编译器。这个基准测试套件包括的SPECint基准和SPECfp基准。 其中SPECint2006基准包含12个不同的基准测试和SPECfp2006年基准包含19个不同的基准测试。SPEC设计了这个套件提供了一个比较标准的计算密集型，高性能的跨硬件的CPU测试工具。在SPEC CPU 2006基准有几种不同的方法来衡量计算机性能。 一种方式是测量计算机完成单一任务的速度; 另一种方式吞吐量，容量或速率的测量。
说明：由于spec2006支持多种类型操作系统。以下安装、测试、移植等介绍均基于Unix 和其他的 Unix-like system如linux。Windows系统不在此范围内。&lt;/p&gt;
&lt;h4&gt;1.spec2006与spec2000的对比简要说明&lt;/h4&gt;
&lt;p&gt;2006年8月24日，标准性能评估公司（SPEC）宣布CPU2006将取代CPU2000。
Spec cpu基准测试被广泛的应用于工业界和学术界。新套件比cpu2000要大很多，而且将涵盖到CPU、存储器系统、编译器特别是C++编译器。Cpu2000只有1个关于C++的基准测试，CPU2006则含有7个相关套件，这其中包括了50W行c++代码，Fortran和C语言和之前一样有很好的覆盖。&lt;/p&gt;
&lt;h4&gt;2. Spec2000和spec20006具体的套件信息如下：&lt;/h4&gt;
&lt;h5&gt;2.1 Spec int2000  12个整点测试项目&lt;/h5&gt;
&lt;p&gt;164.gzip
C语言编写，很流行的数据压缩程序。使用Lempel-Ziv coding(LZ77)作为压缩算法。SPEC中的gzip除了读入集外没有其他文件I/O操作，所有压缩和解压都在主存中进行，方便测试CPU和存储子系统。&lt;/p&gt;
&lt;p&gt;175.vpr
C语言编写，FPGA中的电路定位和路由程序,用于计算机辅助电路设计领域。&lt;/p&gt;
&lt;p&gt;176.gcc:
C语言编写，C语言优化编译器。该GCC基于GCC 2.7.2.2版本，为摩托罗拉88100处理器生成机器码。&lt;/p&gt;
&lt;p&gt;181.mcf:
C语言编写，组合优化/单点轮换调度(Single-depot vehicle scheduling),派生自使用单站轮换调度的公共物流应用程序。&lt;/p&gt;
&lt;p&gt;186.crafty：
C语言编写，国际象棋游戏程序。这是一个在64位机上设计的高性能计算机国际象棋程序，在32位机上可以使用long long来表示该数据类型。主要是一个整点程序，大量的逻辑运算。通过配置，能生成不同的搜索集，可以对处理器的整点运算，转移预测和流水线等做测试。&lt;/p&gt;
&lt;p&gt;197.parser:
C语言编写，字处理程序。连接语法分析器(Link Grammar Parser)是一个基于连接语法的英语句法分析器。连接语法时英语语法的较早理论。给定一个句子，系统能给它赋予一个词法结构，这个结构是两个词之间被标记的连接。该分析器有大约60000个词表的字典。&lt;/p&gt;
&lt;p&gt;252.eon：
C++语言编写，计算机可视化。eon是一个基于概率的射线跟踪程序，基于Kajiya 1986 ACM SIGGRAPH会议的论文。它将一定数量的3D射线发射到一个3D多面体中，计算射线和多边形的交点，并通过计算入射光和交点生成新射线。最终的计算结果时一个能在照相机内看到的图片。程序中的计算需求和基本计算机图形学中介绍的传统确定性射线跟踪程序很相似，但是它有较少的存储一致性需求，因为很多在同一个位置生成的随机射线横切3D空间中完全不同的区域.输入：eon渲染一个150×150像素的一把椅子在房间前脚的图片。&lt;/p&gt;
&lt;p&gt;253.perlbmk:
C语言编写,Perl语言解释器。这是一个Perl v5.005_03版本的删减版，删除了很多操作系统相关的特性，并增加了一些第三方的模块，包括MD5 v1.7, MHonArc v2.3.3, IO-stringy v1.205,MailTools v1.11,TimeData v1.08。输入：由四个perl脚本组成，一个email-to-HTML 转换器，占用时间最长；一个spec CPU2000用来对比较输出的diff脚本，一个通过迭代算法寻找合格数字的脚本，一个用于测试伪随机数按照预定顺序生成的脚本。输出分别对应各个输入。&lt;/p&gt;
&lt;p&gt;254.gap:
C语言编写，群论，解释器中常用。它实现一个语言和库用于做群论计算。GAP是(Groups,Algorithms和Programming的缩写)。&lt;/p&gt;
&lt;p&gt;255.vortex：
C语言编写,单用户面向对象数据库中事务处理的benchmark。SPEC中的vortex来自完整面向对象数据库程序VORTEx的一个子集。输入和输入数据库的事务都会被转换成一个方案。&lt;/p&gt;
&lt;p&gt;256.bzip2：
C语言编写，压缩程序。基于Julian Seward的bzip2 v0.1，唯一的不同是SPEC中的bzip2除了输入外，无文件I/O。所有的压缩和解压都在内存中进行。输入，输出都和gzip的相似。&lt;/p&gt;
&lt;p&gt;300.twolf：
C语言实现，定位和路由模拟。twolf来自TimberWolfSC定位和全局路由，它被用于创建微处理器产品印刷电路布局的流程中，确定晶体管的位置和组内的全局连接。定位问题是一个排列，穷举法耗时太长，TimberWolfSC程序则使用模拟退火作为启发来找到较优解。&lt;/p&gt;
&lt;h5&gt;2.2 Spec int2000  12个整点测试项目&lt;/h5&gt;
&lt;p&gt;400.perlbench：C语言编写，同spec2000的253.perlbmk类似，是Perl V5.8.7版本的删减版，同样删除了一下操作系统特性有关的东西，增加了第三方的模块，如：SpamAssassin V2.61,Digest-MD5 v2.33,HTML-Parser v3.35,MHonArc V2.6.8,IO-stringy V1.205,MailTools V1.60，TimeDate V1.16。400.perlbench采用3个脚本进行增加负载或工作。1.主要的负载在于打开 垃圾邮件过滤软件SpamAssassin。采取的过滤方式是采用记分制，也就是说会根据我们所设定的标准来给予分数超过标准值的时候即判定为 SPAM（垃圾邮件），其余为非垃圾邮件。但对SpamAssassin软件做了很大程度的修改，避免一些I/0操作，并且没有使用贝叶斯过滤。2.是比较流行的email到HTML的转换器MHonArc 3.使用了spec2006的工具套件specdiff。&lt;/p&gt;
&lt;p&gt;401.bzip2: C语言实现，同spec2000的256.bzip2类似,基于Julian Seward的bzip2 v1.03.唯一的不同是SPEC中的bzip2除了输入外，无文件I/O。所有的压缩和解压都在内存中进行。输入，输出都和gzip的相似。负载包括六个部分：两个小的JPEG图片、一个程序、一个tar包起的几个源程序文件、一个HTML文件、混合文件，包括压缩起来的高可压缩文件及不怎么可压缩的文件。测试分别使用了三个不同的压缩等级进行压缩和解压缩&lt;/p&gt;
&lt;p&gt;403.gcc:C语言实现，同spec2000的176.gcc类似。该测试是基于gcc V3.2,为AMDCPU生成机器码。相比spec2000的176.gcc，该测试有更多的输入文件，因此测试压力会更大，负载来源于对9组C代码进行编译。&lt;/p&gt;
&lt;p&gt;429.mcf:C语言实现，同时需要libm库支持，同spec2000的181.mcf类似，MCF是一个用于大型公共交通中的单站车辆调度的程序。但对输入文件做了一定的修改，由32位变成64位，用以兼容64位系统。并且增加了cache命中和程序的性能。相比spec2000的181.mcf来说，占用的内存由之前的100M-190M变为860M-1700M。&lt;/p&gt;
&lt;p&gt;445.gobmk：C语言实现，同spec2000的186.crafty类似。不同的是这里是实现的围棋游戏。相比spec2000程序更复杂。&lt;/p&gt;
&lt;p&gt;456.hmmer：C语言实现。HMMER是基于隐马尔可夫模型(profile HMMs)，用于生物序列分析工作。同Timed HMMer Search 类似。&lt;/p&gt;
&lt;p&gt;458.sjeng：C语言实现。基于一种象棋游戏Sjeng11.2，属于人工智能的范畴。&lt;/p&gt;
&lt;p&gt;462.libquantum:C语言实现（C99）。libquantum是模拟量子计算机的库文件，用来进行量子计算机应用的研究。&lt;/p&gt;
&lt;p&gt;464.h264ref:C语言实现。一种视频压缩程序，基于H264AVC 9.3版，去除了I/O和平台相关的东西。&lt;/p&gt;
&lt;p&gt;471.omnetpp:C++语言实现。OMNeT++，离散事件仿真。包括约8000台计算机和900个交换机/集线器，以及混合了各种从10Mb到1000Mb速率的大型CSMA/CD协议以太网络模拟。&lt;/p&gt;
&lt;p&gt;473 astar：C++语言实现，实现了2D寻路算法A*的三种不同版本。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xalancbmk：C++语言实现，包含Xalan-C++ v1.8 mod、Xerces-C++ v2.5.0，实现了XML文档/XSL表到HTML文档的转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;2.3 Spec fp2000  13个浮点测试项目&lt;/h5&gt;
&lt;p&gt;168 wupwise：Fortran 77语言实现，格点规范理论与威尔逊数值模拟对费米子格是夸克传播子的计算。输入文件wupwise.in包含几个创建该问题的参数，SEED:提供一个随机数 NITER：迭代次数KAPPA：参数表征矩阵M = I - KAPPA * D。输出文件wupwise.out,包含每次NITER迭代的校验值（EPS）和包含最终的EPSILON特征的结果。&lt;/p&gt;
&lt;p&gt;171 swim：Fortran 77语言实现，气象学中的浅水模型。&lt;/p&gt;
&lt;p&gt;172.mgrid ：Fortran 77语言实现，多重网格求解器：3D势场&lt;/p&gt;
&lt;p&gt;173.applu： Fortran 77语言实现，抛物线/椭圆型偏微分方程&lt;/p&gt;
&lt;p&gt;177.mesa：C语言实现 ，3D图形库。&lt;/p&gt;
&lt;p&gt;178.galgel :Fortran 90语言实现，计算流体动力学&lt;/p&gt;
&lt;p&gt;179.art :C，图像识别/神经网络&lt;/p&gt;
&lt;p&gt;183.equake:C语言实现， 地震波传播模拟&lt;/p&gt;
&lt;p&gt;187.facerec: Fortran 90语言实现，图像处理：人脸识别&lt;/p&gt;
&lt;p&gt;189.lucas :Fortran 90语言实现，数论/素性测试&lt;/p&gt;
&lt;p&gt;191.fma3d :Fortran 90语言实现，有限元模拟碰撞&lt;/p&gt;
&lt;p&gt;200.sixtrack :Fortran 77语言实现，高能核物理加速器设计&lt;/p&gt;
&lt;p&gt;301.apsi: Fortran 77语言实现，气象学中污染物分布&lt;/p&gt;
&lt;h5&gt;2.4 Spec fp2006  17个浮点测试项目&lt;/h5&gt;
&lt;p&gt;410.bwaves：Fortran 77语言实现，流体力学范畴。对三维瞬跨音速粘性流中冲击波的模拟计算&lt;/p&gt;
&lt;p&gt;416.gamess：Fortran语言实现，量子化学范畴。采用GMAESS组件，包含　胞嘧啶分子、水和Cu2+离子、三唑离子等3种SCF自洽场计算。&lt;/p&gt;
&lt;p&gt;433.milc：C语言实现，量子力学范畴，采用MILC组件，包含用来研究QCD量子色动力学、夸克及胶子的四维SU(3)格点规范理论的模。&lt;/p&gt;
&lt;p&gt;434.zeusmp ：Fortran 77/REAL*8语言实现，属于计算流体力学范畴，ZEUS-MP程序，用来计算理想、非相对论条件下的流体力学和磁流体力学，434.zeusmp模拟计算了一个统一磁场中的3D冲击波。&lt;/p&gt;
&lt;p&gt;435.gromacs ：C &amp;amp; Fortran语言实现，属于生物化学/分子力学范畴。GROMACS是一个分子力学计算套件，然而也可以用于非生物系统，435.gromacs模拟了在一个水和离子溶液中的蛋白质溶菌酶结构在各种实验手段如核磁共振的X光照射下的变化。&lt;/p&gt;
&lt;p&gt;436.cactusADM：Fortran 90, ANSI C语言实现，物理中的广义相对论。来源于Cactus　　BenchADM。436.cactusADM对时空曲率由内部物质决定的爱因斯坦演化方程进行求解，爱因斯坦演化方程由10个标准ADM 3+1分解的二阶非线性偏微分方程组成。&lt;/p&gt;
&lt;p&gt;437.leslie3d ：Fortran 90语言实现，属于流体力学范畴。  LESlie3d是用来计算湍流的计算流体力学程序，437.leslie3d计算了一个如燃油注入燃烧室的时间分层混合流体。&lt;/p&gt;
&lt;p&gt;444.namd：C++语言实现。属于生物/分子学范畴。NAMD是一个大型生物分子系统并行计算程序，444.namd模拟了了92224个原子组成的A-I载脂蛋白&lt;/p&gt;
&lt;p&gt;447.dealII：C++语言实现。进行有限元分析，w/Boost lib 、deal.II lib、deal.II是定位于自适应有限元及误差估计的C++库，447.dealII对非常系数的亥姆霍兹方程进行求解，它使用了基于二元加权误差估计生成最佳网格的自适应方法，该方程在3维得解。&lt;/p&gt;
&lt;p&gt;450.soplex:C++语言实现。采用Plex v1.2.1程序，Plex使用单纯形算法解线性方程&lt;/p&gt;
&lt;p&gt;453.povray：ISO C++  语言实现。   POV-Ray POV-Ray是一个光线追踪渲染软件，453.povray渲染一幅1280x1024的反锯齿国际象棋棋盘图像&lt;/p&gt;
&lt;p&gt;454.calculix：Fortran 90 &amp;amp; C语言实现，结构力学范畴。CalculiX是一个用于线性及非线性三位结构力学的有限元分析软件，454.calculix计算了一个高速旋转的压缩盘片在离心力的作用下的应力和变形情况&lt;/p&gt;
&lt;p&gt;459.GemsFDTD：Fortran 90语言实现。属于电磁学范畴。    459.GemsFDTD使用FDTD（有限差分时域）方法求解三维时域中的麦克斯韦方程，计算了一个理想导体的雷达散射截面&lt;/p&gt;
&lt;p&gt;465.tonto： Fortran 95实现。量子化学范畴Tonto是一个面向对象的量子化学程序包，465.tonto计算面向量子晶体学，它基于一个符合X光衍射实验数据的、约束的分子Hartree-Fock波函数&lt;/p&gt;
&lt;p&gt;470.lbm ：ANSI C语言实现。    470.lbm使用LBM（格子波尔兹曼方法）模拟非压缩流体，它模拟了两种情况：类似活塞推动的剪切驱动流体和管道流体，测试包含了3000个步骤&lt;/p&gt;
&lt;p&gt;481.wrf ：Fortran 90 &amp;amp; C语言实现。WRF v2.0.2  481.wrf基于WRF(Weather Research and Forecastin)模型，对NCAR的数据进行了计算，数据包括了UTC 2001.06.11到UTC 2001.06.12以三小时为间隔的数据&lt;/p&gt;
&lt;p&gt;482.sphinx3：C语言实现。Sphinx-3一种语音识别软件。&lt;/p&gt;
&lt;h3&gt;二、工具安装&lt;/h3&gt;
&lt;h4&gt;1.标准安装方式&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$mount -t iso9660 -o ro,exec /dev/cdrom /mnt
$cd /mnt
$./install.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以指定安装目录如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$./install.sh -d  /home/cpu2006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装过程中可能遇到以下提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing FROM /Volumes/SPEC_CPU2006
Installing TO /home/cpu2006
Is this correct? (Please enter &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39;)
yes
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.通过安装完成的软件进行测试&lt;/h4&gt;
&lt;p&gt;先准备相关测试文件，如：cpu2006-20141030.tar。
解压文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$tar xf cpu2006-20141030.tar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入安装目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$cd cpu2006v99/（根据实际路径）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导入测试工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$.  shrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：输入时，圆点与shrc之间至少一个空格，该命令开始导入SPEC CPU2006程序。
修改测试文件绝对路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$bin/relocate
显示“Top of SPEC benchmark tree is &amp;#39;/cpu2006v99&amp;#39;”
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.运行测试&lt;/h4&gt;
&lt;p&gt;根据需求，进行参数选择，开始运行测试脚本：
例如：runspec -c linux-mipsel-gcc -i ref -n 3  all
命令参数说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c：读取测试配置文件，linux-mipsel-gcc位于SPEC CPU2000安装目录的config目录下，该文件可以根据实际信息进行修改。其编译选项不建议修改。
-i：输入测试数据集的大小，ref代表最大测试数据集，test代表最小测试数据集；
-n：每个测试项目运行的次数，如果需要SPEC CPU2006自动计算测试分值，需要指定运行次数等于或大于3，即n&amp;gt;=3；
all：SPEC CPU2006将运行基准测试程序中的所有测试项目。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出现以下信息，表明测试已经启动“&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;runspec v4283 - Copyright 1999-2006 Standard Performance Evaluation Corporation
Using &amp;#39;mipsel-linux&amp;#39; tools
Reading MANIFEST... 17899 files
Loading runspec modules...............
Locating benchmarks...found 31 benchmarks in 13 benchsets.
Locating output formats: ASCII, config, CSV, flags, html (DISABLED), mail, PDF, PostScript, raw, Screen, Submission Check
Reading config file &amp;#39;/cpu2006v99/config/linux-mipsel-gcc.cfg&amp;#39;
Benchmarks selected: 400.perlbench, 401.bzip2, 403.gcc, 429.mcf, 445.gobmk, 456.hmmer, 458.sjeng, 462.libquantum, 464.h264ref, 471.omnetpp, 473.astar, 483.xalancbmk, 999.specrand, 410.bwaves, 416.gamess, 433.milc, 434.zeusmp, 435.gromacs, 436.cactusADM, 437.leslie3d, 444.namd, 447.dealII, 450.soplex, 453.povray, 454.calculix, 459.GemsFDTD, 465.tonto, 470.lbm, 481.wrf, 482.sphinx3, 998.specrand
Compiling Binaries
 up to date 400.perlbench ref base linux-mipsel-gcc default
 Up to date 401.bzip2 ref base linux-mipsel-gcc default
 Up to date 403.gcc ref base linux-mipsel-gcc default
 Up to date 429.mcf ref base linux-mipsel-gcc default
……
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这组测试配置基本和spec2000类似，不同的是，spec2006在测试前，会把每个测试组件重新编译建立一次。所以在测试前，应确保此时的系统中包含以下编译器：g++、gcc、gfortran编译器。如果进行连续测试，则不必进行再次编译，可以加参数”—nobuild”.
附config文件大体说明：斜体部分为文本内容 //为解释说明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#####################################################################
ignore_errors = yes
tune          = base
ext           = loongson.3a2000
output_format = asc, Screen, html
reportable    = 0
teeout        = yes
teerunout     = yes
hw_avail = Feb-2015
sw_avail = Feb-2015
license_num = 
company_name = Loongson
prepared_by = Loongson
tester_name = isoft
test_date = July-2016

verbose         = 9

default=default=default=default:
#####################################################################
#
# Compiler selection
#
#####################################################################

makeflags = -j 4


CC           = mips64el-loongson-linux-gcc
CXX          = mips64el-loongson-linux-g++
FC           = mips64el-loongson-linux-gfortran

## HW config
hw_cpu_name  = Loongson
hw_model     = 3A2000
hw_cpu_mhz   = 1000
hw_fpu       = Integrated
hw_nchips   = 1
hw_ncores   = 4
hw_ncoresperchip= 4
hw_nthreads = 4
hw_ncpuorder = 1
hw_parallel  = yes
hw_pcache    = 64KB I + 64KB D
hw_scache    = 4096KB(I + D)
hw_memory   = 2 x 4GB DDR1066 
hw_vendor   = Loongson

## SW config
sw_os        = iSoft
sw_file      = ext4
sw_state     = runlevel 3
sw_compiler  = gcc , g++ &amp;amp; gfortran 4.8

#####################################################################
# Optimization
#####################################################################
## Base is low opt
default=default=default=default:
# For this data model, -m32 needs to be here, as one of the lines below
OPTIMIZE     = -static -march=loongson3a
PORTABILITY     =

COPTIMIZE    = -flto -Ofast 
CXXOPTIMIZE  = -flto -Ofast 
FOPTIMIZE    = -flto -Ofast

notes0100= C/C++ base flags:   -flto -Ofast
notes0110= Fortran base flags: -flto -Ofast

#####################################################################
# 32/64 bit Portability Flags - all
#####################################################################

default=base=default=default:
notes25=

default=peak=default=default:
notes25=


#####################################################################
# Portability Flags - INT
#####################################################################

400.perlbench=default=default=default:
notes35    = 400.perlbench: -DSPEC_CPU_LINUX_IA32
CPORTABILITY= -DSPEC_CPU_LINUX_IA32 -fno-strict-aliasing
#notes35    = 400.perlbench: -DSPEC_CPU_LINUX
#CPORTABILITY= -DSPEC_CPU_LINUX -DSPEC_CPU_LITTLEENDIAN 
#COPTIMIZE     = -O2
......
其他具体组件的编译信息不再一一说明，基本可以保持默认即可。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多测试类型与方法参见下文。&lt;/p&gt;
&lt;h4&gt;4.测试结果收集与分析&lt;/h4&gt;
&lt;p&gt;测试结束后在result目录下，查看测试结果，测试结果一般以测试类型和测试次序进行区别，并且会按照整点和浮点进行划分。如果是按照正式reportable的模式进行测试的话，会出一份网页版的正式测试结果，参见下图：
非正式结果可以去asc或txt文档查看，格式例如下文：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                Base     Base       Base        Peak     Peak       Peak
Benchmarks      Ref.   Run Time     Ratio       Ref.   Run Time     Ratio
-------------- ------  ---------  ---------    ------  ---------  ---------
400.perlbench    9770      430         22.7 S    9770      339         28.8 S
400.perlbench    9770      429         22.8 *    9770      338         28.9 S
400.perlbench    9770      429         22.8 S    9770      339         28.8 *
401.bzip2        9650      559         17.3 *    9650      552         17.5 *
401.bzip2        9650      559         17.3 S    9650      553         17.5 S
401.bzip2        9650      560         17.2 S    9650      552         17.5 S
403.gcc          8050      374         21.5 S    8050      337         23.9 S
403.gcc          8050      367         22.0 *    8050      337         23.9 S
403.gcc          8050      366         22.0 S    8050      337         23.9 *
429.mcf          9120      187         48.9 S    9120      187         48.9 S
429.mcf          9120      188         48.6 *    9120      188         48.6 *
429.mcf          9120      211         43.2 S    9120      211         43.2 S
445.gobmk       10490      559         18.8 S   10490      542         19.4 S
445.gobmk       10490      559         18.8 S   10490      542         19.4 *
445.gobmk       10490      559         18.8 *   10490      541         19.4 S
456.hmmer        9330      213         43.8 S    9330      213         43.7 *
456.hmmer        9330      247         37.8 S    9330      214         43.6 S
456.hmmer        9330      214         43.5 *    9330      213         43.7 S
458.sjeng       12100      616         19.6 *   12100      574         21.1 *
458.sjeng       12100      617         19.6 S   12100      575         21.0 S
458.sjeng       12100      585         20.7 S   12100      574         21.1 S
462.libquantum  20720       14.2     1460   *   20720       14.2     1460   *
462.libquantum  20720       14.4     1440   S   20720       14.4     1440   S
462.libquantum  20720       13.5     1540   S   20720       13.5     1540   S
464.h264ref     22130      578         38.3 *   22130      527         42.0 S
464.h264ref     22130      579         38.2 S   22130      526         42.0 *
464.h264ref     22130      578         38.3 S   22130      526         42.0 S
471.omnetpp      6250      349         17.9 S    6250      288         21.7 *
471.omnetpp      6250      348         17.9 *    6250      288         21.7 S
471.omnetpp      6250      348         18.0 S    6250      289         21.7 S
473.astar        7020      313         22.4 S    7020      313         22.4 S
473.astar        7020      311         22.6 S    7020      311         22.6 S
473.astar        7020      311         22.6 *    7020      311         22.6 *
483.xalancbmk    6900      174         39.7 *    6900      170         40.7 S
483.xalancbmk    6900      174         39.6 S    6900      170         40.5 S
483.xalancbmk    6900      174         39.7 S    6900      170         40.6 *
==============================================================================
400.perlbench    9770      429         22.8 *    9770      339         28.8 *
401.bzip2        9650      559         17.3 *    9650      552         17.5 *
403.gcc          8050      367         22.0 *    8050      337         23.9 *
429.mcf          9120      188         48.6 *    9120      188         48.6 *
445.gobmk       10490      559         18.8 *   10490      542         19.4 *
456.hmmer        9330      214         43.5 *    9330      213         43.7 *
458.sjeng       12100      616         19.6 *   12100      574         21.1 *
462.libquantum  20720       14.2     1460   *   20720       14.2     1460   *
464.h264ref     22130      578         38.3 *   22130      526         42.0 *
471.omnetpp      6250      348         17.9 *    6250      288         21.7 *
473.astar        7020      311         22.6 *    7020      311         22.6 *
483.xalancbmk    6900      174         39.7 *    6900      170         40.6 *
 SPECint(R)_base2006                   36.7
 SPECint2006                           39.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Base Ratio为测试分值，该测试一般运行3遍取中值。整体结果为所有结果的几何平均值。&lt;/p&gt;
&lt;h4&gt;5. 举例说明SPEC CPU2006常用测试命令组合&lt;/h4&gt;
&lt;p&gt;1．runspec -c test.cfg -i test -I all
基于最小测试数据集快速执行所有的测试，测试过程中如果某个用例发生错误，则跳过错误用例，继续执行其他用例。
2．runspec -c test.cfg -i ref -n 3 -I all
基于最大测试数据集全面执行所有的测试，用于测试单核CPU，测试过程中如果某个用例发生错误，则跳过错误用例，继续执行其他用例。
3．runspec -c test.cfg –r ref –n 3 fp
基于最大测试数据集，只运行fp测试
4．runspec -c test.cfg –r ref –n 3 int
基于最大测试数据集，只运行int测试
5.runspec -c test.cfg -i ref 473.astar
基于最大测试数据集只执行473.astar单个测试。
6 runspec –c test.cfg –i ref --rate 4 int
基于最大数据测试集进行rate测试，运行4线程测试的分值&lt;/p&gt;
&lt;h4&gt;6.其他命令补充&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--action build 创建测试项目
--action onlyrun 只是运行，不进行确认测试结果是否正确
--action report 标准测试
--action clean  清理已经建立的测试项目
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模式很多，不再一一介绍。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--check_version 检查版本更新
--copies –c number 默认1 用来进行SPECrate run
--help  显示帮助文档
--ignore_errors 忽略错误
ations number —n 测试次数，一次reportable测试，必须是3次
--iter—loose 未设置reportable测试
--output_format  输出文件格式 默认为html text 可以选择 all cfg  test csv  html mail pdf  ps  printer  raw screen   text 等多种方式。
--rate  -r  进行SPECspeed测试可以指定copies数量运行。
--rebuild 重新编译测试文件 
--tune tuning 默认是base 可以选择base, peak, or all ，Report 首先是base,其次是peak.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是比较常用的命令，一些不常用的命令不再介绍，可参考下文了解。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a  Same as --action
--action action Do: build|buildsetup|clean|clobber|configpp| onlyrun|realclean|report|run|runsetup|scrub| setup|trash|validate
--basepeak  Copy base results to peak (use with --rawformat)
--nobuild   Do not attempt to build binaries
-c  Same as --config
-C  Same as --copies
--check_version Check whether an updated version of CPU2006 is available
--comment &amp;quot;text&amp;quot;    Add a comment to the log and the stored configfile.
--config file   Set config file for runspec to use
--copies    Set the number of copies for a SPECrate run
-D  Same as --rebuild
-d  Same as --deletework
--debug Same as --verbose
--define SYMBOL[=VALUE] Define a config preprocessor macro
--delay secs    Add delay before and after benchmark invocation
--deletework    Force work directories to be rebuilt
--dryrun    Same as --fake
--dry-run   Same as --fake
-e  Same as --extension
--ext   Same as --extension
--extension ext[,ext...]    Set the extensions
-F  Same as --flagsurl
--fake  Show what commands would be executed.
--fakereport    Generate a report without compiling codes or doing a run.
--fakereportable    Generate a fake report as if &amp;quot;--reportable&amp;quot; were set.
--[no]feedback  Control whether builds use feedback directed optimization
--flagupdate    Same as --update
--flagsupdate   Same as --update
--flagsurl url  Location (url or filespec) where to find your flags file
--getflags  Same as --update
--graph_auto    Let the tools pick minimum and maximum for the graph
--graph_min N   Set the minimum for the graph
--graph_max N   Set the maximum for the graph
-h  Same as --help
--help  Print usage message
--http_proxy    Specify the proxy for internet access
--http_timeout  Timeout when attempting http access
-I  Same as --ignore_errors
-i  Same as --size
--ignore_errors Continue with benchmark runs even if some fail
--ignoreerror   Same as --ignore_errors
......
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;7.手动编译及跨平台移植方法（仅供参考）&lt;/h4&gt;
&lt;p&gt;Spec2006包含的测试套件基本上与平台无关，因此理论上是可以直接进行跨平台进行测试。
Spec2006为了实现测试结果的准确及降低对平台的依赖，制作了自己的工具包。其中包括:
    specdiff（examines results to see if the correct answer was obtained）、specinvoke  (invokes benchmarks for CPU2006)、specmake（GNU make ，Calling it "specmake" avoids possible conflicts with versions of make that may already be on your system. SPEC requires that published results use the versions of the tools that it supplies, so that if SPEC applies patches or extensions from time to time, all users run with a consistent tool set. Similar considerations apply to other tools in this list.)、specxz     （The xz compression program）、specmd5sum（md5sum from GNU coreutils, with enhancements）、spectar（ GNU tar）、specperl（Perl）。Various Perl modules such as Algorithm::Diff, GD, HTML::Parser, PDF::API2, URI, XML::SAX, etc.。
编译工具：C99 编译器 C++编译器
如果是初始安装包，则需要解压源码包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# xz -dc install_archives/cpu2006.tar.xz | tar -xf - tools/src
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立工具包的命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AIX (32-bit):
CC=xlc CFLAGS=&amp;#39;-O -qarch=ppc -D_LARGE_FILES -D_ILS_MACROS&amp;#39; PERLFLAGS=&amp;quot;-Doptimize=&amp;#39;-O&amp;#39; -Accflags=&amp;#39;-D_LARGE_FILES&amp;#39;&amp;quot; OBJECT_MODE=32 ./buildtools

AIX (64-bit):
CC=xlc CFLAGS=&amp;#39;-O3 -qarch=ppc64 -q64 -D_ILS_MACROS&amp;#39; PERLFLAGS=&amp;quot;-Doptimize=&amp;#39;-O&amp;#39; -Aoptimize=&amp;#39;-qarch=ppc64 -q64&amp;#39;&amp;quot; OBJECT_MODE=64 ./buildtools

HPUX:
CC=&amp;quot;/opt/ansic/bin/cc&amp;quot; CFLAGS=&amp;quot;-Ae +O2 +z -D_FILE_OFFSET_BITS=64 -AC99&amp;quot; XZCFLAGS=-AC99 PERLFLAGS=&amp;quot;-Doptimize=+O1 -Dlibpth=/usr/lib/hpux32 -Dldflags=-lm -Dcppstdin=cc -Acppstdin=-E -Acppstdin=-Aa -Acppstdin=-D__STDC_EXT__ -Acppstdin=-AC89&amp;quot; ./buildtools

IRIX:
ulimit -s 128000; CFLAGS=&amp;quot;-c99 -D_FILE_OFFSET_BITS=64&amp;quot; MD5CFLAGS=&amp;quot;-O2&amp;quot; PERLFLAGS=&amp;quot;-Doptimize=-O3 -Uloclib -Dlibpth=/usr/lib32&amp;quot; XZFLAGS=&amp;quot;--disable-assembler --disable-shared&amp;quot; XZCFLAGS=&amp;quot;-O1&amp;quot; ./buildtools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立完成之后，确认是否成功的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd $SPEC (Unix)
.  shrc
或 runspec -V
或specmake -v
specxz -h
specperl -v
specdiff –h
runspec -h
specinvoke -h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;工具编译完成之后，需要对工具进行打包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;packagetools &amp;lt;archname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果自动化编译出现问题，可以手动编译每个测试工具。编译方法为进入对应的工具包，手动编译。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 10 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-10-10:2014/10/10/linux/</guid><category>benchmark</category></item><item><title>SpecJvm2008使用说明</title><link>http://king32783784.github.io/2014/09/15/linux/</link><description>&lt;h3&gt;SPECJVM2008使用方法&lt;/h3&gt;
&lt;h4&gt;1.工具介绍&lt;/h4&gt;
&lt;p&gt;SPECjvm2008 （Java Virtual Machine Benchmark）是一个评估JRE运行性能的基准测试套件。包含几个现实生活中的应用和专注于核心java功能的基准的测量基准套件。该套件侧重于JRE执行一个单一的应用程序；它反映了硬件处理器和内存子系统的性能，与文件系统I/O和网络I/O关系不大。SPECjvm2008负载模仿各种常见用途的应用计算。这些特征反映了这一基准适用于测量基本 Java 性能上种类繁多的客户端和服务器系统。
套件包含21个基准测试，其中每个基准测试均包含一个2分钟的热身测试和4分钟的正式测试。由于测试过程中程序并不中断基准测试的执行，所以测试时间至少为126分钟，根据Java性能的不同，测试时间会有所不同。关于21个基准测试的具体内容将在文档最后进行介绍。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href="http://www.spec.org/jvm2008/"&gt;http://www.spec.org/jvm2008/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;2工具安装&lt;/h4&gt;
&lt;h5&gt;2.1下载&lt;/h5&gt;
&lt;p&gt;下载SPECjvm2008测试套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget ftp://ftp.spec.org/dist/osg/java/SPECjvm2008_1_01_setup.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;2.2安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#java -jar SPECjvm2008_1_01_setup.jar -i console
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选择默认的内容进行安装，直至完成。默认的安装路径会是/SPECjvm2008&lt;/p&gt;
&lt;h5&gt;2.3调试&lt;/h5&gt;
&lt;p&gt;在/etc/profile中加入环境变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/
CLASSPATH=.：$JAVA_HOME/lib/tools.jar：/lib.dt.jar
PATH=$JAVA_HOME/bin：$PATH
export JAVA_HOME CLASSPATH PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存后，执行 source /etc/profile即可。&lt;/p&gt;
&lt;p&gt;安装目录下有一个脚本，linux对应的是run-specjvm.sh，windows对应的是 run-specjvm.cmd&lt;/p&gt;
&lt;p&gt;执行如下命令，用以测试安装或环境是否ok&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./run-specjvm.sh startup.helloworld -ikv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;startup.helloworld 是测试helloworld程序的启动时间，选择这个测试用例是考虑到运行速度比较快。&lt;/p&gt;
&lt;p&gt;-ikv的意思是跳过签名检查，那个过程有点慢。&lt;/p&gt;
&lt;h5&gt;2.4   配置&lt;/h5&gt;
&lt;p&gt;默认情况，我们只需要修改安装目录下 props/specjvm.properties 和 props/specjvm.reporter.properites 这两个配置文件就行了。&lt;/p&gt;
&lt;p&gt;specjvm.properties主要负责对整个套件的运行进行调整。比如，指定需要运行的测试用例，测试迭代次数，每个用例跑完是否要GC等。&lt;/p&gt;
&lt;p&gt;specjvm.reporter.properites主要用来丰富报表输出内容，一般是一些无法通过自动检测得到的环境信息。比如，主机的内存型号，cpu逻辑个数，主板提供商等。&lt;/p&gt;
&lt;p&gt;官方对specjvm.properties的内容是遵循COC原则设计的。所以，我们只需要修改特定的参数就可以了。&lt;/p&gt;
&lt;p&gt;下面是我测试时修改的一些参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;specjvm.additional.properties.file=props/specjvm.reporter.properties      // 指定报表配置文件路径
specjvm.benchmark.analyzer.names=HeapMemoryFreeAnalyzer HeapMemoryTotalAnalyzer            // heap分析器
specjvm.home.dir=/home/admin/SPECjvm2008 // SPEC_HOME路径
specjvm.iteration.time=240s        // 迭代时长
specjvm.startup.jvm_options=-Xms1024m -Xmx1024m -XX:+UseConcMarkSweepGC         // JVM switches
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;specjvm.reporter.properties这个配置文件就不多做介绍了，你甚至可以不做任何修改。&lt;/p&gt;
&lt;h4&gt;3  工具使用说明&lt;/h4&gt;
&lt;h5&gt;3.1   命令及参数说明&lt;/h5&gt;
&lt;p&gt;通常的命令执行格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java [&amp;lt;jvm options&amp;gt;] -jar SPECjvm2008.jar [&amp;lt;SPECjvm2008 options&amp;gt;] [&amp;lt;benchmark name&amp;gt; ...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可用参数查询：java -jar SPECjvm2008.jar --help&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Arg Long arg    Value   Property name   Description

-h   --help         Show this help.
     --version          Print SPECjvm2008 version and exit.
-sv  --showversion          Print SPECjvm2008 version and continue.
     --base         Run the base compliant run of SPECjvm2008 (default, unless jvm args are specified).
     --peak         Run the peak compliant run of SPECjvm2008.
     --lagom            Run the Lagom benchmark suite, a version, of SPECjvm2008 that uses a fixed workload.
-pf  --propfile  string specjvm.propfile    Use this properties file.
-i   --iterations    int    specjvm.miniter, specjvm.maxniter   How many iterations to run. &amp;#39;inf&amp;#39; means an infinite number.
-mi  --miniter   int    specjvm.miniter Minimum number of iterations.
-ma  --maxiter   int    specjvm.maxniter    Maximum number of iterations.
-it  --iterationtime     time   specjvm.iteration.time  How long one iteration should be. The time is specified as an integer, and assumed to be in seconds, or an integer with unit, for example 4m (4 minutes). Units available are ms, s, m and h. If the iteration time is too short, based on the warmup result, it will be adjusted to expect to finish at least 5 operations.
-fit     --forceIterationIime    time   specjvm.iteration.time, specjvm.iteration.time.forced   As iteration time, but the time will not be adjusted based on the warmup result.
-ja  --jvmArgs   string specjvm.startup.jvm_options JVM options used for startup subtests.
-jl  --jvmLauncher   path   specjvm.benchmark.startup.launcher  JVM launcher used for startup subtests.
-wt  --warmuptime    time   specjvm.benchmark.warmup.time   How long warmup time. The time format is the same as in iteration time.
-ops     --operations    int    specjvm.fixed.operations, specjvm.run.type  How many operations each iteration will consist of. It will then be a fixed workload and iteration time is ignored.
-bt  --benchmarkThreads  int    specjvm.benchmark.threads   How many benchmark threads to use.
-r   --reporter  raw file name      Invokes the reporter with given file(s). The benchmarks will not be run.
-v   --verbose      specjvm.print.verbose, specjvm.print.progress   Print verbose info (harness only).
-pja     --parseJvmArgs         Parse jvm arguments info from command line, including heap settings (uses JMXBean info). This is not done by default.
-coe     --continueOnError      specjvm.continue.on.error   Continue to run suite, even if one test fails.
-ict     --ignoreCheckTest      specjvm.run.initial.check   Do not run check benchmark.
-ikv     --ignoreKitValidation      specjvm.run.checksum.validation Do not run checksum validition of benchmark kit.
-crf     --createRawFile     boolean    specjvm.create.xml.report   Whether to generate a raw file.
-ctf     --createTextFile    boolean    specjvm.create.txt.report   Whether to generate text report. If raw is disabled, so is txt.
-chf     --createHtmlFile    boolean    specjvm.create.html.report  Whether to generate html report. If raw is disabled, so is html.
-xd  --xmlDir    path   specjvm.benchmark.xml.validation.input.dir  To set path to xml input files
    &amp;lt;benchmark(s)&amp;gt;      specjvm.benchmarks  Name of benchmark(s) to run. By default all submission benchmarks will be selected. &amp;#39;all&amp;#39; means all sumission benchmarks will be run. See SPECjvm2008 workload names for all values.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.2    基准测试用例介绍&lt;/h4&gt;
&lt;p&gt;SPECjvm2008的benchmarks测试用例列表如下：&lt;/p&gt;
&lt;p&gt;(单位 ops/m 每分钟操作数)&lt;/p&gt;
&lt;p&gt;Benchmark Name  Description&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;startup.helloworld  测试helloworld程序从运行开始到结束所需的时间
startup.compiler.compiler   普通java编译所需要的时间
startup.compiler.sunflow    编译sunflow图像渲染引擎所需要的时间
startup.compress    测试压缩程序，单次压缩所需的时间
startup.crypto.aes  测试AES/DES加密算法，单次加解密所需的时间
输入数据长度为 100 bytes , 713KB
startup.crypto.rsa  测试RSA加密算法，单次加解密需要的时间
输入数据长度为 100 bytes, 16KB 
startup.crypto.signverify   测试单次使用MD5withRSA, SHA1withRSA, SHA1withDSA, SHA256withRSA来签名，识别所需要的时间。
输入数据长度为 1KB, 65KB, 1MB
startup.mpegaudio   单次mpeg音频解码所需的时间
startup.scimark.fft 单次快速傅立叶变换所需的时间
startup.scimark.lu  单次LU分解所需的时间
startup.scimark.monte_carlo 单次运行蒙特卡罗算法所需的时间
startup.scimark.sor 单次运行jacobi逐次超松弛迭代法所需的时间
startup.scimark.sparse  单次稀疏矩阵乘积所需的时间
startup.serial  单次通过socket传输java序列化对象到对端反序列化完成所需的时间（基于jboss serialization benchmark）
startup.sunflow 单次图片渲染处理所需的时间
startup.xml.transform   单次xml转换所需的时间，转换包括dom,sax,stream方式
startup.xml.validation  单次xml schema校验所需的时间
compiler.compiler   在规定时间内，多线程迭代测试普通java编译，得出 ops/m
compiler.sunflow    在规定时间内，多线程迭代测试sunflow图像渲染，得出 ops/m
compress    在规定时间内，多线程迭代测试压缩，得出 ops/m
crypto.aes  在规定时间内，多线程迭代测试AES/DES加解密算法，得出 ops/m
crypto.rsa  在规定时间内，多线程迭代测试RSA加解密算法，得出 ops/m
crypto.signverify   在规定时间内，多线程迭代测试使用MD5withRSA, SHA1withRSA, SHA1withDSA, SHA256withRSA来签名，识别，得出 ops/m
derby   在规定时间内，迭代测试数据库相关逻辑，包括数据库锁，BigDecimal计算等，最后得出 ops/m
mpegaudio   在规定时间内，多线程迭代mpeg音频解码，得出 ops/m
scimark.fft.large   在规定时间内，多线程迭代测试快速傅立叶变换，使用32M大数据集，最后得出 ops/m
scimark.lu.large    在规定时间内，多线程迭代测试LU分解，使用32M大数据集，最后得出 ops/m
scimark.sor.large   在规定时间内，多线程迭代测试jacobi逐次超松弛迭代法，使用32M大数据集，最后得出 ops/m
scimark.sparse.large    在规定时间内，多线程迭代测试稀疏矩阵乘积，使用32M大数据集，最后得出 ops/m
scimark.fft.small   在规定时间内，多线程迭代测试快速傅立叶变换，使用512K小数据集，最后得出 ops/m
scimark.lu.small    在规定时间内，多线程迭代测试LU分解，使用512KB小数据集，最后得出 ops/m
scimark.sor.small   在规定时间内，多线程迭代测试jacobi逐次超松弛迭代法，使用512KB小数据集，最后得出 ops/m
scimark.sparse.small    在规定时间内，多线程迭代测试稀疏矩阵乘积，使用512KB小数据集，最后得出 ops/m
scimark.monte_carlo 在规定时间内，多线程迭代测试蒙特卡罗算法，得出 ops/m
serial  在规定时间内，多线程迭代测试通过socket传输java序列化对象到对端反序列化（基于jboss serialization benchmark），得出 ops/m
sunflow 在规定时间内，利用sunflow多线程迭代测试图片渲染，得出 ops/m
xml.transform   在规定时间内，多线程迭代测试xml转换，得出ops/m
xml.validation  在规定时间内，多线程迭代测试xml schema验证，得出 ops/m
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4执行基准测试&lt;/h4&gt;
&lt;p&gt;官方提供了三种基准测试方式，常用的有两种，一种是base，一种是peak，区别在于前者是不允许做任何vm参数调整。后者可以添加vm调优参数。
默认启动方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -jar SPECjvm2008.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此测试将完整的测试21个用例。&lt;/p&gt;
&lt;p&gt;可以选择特定的用例进行测试&lt;/p&gt;
&lt;p&gt;如：java -jar SPECjvm2008.jar startup.helloworld&lt;/p&gt;
&lt;p&gt;根据需要可以进行vm参数调整，调整后需要使用-peak参数。&lt;/p&gt;
&lt;p&gt;如：java -Xms256M -Xmx1024M -jar SPECjvm2008.jar -peak -ikv&lt;/p&gt;
&lt;h4&gt;5结果查看&lt;/h4&gt;
&lt;p&gt;测试结果默认的输出路径是安装目录的results 目录下。内部根据你执行测试套件的顺序，又分了不同的子文件夹。进入某个子文件夹，查看html格式的结果就行了。&lt;/p&gt;
&lt;h4&gt;6参考的URL&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.spec.org/jvm2008/docs/UserGuide.html"&gt;用户手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行和报告规范&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.spec.org/jvm2008/docs/RunRules.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;已知问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.spec.org/jvm2008/docs/KnownIssues.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;7 总结&lt;/h4&gt;
&lt;p&gt;1）如果选了base，又修改了vm options怎么办？&lt;/p&gt;
&lt;p&gt;套件在运行时，会给你警告。并且，在你的测试结果上会显示大大的一行Run is not compliant。另外，如果你想将测试结果提交官方，某些参数必须符合官方要求，否则同样是警告。&lt;/p&gt;
&lt;p&gt;2）哪些参数有官方要求？&lt;/p&gt;
&lt;p&gt;默认配置文件props/specjvm.properties 里，注释了Permitted for的就是。&lt;/p&gt;
&lt;p&gt;3）如何指定配置文件路径？&lt;/p&gt;
&lt;p&gt;-pf指定配置文件路径，默认使用的是安装目录下的 props/specjvm.properties，（日志里会打印出使用文件的路径）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 15 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-09-15:2014/09/15/linux/</guid><category>benchmark</category></item><item><title>Linux Test Project(一)</title><link>http://king32783784.github.io/2014/09/12/ltp/</link><description>&lt;h2&gt;Testing Linux, one syscall at a time.&lt;/h2&gt;
&lt;p&gt;LTP是从SGI开始的,后由IBM 思科 富士通 SUSE Redhat等组织开发的.该工具的目标是建立一个测试套件用来验证linux的可靠性,健壮性及稳定性.LTP测试套件包含了linux内核及相关功能的工具.&lt;/p&gt;
&lt;p&gt;本文主要介绍关于ltp的一些基本信息.&lt;/p&gt;
&lt;p&gt;LTP项目主页:&lt;a href="https://linux-test-project.github.io/#"&gt;ltp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github链接:&lt;a href="https://github.com/linux-test-project/ltp"&gt;ltp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LTP是一个验证ltp内核功能和稳定性的测试集.用来支持linux开发过程中,通过更多的单元测试,减少bug的引入,降低bug对用户的影响.LTP并不是用来做benchmarking测试的,而是更专注与功能,问题回归及稳定性测试.LTP同样不是一个标准测试,标准测试有&lt;a href="http://www.linuxbase.org/"&gt;LSB&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;一 基本结构&lt;/h2&gt;
&lt;p&gt;LTP测试套件是由包含一个基本动作和一个确认基本动作工作是否正常的测试用例组成.这个测试用例通常的测试结果是PASS/FAIL.一个测试程序是包含一个或多个测试用例的可执行程序.测试程序包括相应的测试参数,这些参数包括内存测试容量,临时文件位置,网络测试类型等等.Test tags 是用于匹配测试程序和一组命令行参数.Test tags是测试集的基础.&lt;/p&gt;
&lt;h3&gt;1.编写测试&lt;/h3&gt;
&lt;p&gt;编写一个测试用例比大多数想象的更容易.任何一个你编写用于验证内核功能的代码都可以用来形成一个用例.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试退出约定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常一个简单的判断一个测试用例执行结果的方式就是程序的返回值.如果你的测试程序没有得到一个预期结果或错误结果,程序退出是需要返回一个非零值,如exit1,
同样如果程序得到预期的结果,需要返回0,exit(0).一些测试驱动需要去收集这些返回值.如果一个测试程序包含多个测试用例,你不知道那个出错了,但你会知道程序出错了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式化输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个简单方式处理测试结果就是每个测试用例都输出一个标准格式的输出结果.这个格式需要是测试人员和分析工具都能理解的格式,当测试结果都按一个标准格式输出时工具就能够分析测试结果.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LTP目前没有一个最终的测试工具.我们选择了一个简单的解决方式ltp-pan.
 Ltp-pan是一个简单的测试驱动程序,它可以跟踪孤儿进程和抓取测试的输出信息.它工作方式是读取一个包括test tags和命令行列表的文件并执行.默认的ltp-pan会随机的从列表中选择命令执行,并等待其结束.可以通过选择多个命令行执行多个测试,在一定时间执行多个测试并且缓冲多个测试结果.这样Ltp-pan可以营造出复杂的测试环境.Ltp-pan使用一个活动文件,通常叫做zoo文件来保存哪些测试在运行.这个文件包括pid,tag以及命令行的一部分.当启动ltp-pan,它本身变成了自己的一个标签.当一个测试标签退出,ltp-pan会第一个字符加#的方式重写.这个活动文件可以在多个ltp-pan实例中共享,所以当系统崩溃时,你可以通过查看一个文件,了解哪个用例造成的.&lt;/p&gt;
&lt;p&gt;一个Ltp-pan文件包括一个测试tag列表.格式如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;testtag testprogram -o one -p two other command line options

# This is a comment. It is a good idea to describe the test

# tags in your ltp-pan file. Tests programs can have different

# behaviors depending on the command line options so it is

# helpful to describe what each test tag is meant to verify
or # provoke.

# Some more test cases

mm01 mmap001 -m 10000

# 40 Mb mmap() test.

# Creates a 10000 page mmap, touches all of the map, sync&amp;#39;s

# it, and munmap()s it.

mm03 mmap001 -i 0 -I 1 -m 100

# repetitive mmapping test.

# Creates a one page map repetitively for one minute.

dup02 dup02

# Negative test for dup(2) with bad fd

kill09 kill09

# Basic test for kill(2)

fs-suite01 ltp-pan -e -a fs-suite01.zoo -n fs-suite01 -f runtest/fs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;测试例子&lt;/strong&gt;
运行一个测试基本方式是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ltp-pan -a ltp.zoo -n tutor sleep &lt;span class="m"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;971450564&lt;/span&gt;

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep 4&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103341903&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no &lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

$ cat ltp.zoo

&lt;span class="c1"&gt;#9357,tutor,pan/ltp-pan -a ltp.zoo -n tutor sleep 4&lt;/span&gt;

&lt;span class="c1"&gt;#9358,cmdln,sleep 4&lt;/span&gt;

$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何实现的:
这个例子展示ltp-pan两个参数,一个活动文件,一个test tag. "sleep 4"测试程序及ltp-pan要执行的参数.这个测试会得到标记“cmdln”。 LTP-run将随机运行一个测试，最终被cmdln，因为指定了唯一测试.
在活动文件,ltp.zoo,ltp-pan写入pid,testlog,运行测试部分命令行.当test tag运行完成,ltp-pan会标记一个"#",代表它可以执行.这时,你能看到cmdln和tutor,如果测试机挡住,你可以读这些文件查找哪个测试导致的.&lt;/p&gt;
&lt;p&gt;同时运行一个测试多次.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ltp-pan -a ltp.zoo -n tutor -x &lt;span class="m"&gt;3&lt;/span&gt; -s &lt;span class="m"&gt;3&lt;/span&gt; -O /tmp sleep &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;971465653&lt;/span&gt;

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep 1&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;971465653&lt;/span&gt;

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep 1&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;971465653&lt;/span&gt;

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sleep 1&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何工作的?
  在这个例子中运行了另一个命令行,但是测试执行了3遍(-s 3)并且保持了3个test tags在同一时间执行(-x 3). -O 参数是指定临时文件保存目录,并且为每个缓冲结果设定标签.可以看到cmdln运行了3次.如果 -O 没有指定,则3次结果被混合,就没有意义了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scanner&lt;/strong&gt;
Ltp-scanner 是一个测试结果分析工具,它可以理解rts风格的输出.最终生成一个汇总结果显示哪个用例pass,哪个用例fail.&lt;/p&gt;
&lt;p&gt;测试流程参见下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://king32783784.github.io/lipeng/tmpfile/ltp.gif" /&gt;&lt;/p&gt;
&lt;h2&gt;二.LTP文件结构&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;从 http://ltp.sourceforge.net/下载LTP测试源码包
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;LTP的目录结构基本上分为文档目录（doc）、测试驱动程序目录（pan）、测试脚本目录（testscripts）、测试用例库（testcase）、测试命令文件目录（runtest）、头文件目录（include）、库目录（lib）等。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Doc：该目录是说明文件和帮助文档的所在地，这个目录中对LTP的内容和每个工具都有详细的说明。
* Pan：该目录存储的是LTP测试套件的测试驱动程序pan。
* Testscripts：该目录中存储的是可执行的测试脚本，不同方面的测试脚本的集合。
* Testcase：该目录存储了所有LTP测试套件中所使用的测试用例的源码。
* Runtest：该目录中的每个文件都是要执行的测试用例的命令集合，每个文件针对测试的不同方面。
* Include：LTP测试套件的头文件目录，定义了LTP自身的数据结构和函数结构。
* Lib：LTP测试套件运行时自身需要的库文件，定义了LTP自身的各种函数。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各个文件结构之间的联系：
    ----&amp;gt;testscripts中ltpstress.sh
    ----&amp;gt;runtest(stress.part1,stress.part2,stress.part3)
    ----&amp;gt;pan后台运行
    ----&amp;gt;最终运行Testcase中的各个测试案例&lt;/p&gt;
&lt;p&gt;其中runtest中 stree.part1,stree.part2,stree.part3中的测试命令或脚本  如 mmstress；来源于testcase/bin 中mmstress；而testcase/bin 中mmstress 可执行脚本或命令来源于/testcase中如 kernel,network,   pounder21, commands 等源代码编译生成的， mmstress:kernel/mem/mtest05/mmstress.c&lt;/p&gt;
&lt;p&gt;stress.part&lt;a href="n=1,2,3"&gt;n&lt;/a&gt;中测试命令如何看？
这些命令文件包含测试用例的tag和带有参数的测使用里，格式如下：
    #tag       test case
    test1      test1 -l 10
    mtest01    mtest01 -m 20
    fork01     fork01&lt;/p&gt;
&lt;h2&gt;三.LTP测试方法&lt;/h2&gt;
&lt;p&gt;测试方法有两个的阶段：一个是“初始测试”，一个是“压力测试”。
初始测试是开始测试的必要条件。初始测试包括 LTP 测试套件在硬件和操作系统上成功运转，这些硬件和操作系统将用于可靠性运转。LTP 测试套件包附带的驱动程序脚本 runalltest.sh 用于验证内核。这个脚本串行地运行一组成包的测试，并报告全部结果。也可以选择同时并行地运行几个实例。默认地，这个脚本执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 文件系统压力测试。
* 硬盘 I/O 测试。
* 内存管理压力测试。
* IPC 压力测试。
* SCHED测试。
* 命令功能的验证测试。
* 系统调用功能的验证测试。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;压力测试可以验证产品在系统高使用率时的健壮性。作为 runalltest.sh 的补充，特别设计了一个名为 ltpstress.sh 的测试场景，在使用网络与内存管理的同时并行地运行大范围的内核组件，并在测试系统上生成高压力负荷。ltpstress.sh 也是 LTP 测试套件的一部分。这个脚本并行地运行相似的测试用例，串行地运行不同的测试用例，这样做是为了避免由于同时访问同一资源或者互相干扰而引起的间歇性故障。默认地，这个脚本执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* NFS 压力测试。
* 内存管理压力测试。
* 文件系统压力测试。
* 数学 (浮点) 测试。
* 多线程压力测试。
* 硬盘 I/O 测试。
* IPC (pipeio, semaphore) 测试。
* 系统调用功能的验证测试。
* 网络压力测试。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;四.测试组合的选择&lt;/h2&gt;
&lt;p&gt;所选择的测试的组合必须给系统的资源带来足够的压力。Linux 内核的四个主要方面可以影响系统的 响应和执行时间：
　　
&lt;em&gt; CPU：用于在机器的 CPU（s）上处理数据的时间。
&lt;/em&gt; Memory：用于自真实存储器中读写数据的时间。
&lt;em&gt; I/O：用于自磁盘存储器读写数据的时间。
&lt;/em&gt; Networking：用于自网络读写数据的时间。&lt;/p&gt;
&lt;p&gt;系统资源利用率评价阶段通常需要多次尝试才能得到合适的测试组合，并得到期望水平的利用率。在这个评价过程中，sar 工具也应该在运行。在评价运行的结论中，您应该收集并评价所有四种资源的利用率水平。
      具体的测试组合修改方法。&lt;/p&gt;
&lt;p&gt;修改方法一：
       runtest中 stress.part1,stress.part2,stress.part3。&lt;/p&gt;
&lt;p&gt;如修改stress.part1中有这样一个测试mem02，根据阅读testcases/kernel/mem/mem／mem02.c 源代码，可将他修改为mem02 -m 15,意思是测试15m内存。
同样的也可以在 stress.part1,stress.part2,stress.part3 中添加、删除一些测试，
如我们测试时就把
stress.part3中关于swap交换分区的去掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#swapoff01 swapoff01
#swapoff02 swapoff02
#swapon01 swapon01
#swapon02 swapon02
#swapon03 swapon03
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改方法二：&lt;/p&gt;
&lt;p&gt;前面提到的初始测试或者压力测试都是测试的默认的，如果想测试其他的或者自己的测试案例，需要修改testcase的&lt;/p&gt;
&lt;p&gt;Makefile,因为通过它的Makefile可以看到&lt;/p&gt;
&lt;p&gt;SUBDIRS = &lt;code&gt;ls */Makefile | sed "s/Makefile//g" | grep -v open | grep -v pounder | grep -v DOTS | grep -v kdump | grep -v realtime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sed 's//:/ /g' :想把文本中的冒号替换成空格&lt;/p&gt;
&lt;p&gt;grep -v:显示所有与指定模式不匹配的行     &lt;/p&gt;
&lt;p&gt;也就是说open,pounder,DOTS,kdump,realtime没有测试，当然你可以选上或者，添加上自己的测试案例。&lt;/p&gt;
&lt;h2&gt;五.工具介绍&lt;/h2&gt;
&lt;p&gt;Gcov,lcove：&lt;/p&gt;
&lt;p&gt;分析代码覆盖率&lt;/p&gt;
&lt;p&gt;sar:
帮助我们掌握系统资源的使用情况，特别是内存和CPU 的使用情况，
是UNIX系统使用者应该掌握的工具之一
在我们的测试中，sar工具每 10 秒(当然时间间隔可以修改)钟截取一次系统利用率的快照，并保存到结果文件。
针对sar生成的sar.data使用方法：
    sar -u sar.data  //查看cpu使用情况
    sar -r sar.data  //看看memory,swap使用情况
     ……………………
Top:&lt;/p&gt;
&lt;p&gt;跟sar差不多的功能，这里我们就用sar 了。&lt;/p&gt;
&lt;h2&gt;六、其他&lt;/h2&gt;
&lt;p&gt;什么是稳定性和可靠性？&lt;/p&gt;
&lt;p&gt;稳定性反映的是系统不会出现异常情况；可靠性反映的是系统能够保持正常运行而不受外界影响的能力。
系统的稳定性和可靠性通常以连续运转时间和系统的可靠运行时间来度量。&lt;/p&gt;
&lt;p&gt;什么是压力测试？&lt;/p&gt;
&lt;p&gt;压力测试是一种破坏性的测试，即系统在非正常的、超负荷的条件下的运行情况 。用来评估在超越最大负载的情况下系统将如何运行，是系统在正常的情况下对某种负载强度的承受能力的考验 。&lt;/p&gt;
&lt;p&gt;为什么要进行压力测试？&lt;/p&gt;
&lt;p&gt;通常我们用压力测试来判断系统的稳定性和可靠性。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 12 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-09-12:2014/09/12/ltp/</guid><category>LTP</category></item><item><title>http协议</title><link>http://king32783784.github.io/2014/06/01/http/</link><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;协议指计算机通信网络中两台计算机之前通信共同遵守的约定或规则。http协议就是通信协议的一种，它允许将超文本标记语言(html)文档从web服务器传送到客户端的浏览器。&lt;/p&gt;
&lt;h3&gt;Web服务器、浏览器、代理服务器&lt;/h3&gt;
&lt;p&gt;打开浏览器，输入URL，就能看到指定的网页。后台是怎么实现的呢？
当我们输入URL后，浏览器通过网络给web服务发送了一个Request, web服务器接收到Request后，进行响应，生成Response,然后返回给浏览器，浏览器解析Response中的HTML，然后展示出来。我们就看到了指定网页
现在这个过程基本上都要经过代理服务器，如CDN反向代理。
代理服务器就是网络信息的中转站，是为了提高访问速度、突破限制（GWV）、私藏身份。&lt;/p&gt;
&lt;h3&gt;URL&lt;/h3&gt;
&lt;p&gt;URL(Uniform Resource Locator)地址用于描述一个网络上的资源，基本格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;schema://host[:port#]/path/.../[?query-string][#anchor]
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;scheme   指定底层使用的协议（如：http https ftp smb)&lt;/li&gt;
&lt;li&gt;host     HTTP服务器的ip地址或域名（www.vimlinux.com)&lt;/li&gt;
&lt;li&gt;port#    HTTP服务器的默认端口是80， 这种情况下可以省略，如果使用了其他端口，需要指明如8080&lt;/li&gt;
&lt;li&gt;path     访问资源的路径&lt;/li&gt;
&lt;li&gt;query-string 发送给http服务器的数据&lt;/li&gt;
&lt;li&gt;anchor   锚点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URL例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.vimlinux.com/sj/test/test.aspx?name=sviergn&amp;amp;x=true#stuff

Schema:                 http
host:                   www.mywebsite.com
path:                   /sj/test/test.aspx
Query String:           name=sviergn&amp;amp;x=true
anchor:                 stuff
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;HTTP协议是无状态的&lt;/h3&gt;
&lt;p&gt;http协议是无状态的，同一个客户端的多次请求直接是没有对应关系的，http服务器并不知道多次请求来自同一客户端,为了解决这个问题，web程序引入了cookie机制来维护状态。&lt;/p&gt;
&lt;p&gt;现在的html不再是单纯的文本，而是包含图片、js等，所以浏览器再获取一个完整网页时，一般需要发送多次Request.
第一次浏览器会接收到一个框架，分析之后发现还有好多文件，然后再次request,等所有文件下载成功后，就显示出来了（显示时，其实一下大的文件仍在加载）&lt;/p&gt;
&lt;h3&gt;HTTP消息的结构&lt;/h3&gt;
&lt;p&gt;Request消息分为3个部分，第一部分叫Request line,第二部分叫Request header, 第三部分是body, header和body之间有个空行。&lt;/p&gt;
&lt;p&gt;如
    METHOD /path-to-resource HTTP/Version-number
    Header-Name-1: value
    Header-Name-2: value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Optional request body
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行中的Method表示请求方法，比如"POST", "GET", path-to-resource表示请求的资源， Http/Version-number表示协议的版本号
 当使用的是"GET"方法的时候，body是为空的
 比如我们打开这个网站首页的的request如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET http://www.cnblogs.com/ HTTP/1.1
Host: www.cnblogs.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get 和 Post方法的区别&lt;/h3&gt;
&lt;p&gt;Http协议定义了很多与服务器交互的方法，最基本的４种，分别为GET,POST,PUT,DELETE.一个URL地址用于描述一个网络上的资源，而HTTP中的GET,POST,PUT,DELETE就对应这个资源的查，改，增，删4个操作。最常见的就是GET和POST了。GET一般用于获取／查询资源信息，而POST一般用于更新资源信息。&lt;/p&gt;
&lt;p&gt;区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;amp;相连，如EditPosts.aspx?name=test1&amp;amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET提交的数据大小有限制（浏览器对URL的长度有限制),而POST方法提交的数据没有限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值&lt;/li&gt;
&lt;li&gt;GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或则其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;状态码&lt;/h3&gt;
&lt;p&gt;Response消息中的第一行叫状态行，由HTTP协议版本号，状态码，状态消息三部分组成。
状态码用来告诉http客户端，http服务器是否产生了预期的Response.
http/1.1定义了５类状态码，状态码由三位数字组成，第一个数字定义了响应的类别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx 提示信息- 表示请求已被成功接收，继续处理&lt;/li&gt;
&lt;li&gt;2xx 成功－表示请求已被成功接收，理解，接受&lt;/li&gt;
&lt;li&gt;3xx 重定向－要完成请求必须进行更进一步的处理&lt;/li&gt;
&lt;li&gt;4xx 客户端错误－请求有语法错误或请求无法实现&lt;/li&gt;
&lt;li&gt;5xx 服务器端错误－服务器未能实现合法的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的状态码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 OK : 表明请求被成功完成，所请求的资源发送回客户端&lt;/li&gt;
&lt;li&gt;302 Found: 重定向，新的URL会在response中的Location返回，浏览器会自动使用新的URL发出新的Request&lt;/li&gt;
&lt;li&gt;304 Not Modified　代表缓存未过期，可以继续使用&lt;/li&gt;
&lt;li&gt;400 Bad Request 客户端请求与语法错误，不能被服务器所理解&lt;/li&gt;
&lt;li&gt;403 Forbidden 服务器收到请求，但拒绝提供服务&lt;/li&gt;
&lt;li&gt;404 Not Found 请求资源不存在&lt;/li&gt;
&lt;li&gt;500 Internal Server Error 服务器发送了不可预期的错误&lt;/li&gt;
&lt;li&gt;503 Server Unavailable 服务器当前不能处理客户端请求，一段时间后恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HTTP Request Header&lt;/h3&gt;
&lt;p&gt;header有很多。
&lt;strong&gt;Cache&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If-Modified-Since&lt;/p&gt;
&lt;p&gt;把浏览器端缓存页面的最后修改时间发送给服务器，服务器会把这个时间和服务器文件的最后修改时间进行比对，如果时间一致，就返回304(本地缓存没过期），直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接收到后，会更新本地的缓存。&lt;/p&gt;
&lt;p&gt;IF-None-Match&lt;/p&gt;
&lt;p&gt;If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。当用户再次请求资源时，将在HTTP Request中加入If-None-Match信息(ETag的值）。如果服务器验证资源的ETag没有改变（该资源没有更新),将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态码和新的资源及ETag.&lt;/p&gt;
&lt;p&gt;Pragma&lt;/p&gt;
&lt;p&gt;防止页面被缓存，在HTTP/1.1，它和Cache-Control:no-cache作用一样。注意：在HTTP/1.0版本中，只实现了Pragema:no-cache,没有实现Cache-Control&lt;/p&gt;
&lt;p&gt;Cache-Control&lt;/p&gt;
&lt;p&gt;用来指定Response-Request遵循的缓存机制。各个指令含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache-Control:Public 可以被任何缓存所缓存&lt;/li&gt;
&lt;li&gt;Cache-Control:Private 内容只缓存到私有缓存中&lt;/li&gt;
&lt;li&gt;Cache-Control: no-cache 所有内容不会被缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accept&lt;/p&gt;
&lt;p&gt;浏览器可接受的媒体类型。例如Accept:text/html 代表浏览器接受服务器返回的类型为text/html.如果服务器无法返回text/html类型的数据，服务器应该返回一个406错误（non acceptable)
通配符*代表任意类型&lt;/p&gt;
&lt;p&gt;Accept-Encoding:&lt;/p&gt;
&lt;p&gt;浏览器声明自己接受的压缩算法，是否支持压缩，支持什么类型的（gzip,deflate)
例如 Accept-Encoding: gzip, deflate&lt;/p&gt;
&lt;p&gt;Accept-Language:&lt;/p&gt;
&lt;p&gt;浏览器声明自己接受的语言&lt;/p&gt;
&lt;p&gt;User-Agent&lt;/p&gt;
&lt;p&gt;客户端使用的操作系统和浏览器版本信息&lt;/p&gt;
&lt;p&gt;Accept-Charset&lt;/p&gt;
&lt;p&gt;浏览器声明自己接受的字符集类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie/Login&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cookie&lt;/p&gt;
&lt;p&gt;包含cookie值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Entity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Content-Length&lt;/p&gt;
&lt;p&gt;表明发送给HTTP服务器数据的长度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Referer:&lt;/p&gt;
&lt;p&gt;提供Request的上下文信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transport&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Connection&lt;/p&gt;
&lt;p&gt;Connection:keep-alive 当一个网页加载完成后，客户端与服务端之间用于传输HTTP数据的TCP连接保持，如果客户端再次访问服务端，仍继续使用这一条连接。&lt;/p&gt;
&lt;p&gt;Connection:close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭，当客户端再次发送Request,需要重新建立TCP连接。&lt;/p&gt;
&lt;p&gt;Host&lt;/p&gt;
&lt;p&gt;请求报头主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。&lt;/p&gt;
&lt;h3&gt;HTTP Response Header&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cache&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date: 生成消息的具体时间和日期
Expires: 浏览器会在指定过期时间内使用本地缓存
Vary:  Accept-Encoding&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie/Login&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P3P: 用于跨域设置Cookie,解决iframe跨域访问cookie的问题
Set-Cookie: 用于把cookie发送到客户端浏览器，每一个写入cookie都会生成一个Set-Cookie&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Entity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ETag: 和If-None-Match配合使用&lt;/p&gt;
&lt;p&gt;Last-Modified: 用于指示资源的最后修改日期和时间&lt;/p&gt;
&lt;p&gt;Content-Type: 表明服务端响应的对象类型和字符集
例如：
    Content-Type: text/html; charset=utf-8
    Content-Type:text/html;charset=GB2312
    Content-Type: image/jpeg&lt;/p&gt;
&lt;p&gt;Content-Length:指明实体正文的长度，以字节方式存储的十进制数字表示。在数据下行的过程中，Content-Length的方式预先在服务器中缓存数据，然后把数据一起发给客户端。&lt;/p&gt;
&lt;p&gt;Content-Encoding: 表明返回数据的压缩算法&lt;/p&gt;
&lt;p&gt;Content-Language: 表明返回数据的语言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Server:指明HTTP服务器的软件信息&lt;/p&gt;
&lt;p&gt;X-AspNet-Version:header表明net版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transport&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;connection:
例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接&lt;/p&gt;
&lt;p&gt;例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Location&lt;/p&gt;
&lt;p&gt;作用：用于重定向一个新的位置, 包含新的URL地址&lt;/p&gt;
&lt;p&gt;实例请看304状态实例&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 01 Jun 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-06-01:2014/06/01/http/</guid><category>web</category></item><item><title>Python-Tips(十三)</title><link>http://king32783784.github.io/2014/05/31/python/</link><description>&lt;h3&gt;Tips 28&lt;/h3&gt;
&lt;p&gt;python类中包含很多特殊方法，这些方法让类用起来如同序列、字典、函数、迭代器，甚至像个数字。&lt;/p&gt;
&lt;h4&gt;基础知识&lt;/h4&gt;
&lt;p&gt;最常见的就是__init__()。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python内部调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;初始化一个实例&lt;/td&gt;
&lt;td&gt;x = MyClass()&lt;/td&gt;
&lt;td&gt;x.__init__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;字符串的“官方”表现形式&lt;/td&gt;
&lt;td&gt;repr(x)&lt;/td&gt;
&lt;td&gt;x.__repr__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;字符串的“非正式"值&lt;/td&gt;
&lt;td&gt;str(x)&lt;/td&gt;
&lt;td&gt;x.__str__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;字节数组的”非正式“值&lt;/td&gt;
&lt;td&gt;bytes(x)&lt;/td&gt;
&lt;td&gt;x.__bytes__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;格式化字符串的值&lt;/td&gt;
&lt;td&gt;format(x, format_spec)&lt;/td&gt;
&lt;td&gt;x.__format__(format_spec)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1.对__init__()方法调用发生在实例被创建之后。如果要控制实际创建进程，请使用__new__方法。
2.__repr__()方法返回的字符串为合法的python表达式
3.在调用print(x)的同时调用了__str__()方法&lt;/p&gt;
&lt;h4&gt;行为方式和迭代器类似的类&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;编写的代码&lt;/th&gt;
&lt;th&gt;python的实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;遍历每个序列&lt;/td&gt;
&lt;td&gt;iter(seq)&lt;/td&gt;
&lt;td&gt;seq.__iter__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;迭代器取下一个值&lt;/td&gt;
&lt;td&gt;next(seq)&lt;/td&gt;
&lt;td&gt;seq.__next__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;按逆序创建一个迭代器&lt;/td&gt;
&lt;td&gt;reversed(seq)&lt;/td&gt;
&lt;td&gt;seq.__reversed__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1.无论何时创建迭代器都将调用__iter__()方法。这是用初始值对迭代器进行初始化的绝佳之处。
2.无论何时从迭代器中获取下一个值都将调用__next__()方法。
3.__reversed__()方法并不常用。它以一个现有序列为参数，并将该序列中所有元素从尾到头以逆序生成一个新的迭代器。&lt;/p&gt;
&lt;h4&gt;属性&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;编写的代码&lt;/th&gt;
&lt;th&gt;python 实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;获取一个属性&lt;/td&gt;
&lt;td&gt;x.my_property&lt;/td&gt;
&lt;td&gt;x.__getattribute__('my_property')&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;获取一个属性（备用)&lt;/td&gt;
&lt;td&gt;x.my_property&lt;/td&gt;
&lt;td&gt;x.__getattr__('my_property')&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;设置某属性&lt;/td&gt;
&lt;td&gt;x.my_property = value&lt;/td&gt;
&lt;td&gt;x.__setattr__('my_property', value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;删除某属性&lt;/td&gt;
&lt;td&gt;del x.myproperty&lt;/td&gt;
&lt;td&gt;x.__delattr__('my_property')&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;列出所有属性和方法&lt;/td&gt;
&lt;td&gt;dir(x)&lt;/td&gt;
&lt;td&gt;x.__dir__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1.如果类定义了__getattribute__()方法，在每次引用属性或方法名称时python都调用它（特殊方法名称除外，因为会导致无限循环）
2.如果类定义了__getattr__()方法，python在正常位置查询属性时才会调用。
3.无论何时给属性赋值，都会调用__setattr__()
4.删除属性时，会调用__delattr__()
5.如果定义了__getattr__()或__getattribute__()，__dir__()方法将会非常有用&lt;/p&gt;
&lt;p&gt;__getattr__()和__getattribute__()方法的区别非常细微，但非常重要。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Dynamo&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;属性名称以字符串的形式传入&lt;/span&gt;&lt;span class="nx"&gt;__getattr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nx"&gt;__&lt;/span&gt;&lt;span class="err"&gt;方法&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　　　　　　　　#&lt;/span&gt; &lt;span class="err"&gt;如果属性名称未知，触发异常&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;AttributeError&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dynamo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="err"&gt;没有名为&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="err"&gt;的属性，获取时将调用&lt;/span&gt;&lt;span class="nx"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LemonChiffon&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;显示的设置了&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="err"&gt;属性后，不再调用&lt;/span&gt;&lt;span class="nx"&gt;__getattr__&lt;/span&gt;&lt;span class="err"&gt;方法。&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;LemonChiffon&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一方面，__getattribute__()方法是直接的，无条件的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SuperDynamo&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;AttributeError&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SuperDynamo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;直接调用&lt;/span&gt;&lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;，返回&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LemonChiffon&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;虽然显示的设置了&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="err"&gt;属性，但仍然会调用&lt;/span&gt;&lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果定义了类的__getattribute__()方法，你可能还想定义一个__setattr__()方法，需要两则之间进行协同，以跟踪属性的值。
必须特别小心__getattribute__()方法，因为python在查找类的方法名称时也将对其进行调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Rastan&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;AttributeError&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;定义了一个总是触发异常的&lt;/span&gt;&lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="err"&gt;方法&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Rastan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;时，&lt;/span&gt;&lt;span class="nx"&gt;python&lt;/span&gt;&lt;span class="err"&gt;将在&lt;/span&gt;&lt;span class="nx"&gt;Rastan&lt;/span&gt;&lt;span class="err"&gt;类查找&lt;/span&gt;&lt;span class="nx"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法。该查找将执行整个&lt;/span&gt;&lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法，因为所有的属性和方法查找都通过&lt;/span&gt;&lt;span class="nx"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法。&lt;/span&gt;
&lt;span class="nx"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;__getattribute__&lt;/span&gt;
&lt;span class="nx"&gt;AttributeError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;行为方式和函数类似的类&lt;/h4&gt;
&lt;p&gt;可以让类的实例变得可调用-就想函数可以调用一样-通过定义__call__()方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;编写代码&lt;/th&gt;
&lt;th&gt;Python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;像调用函数一样使用实例&lt;/td&gt;
&lt;td&gt;my_instance()&lt;/td&gt;
&lt;td&gt;my_instance.__call__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;行为和序列类似的类&lt;/h4&gt;
&lt;p&gt;如果类作为一系列值的容器出现，可以通过下面方法，让其的行为方式和序列类似。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;序列的长度&lt;/td&gt;
&lt;td&gt;len(seq)&lt;/td&gt;
&lt;td&gt;seq.__len__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;判断序列是否包含指定的值&lt;/td&gt;
&lt;td&gt;x in seq&lt;/td&gt;
&lt;td&gt;seq.__contains__(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;行为和字典类似的类&lt;/h4&gt;
&lt;p&gt;类可以像字典一样根据键来返回值&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;通过键来获取值&lt;/td&gt;
&lt;td&gt;x[key]&lt;/td&gt;
&lt;td&gt;x.__getitem__(key)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过键来设置值&lt;/td&gt;
&lt;td&gt;x[key] = value&lt;/td&gt;
&lt;td&gt;x.__setitem__(key, value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除一个键值对&lt;/td&gt;
&lt;td&gt;del x[key]&lt;/td&gt;
&lt;td&gt;x.__delitem__(key)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;为缺失键提供默认值&lt;/td&gt;
&lt;td&gt;x[nonexistent_key]&lt;/td&gt;
&lt;td&gt;x.__missing__(nonexistent_key)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;行为和数值类似的类&lt;/h4&gt;
&lt;p&gt;使用适当的特殊方法，可以将类的行为定义为与数字相仿。也就是说，可以进行相加、相减、及其他运算，Fraction类就实现了这些特殊方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fractions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;| 目的 | 编写的代码 |  python实际调用 |
| 加法 | x + y      | x.__add__(y) |
| 减法 | x - y      | x.__sub__(y) |
| 乘法 | x * y      | x.__mul__(y) |
| 除法 | x / y      | x.__truediv__(y) |
| 地板除 | x//y     | x.__fooldiv__(y) |
| 取余 | x % y      | x.__mod__(y) |
| 地板除&amp;amp;取余 | divmod(x,y) | x.__divmod__(y)|
| 乘幂 | x ** y | x.__pow__(y) |
| 左移位 | x &amp;lt;&amp;lt; y | x.__lshift__(y) |
| 右移位 | x &amp;gt;&amp;gt; y | x.__rshift__(y) |
| 按位与 | x &amp;amp; y | x.__and__(y) |
| 按位异或 | x^y | x.__xor__(y) |
| 按位或 | x | y | x.__or__(y) |&lt;/p&gt;
&lt;p&gt;前面是第一个的操作数调用对应函数，第二个操作数作为参数，下面的特殊方法集合，是第二个操作数调用方法，第一个操作数作为参数。&lt;/p&gt;
&lt;p&gt;| 目的  |  代码    | python 调用 |
| +    | x + y     | y.__radd__(x) |
| -    | x - y     | y.__rsub__(x) |
| *    | x * y     | y.__rmul__(x) |
| /    | x / y     | y.__rturediv__(x) |
| //   | x // y    | y.__rfloordiv__(x) |
| %    | x % y     | y.__rmod__(x) |
|// &amp;amp; % | divmod(x,y) | y.__rdivmod__(x) |
| &lt;strong&gt;   |   x &lt;/strong&gt; y |  y.__rpow__(x) |
| &amp;lt;&amp;lt; | x &amp;lt;&amp;lt; y | y.__rlshift__(x) |
| &amp;gt;&amp;gt; | x &amp;gt;&amp;gt; y | y.__rrshift__(x) |
| &amp;amp; | x &amp;amp; y | y.__rand__(x)|
| ^ | x ^ y | y.__rxor__(x) |
| 或 | x or y | y.__ror__(x) |&lt;/p&gt;
&lt;p&gt;如果原地操作呢？x += 3&lt;/p&gt;
&lt;p&gt;| 代码 | python实际调用 |
| x += y | x.__iadd__(y) |
| x -= y | x.__isub__(y) |
| x *= y | x.__imul__(y) |
| x /= y | x.__iturediv__(y) |
| x //= y | x.__ifloordiv__(y) |
| x %= y | x.__imod__(y) |
| x **= y | x.__ipow__(y) |
| x &amp;lt;&amp;lt;= y | x.__ilshift__(y) |
| x &amp;gt;&amp;gt;= y | x.__irshift__(y) | 
| x &amp;amp;= y | x.__iland__(y) |
| x ^= y | x.__ixor__(y) |
| x |= y | x.__ior__(y) |&lt;/p&gt;
&lt;p&gt;还有一些一元运算符，可以对“类-数字”对象自己执行。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;正数&lt;/td&gt;
&lt;td&gt;+x&lt;/td&gt;
&lt;td&gt;x.__pos__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绝对值&lt;/td&gt;
&lt;td&gt;abs(x)&lt;/td&gt;
&lt;td&gt;x.__abs__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;取反&lt;/td&gt;
&lt;td&gt;~x&lt;/td&gt;
&lt;td&gt;x.__invert__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;复数&lt;/td&gt;
&lt;td&gt;complex(x)&lt;/td&gt;
&lt;td&gt;x.__complex__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;整数转换&lt;/td&gt;
&lt;td&gt;int(x)&lt;/td&gt;
&lt;td&gt;x.__int__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;td&gt;float(x)&lt;/td&gt;
&lt;td&gt;x.__float__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;四舍五入整数&lt;/td&gt;
&lt;td&gt;round(x)&lt;/td&gt;
&lt;td&gt;x.__round__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;四舍五入至n位小数&lt;/td&gt;
&lt;td&gt;round(x, n)&lt;/td&gt;
&lt;td&gt;x.__round__(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;= x的最小整数&lt;/td&gt;
&lt;td&gt;math.ceil(x)&lt;/td&gt;
&lt;td&gt;x.__ceil__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;= x的最大整数&lt;/td&gt;
&lt;td&gt;math.floor(x)&lt;/td&gt;
&lt;td&gt;x.__floor__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;对x朝向０取整&lt;/td&gt;
&lt;td&gt;math.trunc(x)&lt;/td&gt;
&lt;td&gt;x.__trunc__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;作为索引的数字&lt;/td&gt;
&lt;td&gt;a_list[x]&lt;/td&gt;
&lt;td&gt;a_list[x.__index__()]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;可比较的类&lt;/h4&gt;
&lt;p&gt;许多数据类型都可以进行比较，可以使用以下特殊方法来实现。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码实现&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;td&gt;x == y&lt;/td&gt;
&lt;td&gt;x.__eq__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;td&gt;x!= y&lt;/td&gt;
&lt;td&gt;x.__ne__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;x &amp;lt; y&lt;/td&gt;
&lt;td&gt;x.__lt__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小于或等于&lt;/td&gt;
&lt;td&gt;x &amp;lt;= y&lt;/td&gt;
&lt;td&gt;x.__le__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;td&gt;x&amp;gt;y&lt;/td&gt;
&lt;td&gt;x.__gt__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大于或等于&lt;/td&gt;
&lt;td&gt;x &amp;gt;= y&lt;/td&gt;
&lt;td&gt;x.__ge__(y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔上下文环境的真值&lt;/td&gt;
&lt;td&gt;if x :&lt;/td&gt;
&lt;td&gt;x.__bool__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;可序列化的类&lt;/h4&gt;
&lt;p&gt;python支持任意对象的可序列化和反序列化。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;自定义对象的复制&lt;/td&gt;
&lt;td&gt;copy.copy(x)&lt;/td&gt;
&lt;td&gt;x.__copy__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自定义对象的深度复制&lt;/td&gt;
&lt;td&gt;copy.deepcopy(x)&lt;/td&gt;
&lt;td&gt;x.__deepcopy__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在pickling之前获取对象的状态&lt;/td&gt;
&lt;td&gt;pickle.dump(x, file)&lt;/td&gt;
&lt;td&gt;x.__getstate__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;序列化某对象&lt;/td&gt;
&lt;td&gt;pickle.dump(x, file)&lt;/td&gt;
&lt;td&gt;x.__reduce__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;序列化某对象(新pickling协议)&lt;/td&gt;
&lt;td&gt;pickle.dump(x,file, protocol_version)&lt;/td&gt;
&lt;td&gt;x.__reduce_ex__(protocol_verion)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制unpickling过程中对象的创建方式&lt;/td&gt;
&lt;td&gt;x = pickle.load(file)&lt;/td&gt;
&lt;td&gt;x.__getnewargs__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在unpickling之后还原对象的状态&lt;/td&gt;
&lt;td&gt;x = pickle.load(file)&lt;/td&gt;
&lt;td&gt;x.__setstate__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;可在WITH语块中使用的类&lt;/h4&gt;
&lt;p&gt;with语块定义了运行时刻上下文环境；在执行with语句时将“进入”该上下文环境，而执行该语块中的最后一条语句将“退出"该上下文环境。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;进入with语块时进行一些特别操作&lt;/td&gt;
&lt;td&gt;with x：&lt;/td&gt;
&lt;td&gt;x.__enter__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在退出with语块时进行一些特别操作&lt;/td&gt;
&lt;td&gt;with x:&lt;/td&gt;
&lt;td&gt;x.__exit__()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下是with　file习惯用法的运作方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _checkClosed(self, msg=None):
    if self.closed:
        raise ValueError(&amp;#39;I/O operation on closed file.&amp;#39;
                          if msg is None else msg)
def __enter__(self):
    self._checkClosed()
    return self

def __exit__(self, *args):
    self.close()

该文件对象同时定义了一个__enter__()和一个__exit__()方法。该__enter__()方法检查文件是否处于打开状态；如果没有,_checkClosed方法触发一个例外
__enter__方法将始终返回self，这是with语块将用于调用属性和方法的对象。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在with语块结束后，文件对象将自动关闭&lt;/p&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;p&gt;如果知道自己在做什么，几乎可以完全控制类是如何比较的、属性如何定义，以及类的子类是何种类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;python实际调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;类构造器&lt;/td&gt;
&lt;td&gt;x=MyClass()&lt;/td&gt;
&lt;td&gt;x.__new__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;类析构器&lt;/td&gt;
&lt;td&gt;del x&lt;/td&gt;
&lt;td&gt;x.__del__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;只定义特定集合的某些特性&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;x.__slots__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自定义散列值&lt;/td&gt;
&lt;td&gt;hash(x)&lt;/td&gt;
&lt;td&gt;x.__hash__()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取某个属性的值&lt;/td&gt;
&lt;td&gt;x.color&lt;/td&gt;
&lt;td&gt;type(x).__dict__['color'].__get__(x,type(x))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设置某个属性的值&lt;/td&gt;
&lt;td&gt;x.color = 'PapayWhip'&lt;/td&gt;
&lt;td&gt;type(x).__dict__['color'].__set__(x, 'PapayaWhip')&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除某个属性&lt;/td&gt;
&lt;td&gt;del x.color&lt;/td&gt;
&lt;td&gt;type(x).__dict__['color'].__del__(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制某个对象是否该对象的实例&lt;/td&gt;
&lt;td&gt;isinstance(x, MyClass)&lt;/td&gt;
&lt;td&gt;MyClass.__instancecheck__(x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制某个类是否是该类的子类&lt;/td&gt;
&lt;td&gt;issubclass(C,MyClass)&lt;/td&gt;
&lt;td&gt;MyClass.__subclasscheck__(C)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制某个类是否是该抽象基类的子类&lt;/td&gt;
&lt;td&gt;issubclass(C, MyABC)&lt;/td&gt;
&lt;td&gt;MyABC.__subclasshook__(C)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 31 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-31:2014/05/31/python/</guid><category>Python-tips</category></item><item><title>Python-Tips(十二)</title><link>http://king32783784.github.io/2014/05/28/python/</link><description>&lt;h3&gt;Tips 27&lt;/h3&gt;
&lt;p&gt;本文继续上一个tips，python2与python3的差异。&lt;/p&gt;
&lt;h4&gt;RAW_INPUT()和INPUT()&lt;/h4&gt;
&lt;p&gt;python2有两个全局函数，用在命令行请求用户输入。第一个叫input()，它等待用户输入一个python表达式(然后返回结果)。第二个叫做raw_input(),用户输入什么他就返回什么。python3 通过input替代了他们。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;raw_input()&lt;/td&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;input替代了raw_input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raw_input('prompt')&lt;/td&gt;
&lt;td&gt;input('prompt')&lt;/td&gt;
&lt;td&gt;python3仍然支持提示符参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input()&lt;/td&gt;
&lt;td&gt;eval(input))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;函数属性FUNC_*&lt;/h4&gt;
&lt;p&gt;python2,函数的代码可用访问到函数本身的特殊属性。python3为了一致性，这些特殊属性被重命名了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_name&lt;/td&gt;
&lt;td&gt;a_function.__name__&lt;/td&gt;
&lt;td&gt;__name__属性包含了函数的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_doc&lt;/td&gt;
&lt;td&gt;a_function.__doc__&lt;/td&gt;
&lt;td&gt;__doc__包含了函数源代码定义的文档字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_defaults&lt;/td&gt;
&lt;td&gt;a_function.__defaults__&lt;/td&gt;
&lt;td&gt;是一个保存参数默认值的元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_dict&lt;/td&gt;
&lt;td&gt;a_function.__dict__&lt;/td&gt;
&lt;td&gt;__dict__属性是一个支持任意函数属性的名字空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_closure&lt;/td&gt;
&lt;td&gt;a_function.__closure__&lt;/td&gt;
&lt;td&gt;__closure__属性是由cell对象组成的元组，包含了函数对自由变量的绑定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_globals&lt;/td&gt;
&lt;td&gt;a_function.__globals__&lt;/td&gt;
&lt;td&gt;是对模块全局名字空间的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function.func_code&lt;/td&gt;
&lt;td&gt;a_function.__code__&lt;/td&gt;
&lt;td&gt;是一个代码对象，表示编译后的函数体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;I/O方法XREADLINES()&lt;/h4&gt;
&lt;p&gt;python2中，文件对象有一个xreadlines()方法，返回一个迭代器，一次读取文件的一行。这在for循环中尤其实用。python3中，xreadlines()方法不再可用。&lt;/p&gt;
&lt;h4&gt;lambda函数&lt;/h4&gt;
&lt;p&gt;在python2中，可以定义匿名函数lambda函数，通过指定作为参数的元组的元素个数，使这个函数实际上能够接收多个参数。python2的解释器把这个元组"解开“成命名参数，然后可以在lambda函数里引用它们。在python3中仍然可以传递一个元组为lambda函数的参数。但是python解释器不会把它当成解析成命名参数。需要通过位置索引来引用每个参数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lambda (x,): x + f(x)&lt;/td&gt;
&lt;td&gt;lambda x1 : x1[0] + f(x1[0])&lt;/td&gt;
&lt;td&gt;注１&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lambda (x,y): x + f(y)&lt;/td&gt;
&lt;td&gt;lambda x_y : x_y[0] + f(x_y[1])&lt;/td&gt;
&lt;td&gt;注２&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lambda (x,(y,z)): x + y + z&lt;/td&gt;
&lt;td&gt;lambda x_y_z: x_y_z[0] + x_y_z[1][0]+ x_y_z[1][1]&lt;/td&gt;
&lt;td&gt;注３&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lambda x,y,z: x+y+z&lt;/td&gt;
&lt;td&gt;unchanged&lt;/td&gt;
&lt;td&gt;注４&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注１：如果定义了一个lambda函数，使用包含一个元素的元组作为参数，python3中，会被转换成一个包含到x1[0]的引用的lambda函数。x1是2to3脚本基于原来元组里的命名参数自动生成的。&lt;/p&gt;
&lt;p&gt;注２：使用含有两个元素的元组(x,y)作为参数的lambda函数被转换为x_y,它有两个位置参数，即x_y[0]和x_y[1]&lt;/p&gt;
&lt;p&gt;注３：2to3脚本可以处理使用嵌套命名参数的元组作为参数的lambda函数。产生的结果有点晦涩，但python3下和python2的效果是一样的。&lt;/p&gt;
&lt;p&gt;注４：可以定义使用多个参数的lambda函数。语法在python3同样有效&lt;/p&gt;
&lt;h4&gt;特殊的方法属性&lt;/h4&gt;
&lt;p&gt;在python2里，类方法可以访问到定义他们的类对象,也能访问方法对象本身。im_self是类的实例对象；im_func是函数对象，im_class是类本身。在python3里，这些属性被重命名，以遵循其他属性的命名约定。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aClassInstance.aClassMethod.im_func&lt;/td&gt;
&lt;td&gt;aClassInstance.aClassMethod.__func__&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aClassInstance.aClassMethod.im_self&lt;/td&gt;
&lt;td&gt;aClassInstance.aClassMethod.__self__&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aClassInstance.aClassMethod.im_class&lt;/td&gt;
&lt;td&gt;aClassInstance.aClassMethod.__self__.__class__&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;__NONZERO__特殊方法&lt;/h4&gt;
&lt;p&gt;在python2里，可以创建自己的类，并使他们能够在布尔上下文中使用。举例来说，可以实例化这个类，并把这个实例对象用在一个if语句中。为了实现这个目的，可以定义一个特别的__nonzero__()方法，它的返回值为True或False,当实例对象处在布尔上下文中的时候这个方法就会被调用。在python3中，仍然可以完成同样的功能，但这个特殊方法的名字改为了__bool__()&lt;/p&gt;
&lt;p&gt;比如python2中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__nonzero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python3中改为：
　
    class A:
        def &lt;strong&gt;bool&lt;/strong&gt;(self)：
            pass&lt;/p&gt;
&lt;p&gt;在布尔上下文使用一个类对象时，python3会调用__bool__().&lt;/p&gt;
&lt;p&gt;python2中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__nonzero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
         &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种情况python3中不做改变，使用两个参数的__nonzero__()方法，2to3脚本会假设你定义的这个方法有其他用处，不做修改。&lt;/p&gt;
&lt;h4&gt;八进制类型&lt;/h4&gt;
&lt;p&gt;python2和python3，定义八进制数的语法有轻微的改变&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x= 0755&lt;/td&gt;
&lt;td&gt;x = 0o755&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;SYS.MAXINT&lt;/h4&gt;
&lt;p&gt;python3中长整型和整型被整合到一起，sys.maxint常量不再精确。但是因为这个值用于检查特定平台，所以被python3保留，重命名为sys.maxsize.&lt;/p&gt;
&lt;h4&gt;全局函数CALLABLE()&lt;/h4&gt;
&lt;p&gt;python２里，可以使用全局函数callable()来检查一个对象是否可调用，在python3中，这个全局函数被取消了，为了检查一个对象是否可调用，可以检查其特殊方法__call__()的存在性。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;callable(anthing)&lt;/td&gt;
&lt;td&gt;hasattr(anything, '__call__')&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;全局函数ZIP()&lt;/h4&gt;
&lt;p&gt;在python2，zip()可以使用任意多个序列作为参数，它返回一个由元组构成的列表。第一个元组包含了每个序列的第一个元素，第二个元组包含了每个序列的第二个元素，依次递推。在python３中返回一个迭代器，而非列表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;zip(a,b,c)&lt;/td&gt;
&lt;td&gt;list(zip(a,b,c)&lt;/td&gt;
&lt;td&gt;python3中可以通过list函数遍历zip()返回的迭代器，形成列表返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d.join(zip(a,b,c))&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;在已经会遍历所有元素的上下文环境里，zip()本身返回的迭代器能够正常工作，2to3脚本检测到后，不再修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;STANDARDERROR异常&lt;/h4&gt;
&lt;p&gt;python2中，StandardError是除了StopIteration,GeneratorExit,KeyboardInterrupt, SystemExit之外所有其他内置异常的基类。python3中StandardError已经被取消了，使用Exception取代。&lt;/p&gt;
&lt;h4&gt;TYPES模块中的常量&lt;/h4&gt;
&lt;p&gt;types模块里各种各样的常量能够帮助你决定一个对象的类型。在python2里，它包含了代表所有基本数据类型的常量，如dict和int。在python3里，这些常量被取消了，只需使用基础类型的名字来替代。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;types.UnicodeType&lt;/td&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.StringType&lt;/td&gt;
&lt;td&gt;bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.DictType&lt;/td&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.IntType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.LongType&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.ListType&lt;/td&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.NoneType&lt;/td&gt;
&lt;td&gt;type(None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.BooleanType&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.BufferType&lt;/td&gt;
&lt;td&gt;memoryview&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.ClassType&lt;/td&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.ComplexType&lt;/td&gt;
&lt;td&gt;complex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.EllipsisType&lt;/td&gt;
&lt;td&gt;type(Ellipsis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.FloatType&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.ObjectType&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.NotImplementedType&lt;/td&gt;
&lt;td&gt;type(NotImplemented)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.SliceType&lt;/td&gt;
&lt;td&gt;slice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.TupleType&lt;/td&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.TypeType&lt;/td&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;types.XRangeType&lt;/td&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;全局函数ISINSTANCE()&lt;/h4&gt;
&lt;p&gt;isinstance()函数检查一个对象是否是一个特定类(class)或类型(type)的实例。在python2，可以传递一个由类型构成的元组给isinstance(),如果该对象是元组里的任意一种类型，函数返回True. 在python3,依然可以这样做。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;isinstance(x, (int, float, int))&lt;/td&gt;
&lt;td&gt;isinstance(x, (int, float))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;ITERTOOLS模块&lt;/h4&gt;
&lt;p&gt;python2.3引入itertools模块，定义了zip(),map(),filter()的变体，这个变体返回的是迭代器，而非列表。在python3,这些函数返回的本身就是迭代器，所有这些变体函数就取消了。&lt;/p&gt;
&lt;h4&gt;SYS.EXC_TYPE,SYS.EXC_VALUE,SYS.EXC_TRACEBACK&lt;/h4&gt;
&lt;p&gt;处理异常的时候，在sys模块里有三个你可以访问的变量：sys.exc_type, sys.exc_value, sys.exc_traceback. python3中这三个变量不再存在，使用sys.exc_info替代。&lt;/p&gt;
&lt;h4&gt;对元组的列表解析&lt;/h4&gt;
&lt;p&gt;python2，如果需要编写一个遍历元组的列表解析，不需要在元组值周围加上括号。在python3里，这些括号是必需的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[ i for i in 1, 2]&lt;/td&gt;
&lt;td&gt;[i for i in (1,2)]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;元类&lt;/h4&gt;
&lt;p&gt;在python2里，可以通过在类的声明中定义metaclass参数，或者定义一个特殊的类级别(class-level)__metaclass__属性，来创建元类。python3中，__metaclass__属性被取消了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;class C(metaclass=PapayaMeta): pass&lt;/td&gt;
&lt;td&gt;unchanged&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class Whip: __metaclass__ = PapayMeta&lt;/td&gt;
&lt;td&gt;class Whip(metaclass=PapayaMeta): pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class C(Whipper, Beater): __metaclass__ = PapayaMeta&lt;/td&gt;
&lt;td&gt;class C(Whipper, Beater, metaclass=PapayMeta): pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 28 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-28:2014/05/28/python/</guid><category>Python-tips</category></item><item><title>Python-Tips(十一)</title><link>http://king32783784.github.io/2014/05/27/python/</link><description>&lt;h3&gt;Tips 27&lt;/h3&gt;
&lt;p&gt;几乎所有的python2程序都需要一些修改才能正常的运行在python3的环境下。为了简化这个转换过程，Python3自带了一个2to3的实用脚本.这个脚本会将python2程序源文件作为输入，然后自动转换到python３．但并不是所有内容都可以自动转换。&lt;/p&gt;
&lt;h4&gt;print语句&lt;/h4&gt;
&lt;p&gt;python2中print是一个语句，不论想输出什么，直接放到print关键字后面即可。python3里，print()是一个函数，像其他函数一样，print()需要你将要输出的东西作为参数传给它。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;print&lt;/td&gt;
&lt;td&gt;print()&lt;/td&gt;
&lt;td&gt;输出一个空白行，python3需要调用不带参数的print()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print 1&lt;/td&gt;
&lt;td&gt;print(1)&lt;/td&gt;
&lt;td&gt;输出一个值，将值传入print()函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print 1, 2&lt;/td&gt;
&lt;td&gt;print(1,2)&lt;/td&gt;
&lt;td&gt;输出使用空格分割的两个值，使用两个参数调用print()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print 1, 2,&lt;/td&gt;
&lt;td&gt;print(1,2, end=' ')&lt;/td&gt;
&lt;td&gt;python2中如果使用一个,作为print结尾，将会用空格分割输出的结果，然后在输出一个尾随的空格，而不输回车。python3里，把end=' ' 作为一个关键字传给print()可以实现同样的效果，end默认值为'\n',所以通过重新指定end参数的值，可以取消在末尾输出回车符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print &amp;gt;&amp;gt; sys.stderr, 1, 2, 3&lt;/td&gt;
&lt;td&gt;print(1, 2, 3, file=sys.stderr&lt;/td&gt;
&lt;td&gt;python2中，可以通过&amp;gt;&amp;gt;pipe_name语法，把输出重定向到一个管道，比如sys.stderr.在python3里，可以通过将管道作为关键字参数file的值传递给print()完成同样的功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;UNICODE字符串&lt;/h4&gt;
&lt;p&gt;python2中有两种字符串类型：Unicode字符串和非Unicode字符串。Python3中只有一种类型：Unicode字符串。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;u'PapayaWhip'&lt;/td&gt;
&lt;td&gt;'PapayaWhip'&lt;/td&gt;
&lt;td&gt;python2中的Unicode字符串在python3即为普通字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ur'PapayaWhip\foo'&lt;/td&gt;
&lt;td&gt;r'PapayWhip\foo'&lt;/td&gt;
&lt;td&gt;Unicode原始字符串(使用这种字符串，python不会自动转义反斜线"\")也被替换为普通的字符串，因为在python3里，所有原始字符串都是以unicode编码的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;全局函数UNICODE()&lt;/h4&gt;
&lt;p&gt;python２有两个全局函数可以把对象强制转换成字符串:unicode()把对象转换成unicode字符串，还有str()把对象转换为非Unicode字符串。Python3只有一种字符串类型，unicode字符串，所以str()函数即可完成所有的功能。&lt;/p&gt;
&lt;h4&gt;LONG长整型&lt;/h4&gt;
&lt;p&gt;python2有非浮点数准备的int和long类型。int类型最大值不能超过sys.maxint，而且这个最大值是平台相关的。可以通过在数字的末尾附上一个Ｌ来定义长整型，显然，它比int类型表示的数字范围更大。在python3里，只有一种整数类型int,大多数情况下，和python２中的长整型类似。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x = 1000000000000L&lt;/td&gt;
&lt;td&gt;x = 1000000000000&lt;/td&gt;
&lt;td&gt;python2中的十进制长整型在python3中被替换为十进制普通整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x = 0xFFFFFFFFFFFFL&lt;/td&gt;
&lt;td&gt;x = 0xFFFFFFFFFFFF&lt;/td&gt;
&lt;td&gt;python2里的十六进制长整型在python3里被替换为十六进制的普通整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long(x)&lt;/td&gt;
&lt;td&gt;int(x)&lt;/td&gt;
&lt;td&gt;python3没有long()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type(x) is long&lt;/td&gt;
&lt;td&gt;type(x) is int&lt;/td&gt;
&lt;td&gt;python3用int判断是否为整型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isinstance(x, long)&lt;/td&gt;
&lt;td&gt;isinstance(x, int)&lt;/td&gt;
&lt;td&gt;int检查整数类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&amp;lt;&amp;gt;比较运算符&lt;/h4&gt;
&lt;p&gt;Python2支持&amp;lt;&amp;gt;作为!=的同义词，　python3只支持!=, 不再支持&amp;lt;&amp;gt;&lt;/p&gt;
&lt;h4&gt;字典类方法HAS_KEY()&lt;/h4&gt;
&lt;p&gt;Python2中，字典对象has_key()方法测试字典是否包含指定的键。python3不再支持这个方法，需要使用in.&lt;/p&gt;
&lt;h4&gt;返回列表的字典类方法&lt;/h4&gt;
&lt;p&gt;在python2里，许多字典类方法的返回值是列表。最常用方法有keys, items和values。python3，所有以上方法的返回值改为动态试图。在一些上下文环境里，这种改变不会产生影响。如果这些方法的返回值被立即传递给另外一个函数，而且那个函数会遍历整个序列，那么以上方法的返回值是列表或视图并不会产生什么不同。如果你期望获得一个被独立寻址元素的列表，那么python3的这些改变将会使你的代码卡住，因为视图不支持索引。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a_dictionary.keys()&lt;/td&gt;
&lt;td&gt;list(a_dictionary.keys())&lt;/td&gt;
&lt;td&gt;使用list()将keys 返回值转换为一个静态列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_dictionary.items()&lt;/td&gt;
&lt;td&gt;list(a_dictonary.items())&lt;/td&gt;
&lt;td&gt;将items返回值转为列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_dictionary.iterkeys()&lt;/td&gt;
&lt;td&gt;iter(a_dictionary.keys())&lt;/td&gt;
&lt;td&gt;python3不再支持iterkeys,使用iter()将keys()的返回值转换为一个迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[i for i in a_dictionary.iterkeys()]&lt;/td&gt;
&lt;td&gt;[ i for i in a_dictonary.keys()]&lt;/td&gt;
&lt;td&gt;不需要使用额外的iter()，keys()方法返回的是可迭代的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(a_dictionary.keys())&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;对min(),max(),sum(),list(),tuple(),set(),sorted(),any()和all()同样有效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;重命名或重新组织的模块&lt;/h4&gt;
&lt;p&gt;从python2到python3，标准库里的一些模块已经被重命名。还有一些相互关联的模块也被组合或则重新组织，使得这种关联更有逻辑性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python3中几个相关的http模块被组合成一个单独的包，即http&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;import httplib&lt;/td&gt;
&lt;td&gt;import http.client&lt;/td&gt;
&lt;td&gt;http.client模块实现一个底层的库，可以用来请求和解析http&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import cookie&lt;/td&gt;
&lt;td&gt;import http.cookies&lt;/td&gt;
&lt;td&gt;http.cookie提供一个pythonic接口进行cookies操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import cookielib&lt;/td&gt;
&lt;td&gt;import http.cookiejar&lt;/td&gt;
&lt;td&gt;http.cookiejar可以操作cookies文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import BaseHTTPServer import SimpleHTTPServer import CGIHttpServer&lt;/td&gt;
&lt;td&gt;import http.server&lt;/td&gt;
&lt;td&gt;http.server实现了一个基本的http服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;URLLIB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python2中用来分析、编码和获取URL的模块，但是比较混乱，python3中，这些模块被重构，组合成为一个单独的包，即urllib&lt;/p&gt;
&lt;p&gt;| python2         | python3                 | 备注
| import urllib  |  import urllib.request, import urllb.parse, import urllib.error | 
| import urllib2 | import urllib.request, urllib.error | 
| import urlparse | import urllib.parse |
| import robotparser | import urllib.robotparser |
| from urllib import FancyURLopener | from urllib.rquest import FancyURLopener from urllib.parse |
|from urllib2 import Request from urllib2 import HTTPError | from urllib.request import Request from urllib.error import HTTPError | &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有的DBM现在都在一个单独的包里，即dbm。如果需要其中某个特定的变体，比如GNU DBM,可以导入dbm包中合适的模块。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;import dbm&lt;/td&gt;
&lt;td&gt;import dbm.ndbm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import gdbm&lt;/td&gt;
&lt;td&gt;import dbm.gnu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import dbhash&lt;/td&gt;
&lt;td&gt;import dbm.bad&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import dumbdbm&lt;/td&gt;
&lt;td&gt;import dbm.dumb&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import anydbm import whichdb&lt;/td&gt;
&lt;td&gt;import dbm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;XMLRPC&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;XML-RPC是一个通过HTTP协议执行远程RPC调用的轻重级方法。一些XML_RPC客户端和XML_RPC服务端的实现库组合成独立的包，xmlrpc.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;import xmlrpclib&lt;/td&gt;
&lt;td&gt;import xmlrpc.client&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import DocXMLRPCServer import SimpleXMLRPCServer&lt;/td&gt;
&lt;td&gt;import xmlrpc.server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;其他模块&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;try: import cStringIO as StringIO except ImportError: import STringIO&lt;/td&gt;
&lt;td&gt;import io&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;try: import cPickle as pickle except ImportError: import pickle&lt;/td&gt;
&lt;td&gt;import pickle&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import &lt;strong&gt;builtin&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;import builtins&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import copy_reg&lt;/td&gt;
&lt;td&gt;import copyreg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import Queue&lt;/td&gt;
&lt;td&gt;import queue&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import SocketServer&lt;/td&gt;
&lt;td&gt;import socketserver&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import ConfigParser&lt;/td&gt;
&lt;td&gt;import configparser&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import repr&lt;/td&gt;
&lt;td&gt;import reprlib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import commands&lt;/td&gt;
&lt;td&gt;import subprocess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;包内的相对导入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包是由一组相关联的模块共同组成的单个实体。在python２的时候，为了实现同一个包内模块的相互引用，你会使用import foo或者from foo import Bar。Python2解释器会先在当前目录里搜索foo.py，然后再去python搜索路径(sys.path)搜索。在python3里这个过程有一点不同。Python3不会首先在当前路径搜索，它会直接在Python的搜索路径里寻找。如果想要包里的一个模块导入包的另一个模块，需要显式的提供两个模块的相对路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;迭代器方法NEXT()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python2里，迭代器有一个next()方法，用来返回序列的下一项。在python3里同样成立。但是有一个新的全局的函数next(),它使用一个迭代器作为参数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;anIterator.next()&lt;/td&gt;
&lt;td&gt;next(anIterator)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_function_that_returns_an_iterator().next()&lt;/td&gt;
&lt;td&gt;next(a_function_that_returns_an_iterator())&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class A: def next(self): pass&lt;/td&gt;
&lt;td&gt;class A : def &lt;strong&gt;next&lt;/strong&gt;(self): pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class A: def next(self, x, y): pass&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next = 42 for an_iterator in a_sequence_of_iterators: an_iterator.next()&lt;/td&gt;
&lt;td&gt;next =42 for an interator in a_sequence_of_iterators: an_iterator.&lt;strong&gt;next&lt;/strong&gt;()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;全局函数FILTER()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在python2里，filter()方法返回一个列表，这个列表是通过一个返回值为True或False的函数来检测序列里的每一项的道德。在python3中，filter()函数返回一个迭代器，不再是列表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;filter(a_function, a_sequence)&lt;/td&gt;
&lt;td&gt;list(filter(a_function, a_sequence))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(filter(a_function, a_sequence))&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filter(None, a_sequence)&lt;/td&gt;
&lt;td&gt;[i for i in a_sequence if i ]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for i in filter(None, a_sequence):&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[i for i in filter(a_function, a_sequence)]&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;MAP()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跟filter()的改变一样，map()函数现在返回一个迭代器,python2中返回一个列表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;map(a_function,'PapayaWhip'&lt;/td&gt;
&lt;td&gt;list(map(a_function, 'PapayaWhip'))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map(None, 'PapayaWhip'&lt;/td&gt;
&lt;td&gt;list('PapayWhip')&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map(lambda x: x+1, range(42))&lt;/td&gt;
&lt;td&gt;[x+1 for x in range(42)]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for i in map(a_function, a_sequence):&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[i for i in map(a_function, a_sequence)]&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;REDUCE()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在python3里，reduce()函数已经从全局名字空间移除，现在被放置在fucntools模块里。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;reduce(a,b,c)&lt;/td&gt;
&lt;td&gt;from functools import reduce reduce(a, b, c)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;APPLY()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python2有一个叫做apply()的全局函数，它使用一个函数f和一个列表[a,b,c]作为参数，返回值是f(a,b,c).可以直接调用这个函数，在列表前添加一个星号作为参数传递给它来完成同样的事情。在python3里，apply()函数不再存在；必须使用星号标记。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;apply(a_function, a_list_of_args&lt;/td&gt;
&lt;td&gt;a_function(*a_list_of_args)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply(a_function, a_list_of_args, a_dictionary_of_named_args)&lt;/td&gt;
&lt;td&gt;a_function(*a_list_of_args, **a_dictionary_of_named_args)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply(a_function, a_list_of_args + z)&lt;/td&gt;
&lt;td&gt;a_function(*a_list_of_args + z)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply(aModule.a_function, a_list_of_args)&lt;/td&gt;
&lt;td&gt;aModule.a_function(*a_list_of_args)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;INTERN()&lt;/strong&gt;
　
python2里，你可以用intern()函数作用在一个字符串上来限定intern以达到性能优化，python3里，intern()函数转移到sys模块里。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;intern(aString)&lt;/td&gt;
&lt;td&gt;sys.intern(aString)&lt;/td&gt;
&lt;td&gt;--------&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;EXEC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就像print语句在python3里变成了一个函数一样，exec语句也是这样的。exec()函数使用一个包含任意python代码的字符串作为参数，然后像执行语句或表达式一样执行它。exec()跟eval()是相似，但exec()更加强大并具有挑战性。eval()函数只能执行单独一条表达式，但是exec()能够执行多条语句，导入(import),函数声明－实际上整个python程序的字符串表示也可以。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;exec codeString&lt;/td&gt;
&lt;td&gt;exec(codeString)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exec codeString in a_global_namespace&lt;/td&gt;
&lt;td&gt;exec(codeString, a_global_namespace)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exec_codeString in a_global_namespace, a_local_namespace&lt;/td&gt;
&lt;td&gt;exec(codeString, a_global_namespace, a_local_namespace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;execfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python２中的execfile语句可以像执行python代码那样使用字符串。不同的是exec使用字符串，而execfile使用文件。在python3，execfile语句被去掉了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REPR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在python2，为了得到一个任意对象的字符串表示，有一种把对象包装在反引号里(比如&lt;code&gt;x&lt;/code&gt;)的特殊语法。在python3里，这种能力仍然存在，但是你不能再使用反引号获得这种字符串表示了，需要使用全局函数repr().&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repr(x)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'PapayaWhip' +&lt;/code&gt;2&lt;code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repr('PapayWhip' + repr(2))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;TRYEXCEPT语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python２到python3，捕获异常的语法有些变化。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Python2&lt;/th&gt;
&lt;th&gt;Python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;try: import mymodule except ImportError, e pass&lt;/td&gt;
&lt;td&gt;try: import mymodule except ImportError as e: pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;try: import mymodule except (RuntimeError, ImportError), e pass&lt;/td&gt;
&lt;td&gt;try: import mymodule except(RuntimeError, ImportError) as e: pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;try: import mymodule except ImportError: pass&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;try: import mymodule except: pass&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;RAISE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python3里，抛出自定义异常的语法有细微的变化。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;raise MyException&lt;/td&gt;
&lt;td&gt;unchanged&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raise MyException, 'error message'&lt;/td&gt;
&lt;td&gt;raise MyException('error message')&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raise MyException, 'error message'&lt;/td&gt;
&lt;td&gt;raise MyException('error message').with_traceback(a_traceback)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raise 'error message'&lt;/td&gt;
&lt;td&gt;unsupported&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;生成器THROW&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在python2里，生成器有一个throw()方法。调用a_generator.throw()会在生成器被暂停的时候抛出异常，然后返回由生成器函数获取的下一个值。python3中，这一功能仍然可用，但语法有一点不同。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a_generator.throw(MyException)&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_generator.throw(MyException, 'error message'&lt;/td&gt;
&lt;td&gt;a_generator.throw(MyException('error message'))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_generator.throw('error message')&lt;/td&gt;
&lt;td&gt;unsupported&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;XRANGE()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python２里，有两种方法获得一定范围内的数字：range(),返回一个列表，还有xrange(),返回一个迭代器。python3　里，range()返回迭代器，xrange()不再存在。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xrange(10)&lt;/td&gt;
&lt;td&gt;range(10)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a_list = range(10)&lt;/td&gt;
&lt;td&gt;a_list= list(range(10))&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[i for i in xrange(10)]&lt;/td&gt;
&lt;td&gt;[i for i in range(10)]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for i in range(10):&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sum(range(10))&lt;/td&gt;
&lt;td&gt;no change&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;lt;未完待续&amp;gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 27 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-27:2014/05/27/python/</guid><category>Python-tips</category></item><item><title>Python-Tips(十)</title><link>http://king32783784.github.io/2014/05/26/python-%E6%89%93%E5%8C%85/</link><description>&lt;h3&gt;Tips 26&lt;/h3&gt;
&lt;p&gt;脚本、库、框架或应用程序编写完成后，如果想与别人共享，这时就需要进行打包。&lt;/p&gt;
&lt;p&gt;python3自带Distutils的打包框架，它包含了许多功能：构建工具（开发者使用),安装工具(用户使用),数据包格式(为搜索引擎准备)等，它集成了python安装包索引
("PyPI"),一个开源python类库的中央资料库。这些Distutils的不同功能以setup 脚本为中心，一般被命名为setup.py。&lt;/p&gt;
&lt;p&gt;Distutils试图尽可能的自动完成全部打包工作，但仍然有些部分需要人为操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一种许可协议，如GPL&lt;/li&gt;
&lt;li&gt;使用PyPI分来系统对软件进行分类&lt;/li&gt;
&lt;li&gt;撰写readme文件,用户一般从这里了解你的软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;目录结构&lt;/h4&gt;
&lt;p&gt;要进行python软件的打包，必须先将文件和目录安排好。例如httplib2的目录树如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;httplib2/   # 创建根目录来保存所有的目录和文件，以python模块的名字命名
+--README.txt　# 为了适应window用户，readme文件包含.txt扩展名
+--setup.py　　# Distutils安装脚本命名为setup.py
+--httplib2/　# 如果你的python软件只包含一个单一的.py文件，可以放在根目录，此处httplib2包含多个文件，这样可以在根目录下放置httplib2目录，在httplib2目录下，包含一个__init__.py的文件的httplib2目录。
    +--__init__.py
    +--iri2uri.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装脚本编写&lt;/h4&gt;
&lt;p&gt;Distutils安装脚本是一份python脚本。
每个Distutils安装脚本的第一行总是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该行导入setup()函数，是Distutils的主入口点。setup()方法可以有几十个参数。为了使每个参与者都能清除，必须对每个参数使用命名参数。如果尝试以非命名变量调用setup()方法，安装脚本会崩溃。
下面的命名变量是必需的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name, 安装包名称&lt;/li&gt;
&lt;li&gt;version, 安装包的版本&lt;/li&gt;
&lt;li&gt;author, 您的全名&lt;/li&gt;
&lt;li&gt;author_email, 您的邮件地址&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url, 项目主页
以下内容，不是必须的，但建议尽量包含：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;description, 在线的项目摘要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;long_description 以rsStructuredTextformat格式编写的多行字符串。&lt;/li&gt;
&lt;li&gt;classfilers, 特别格式化字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;包分类&lt;/h4&gt;
&lt;p&gt;Python包索引("PyPI")包含成千上万的Python库。正确的分类数据将让人脉更容易找到你的包。PyPI让你以类别的形式浏览包。可以通过传递classifiers参数给Distutils的setup()方法来给你的软件分类。classifers参数是一个字符串列表。这些字符串不是任意格式，都应该来自PyPI上的列表。虽然分类是可选的，但最好至少包括以下分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程语言。应该包括"Programming Language :: Python"和"Programming Language :: Python :: 3"。如果你不包括这些，你的包将不会出现在兼容Python3的库列表中。&lt;/li&gt;
&lt;li&gt;许可证。当评价一个第三方库时，这是要需找的第一个东西&lt;/li&gt;
&lt;li&gt;操作系统。要描述软件适用的操作系统平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还建议包括以下分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发状态。软件产品适合beta发布么，还是alpha，还是Pre-alpha&lt;/li&gt;
&lt;li&gt;目标用户。最常见的选项：Developers、End Users/Destop、Science/Research和Systm Administrators&lt;/li&gt;
&lt;li&gt;框架。如果你的软件是Django或Zope这样大型框架的插件，需要包含适当的框架分类&lt;/li&gt;
&lt;li&gt;主题。选择相关的主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是Django分类的例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Programming&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;License&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;OSI&lt;/span&gt; &lt;span class="n"&gt;Approved&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;BSD&lt;/span&gt; &lt;span class="n"&gt;License&lt;/span&gt;
&lt;span class="n"&gt;Operating&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt; &lt;span class="n"&gt;Independent&lt;/span&gt;
&lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Production&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Stable&lt;/span&gt;
&lt;span class="n"&gt;Environment&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Web&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;Framework&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt;
&lt;span class="n"&gt;Intended&lt;/span&gt; &lt;span class="n"&gt;Audience&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Developers&lt;/span&gt;
&lt;span class="n"&gt;Topic&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;WWW&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HTTP&lt;/span&gt;
&lt;span class="n"&gt;Topic&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;WWW&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HTTP&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt;
&lt;span class="n"&gt;Topic&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;WWW&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HTTP&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;WSGI&lt;/span&gt;
&lt;span class="n"&gt;Topic&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Software&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Libraries&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过清单指定附加文件&lt;/h4&gt;
&lt;p&gt;默认情况下，Distutils将把下列文件包含在你的发布包中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README.txt&lt;/li&gt;
&lt;li&gt;setup.py&lt;/li&gt;
&lt;li&gt;列在packages参数中的多模块文件所需的.py文件&lt;/li&gt;
&lt;li&gt;在py_modules参数中列出的单独.py文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果还希望包含COPYING.txt许可文件或含有图像与HTML文件的如docs目录，也就是让Distutils在构建发行包时包含一些额外的文件和目录，需要创建一个manifestfile.
清单文件是一个名为MANIFEST.in的文本文件。将它放置在项目的根目录下，同README.txt和setup.py一起。清单文件不是python脚本，是文本文件，其中包含一系列Distutils定义格式的命令。清单命令允许你包含或排除特定的文件和目录。
例如chardet项目的全部清单文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include COPYING.txt # 包含COPYING.txt文件
recursive-include docs *.html *.css *.png *.gif　# recursive-include命令需要一个目录名和至少一个文件名。这里使用了通配符。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有的清单命令都将保持项目目录中所有的目录结构。&lt;/p&gt;
&lt;p&gt;清单文件有自己独特的格式。&lt;/p&gt;
&lt;h4&gt;检查安装脚本的错误&lt;/h4&gt;
&lt;p&gt;Distutils带有一个内置的验证命令，它检查是否所有必须的元数据都体现在你的安装脚本中。&lt;/p&gt;
&lt;h4&gt;创建发布源&lt;/h4&gt;
&lt;p&gt;Distutils支持构建多种类型的发布包。至少，应该建立一个"源代码分发", 其中包含源代码，你的Distutils安装脚本，"readme"文件和你想要包含其他文件。&lt;/p&gt;
&lt;p&gt;python中包含更多的打包框架：&lt;/p&gt;
&lt;p&gt;比如偏重安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setuptools&lt;/li&gt;
&lt;li&gt;Pip&lt;/li&gt;
&lt;li&gt;Distribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下框架重在测试和部署：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;zc.buildout&lt;/li&gt;
&lt;li&gt;Paver&lt;/li&gt;
&lt;li&gt;Fabric&lt;/li&gt;
&lt;li&gt;py2exe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的项目中，可以根据需要，选择对应的打包方式。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 26 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-26:2014/05/26/python-打包/</guid><category>Python-tips</category></item><item><title>Python-Tips(九)</title><link>http://king32783784.github.io/2014/05/24/python/</link><description>&lt;h3&gt;Tips 25&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;HTTP WEB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;http web服务是指以编程的方式直接使用HTTP操作从远程服务器发送和接收数据。如果从服务器获取数据使用HTTP GET;如果向服务器上传数据使用HTTP POST.一些高级的HTTP Web服务 API允许使用HTTP put 和HTTP delete创建、修改和删除数据。数据格式同常是xml或json，可以实现创建好并静态的存储下来，或则由服务器端脚本动态生成，并且所有主要原因都包含http库用于下载数据。调试也比较方便，http web服务中每一个资源都有一个唯一的地址(以url的形式存在),可以在浏览器中加载并立即看到原始的数据。&lt;/p&gt;
&lt;p&gt;python3的htpp.client是实现http协议的底层库
urllib.request建立在http.client之上的抽象层。它为访问http和ftp服务器提供了标准的API，可以自动跟随http重定向，并且处理了一些常见形式的http认证。&lt;/p&gt;
&lt;p&gt;建议使用httplib2,一个第三方的开源库，它比http.client更完整的实现了http协议，又比urllb.request提供了更好的抽象&lt;/p&gt;
&lt;h4&gt;HTTP&lt;/h4&gt;
&lt;p&gt;首先得了解http的特点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络访问代价还是比较大，即使在最快的宽带连接上，延迟（从发送请求到开始响应获得数据所花费的时间）仍然很高。路由器的异常，被丢包，中间代理商被工具攻击等等，这些你无法改变。因此，http在设计时就考虑到了缓存。有这么一类设备（ 缓存代理服务器）,它们能起作用，因为缓存是内建在http协议中的。&lt;/p&gt;
&lt;p&gt;当你下载一个图片是，服务器返回包含了以下http头：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Date: Sun, 31 May 2009 17:14:04 GMT
Server: Apache
Last-Modified: Fri, 22 Aug 2008 04:28:16 GMT
ETag: &amp;quot;3075-ddc8d800&amp;quot;
Accept-Ranges: bytes
Content-Length: 12405
Cache-Control: max-age=31536000, public
Expires: Mon, 31 May 2010 17:14:04 GMT
Connection: close
Content-Type: image/jpeg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cache-Control和Expires头告诉浏览器(以及任何处于你和服务器之间的缓存代理服务器）这张图片可以缓存长达一年。如果你浏览器从本地缓存删除了这张图片，http头通知这个数据被公共缓存代理服务器缓存(Cache-Control头中 public关键字说明这一点)。当你再次请求下载这个图片时，如果其他的缓存服务器有这张图片，会截取你的请求，返回给你这张图片，如果都没有，就会发出网络请求从远程服务器下载这张图片。当每个角色都按协议来做时，http缓存才能发挥作用。
python标准库中的http库不支持缓存，但httplib2支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后修改时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;web上的数据可能从不改变，或许总是在变，或则两则之间。http对于这个问题也有对应的解决方案。当你第一次请求数据时，服务器返回一个last-modified头。
如果再次请求同一资源时，可以在请求发送If-Modified-Since头，其值为你上一次返回的时间。如果数据发送过变化，服务器会忽略If-Modified-Since并返回新数据和200状态码。否则会服务器会发回HTTP304状态码，它的意思你请求的时间没变化，不用发给你啦。
python的http库不支持最好修改时间, 但httplib2支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ETAGS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ETag是另一个和最后修改时间达到同样目的的方法。使用ETag时，服务器返回数据的同在ETag头里面返回一个哈希码(如何生成取决于服务器，要求是数据变时哈希码跟着变）。当你再次请求相同数据时，你在If-None-Match放入ETag值，如果服务器比对一下，发现一样，就会返回304状态码。
同样python的http库不支持ETag,httplib2支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;http_web服务一般都是在来回运输文本数据。可能是XML、JSON或则就是纯文本，不管是啥压缩之后体积就会小，传输就会快。http支持多种压缩算法，最常见的就是gzip和deflate。当你请求资源时，可以包含Accept-encoding头，里面列出你支持的压缩算法。如果服务器也只支持这种算法，就会返回对应格式的压缩数据。
python http不支持压缩，httplib2支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重定向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的url不会变化，但是有很多url会变，比如网站调整了，扩展了等等。每一次向服务器请求时，服务器都会在响应中包含一个状态码。200：就是一切正常 404：就是找不到页面 300系列：就是某种形式的重定向。最常见的就是302和301. 302：临时重定向 资源暂时不在；301：永久重定向，但都会在Location头里给出新的地址。urllib.request模块从服务器获得重定向码时会自动重定向，但他不会反馈，所以每次都需要重定向。而httplib2会永久重定向，它会在本地记录这些重定向，下次发送请求时会自动重写为重定向后的url.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免通过http重复获取数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你想通过http下载一个资源。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a_url = &amp;#39;http://diveintopython3.org/examples/feed.xml&amp;#39;
&amp;gt;&amp;gt;&amp;gt; data = urllib.request.urlopen(a_url).read()  # python通过http下载非常简单。urllib.request模块有一个方便的函数urlopen()，它接收获取页面的地址，然后返回一个类文件对象。然后调用其read()方法就可以获得网页全部内容。
&amp;gt;&amp;gt;&amp;gt; type(data)                                   
&lt;span class="nt"&gt;&amp;lt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;bytes&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; # urlopen().read()方法返回bytes对象而不是字符串。字符只是字节的抽象
&amp;gt;&amp;gt;&amp;gt; print(data)
&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;xml:lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;dive into mark&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;currently between addictions&lt;span class="nt"&gt;&amp;lt;/subtitle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:diveintomark.org,2001-07-29:/&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-03-27T21:56:07Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alternate&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org/&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  …
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只是一次下载，这样确实没有问题，但如果定期访问web服务的时候（比如每隔1小时请求一下这个供稿)，这样做就显得简单粗暴了。
为啥说简单粗暴呢，我们打开python的http库的调试功能，看看什么东西被发送到线路上。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt; &lt;span class="c1"&gt;# 从http.client导入HTTPConnection类&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# 打开调试&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再次执行向服务器请求数据，你会看到urlopen()请求了未压缩的数据，所以比较低效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPLIB2&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# httplib2的主要接口是Http对象。创建时需要传入一个目录名。&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/examples/feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#调用http对象的request方法就可以获取数据。&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="c1"&gt;# request()方法返回两个值，一个是httplib2.Response对象，包含了服务器返回的所有http头，另一个是status&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;# content变量包含了返回的数据&lt;/span&gt;
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;feed xmlns=&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3070&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;httplib2返回是字节而不是字符。可以根据需要进行转换。&lt;/p&gt;
&lt;p&gt;处理缓存&lt;/p&gt;
&lt;p&gt;前面我们说应该在创建httplib2.Http对象时提供一个目录名，就是为了缓存。
当你再次发出相同的请求时，就会发现比之前快了很多。让我们打开调试功能看一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 打开调试功能&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.vimlinux.com/feeds/atom.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 线路上啥都没返回&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromcache&lt;/span&gt; &lt;span class="c1"&gt;# 显示是cache获取的数据&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想要打开httplib2的调试开关，需要设置一个模块级的常量(httplib2.debuglevel),然后再创建httplib2.Http对象。关闭是同样要设置。
现在数据缓存着，但你想跳过缓存重新获取。应该使用http的特性来保证你的请求能够到达远程服务器，因为这其中还有多级缓存要跳过。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response2, content2 = h.request(&amp;#39;http://www.vimlinux.com/feeds/atom.xml&amp;#39;, headers={&amp;#39;cache-control&amp;#39;:&amp;#39;no-cache&amp;#39;}) # httplib2允许添加任意的http头部，此次添加no-cache为了跳过缓存
connect: (www.vimlinux.com, 80) ************
send: &amp;#39;GET /feeds/atom.xml HTTP/1.1\r\nHost: www.vimlinux.com\r\nuser-agent: Python-httplib2/0.10.3 (gzip)\r\naccept-encoding: gzip, deflate\r\ncache-control: no-cache\r\n\r\n&amp;#39;
reply: &amp;#39;HTTP/1.1 200 OK\r\n&amp;#39;
header: Server: GitHub.com
header: Content-Type: application/xml
header: Last-Modified: Thu, 09 Mar 2017 07:40:35 GMT
header: Access-Control-Allow-Origin: *
header: Expires: Thu, 09 Mar 2017 08:44:14 GMT
header: Cache-Control: max-age=600
header: Content-Encoding: gzip
header: X-GitHub-Request-Id: C15C:2A686:36787E9:4761B30:58C11385
header: Content-Length: 2422597
header: Accept-Ranges: bytes
header: Date: Thu, 09 Mar 2017 09:29:38 GMT
header: Via: 1.1 varnish
header: Age: 0
header: Connection: keep-alive
header: X-Served-By: cache-nrt6131-NRT
header: X-Cache: MISS
header: X-Cache-Hits: 0
header: X-Timer: S1489051777.946283,VS0,VE181
header: Vary: Accept-Encoding
header: X-Fastly-Request-ID: 62146dd2576ae50f0f43f9f9117e4b618c0cdb54
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;# 初始化一个网络请求，并且加入了一个no-cache的头　&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response2.status
200　　# 请求成功。服务器返回了一个新的数据，并更新了本地缓存
&amp;gt;&amp;gt;&amp;gt; response2.fromcache
False                                                                                        
&amp;gt;&amp;gt;&amp;gt; print(dict(response2.items())
... )
{&amp;#39;content-length&amp;#39;: &amp;#39;22385455&amp;#39;, &amp;#39;via&amp;#39;: &amp;#39;1.1 varnish&amp;#39;, &amp;#39;vary&amp;#39;: &amp;#39;Accept-Encoding&amp;#39;, &amp;#39;x-cache-hits&amp;#39;: &amp;#39;0&amp;#39;, &amp;#39;cache-control&amp;#39;: &amp;#39;max-age=600&amp;#39;, &amp;#39;status&amp;#39;: &amp;#39;200&amp;#39;, &amp;#39;x-served-by&amp;#39;: &amp;#39;cache-nrt6131-NRT&amp;#39;, &amp;#39;x-cache&amp;#39;: &amp;#39;MISS&amp;#39;, &amp;#39;x-github-request-id&amp;#39;: &amp;#39;C15C:2A686:36787E9:4761B30:58C11385&amp;#39;, &amp;#39;accept-ranges&amp;#39;: &amp;#39;bytes&amp;#39;, &amp;#39;expires&amp;#39;: &amp;#39;Thu, 09 Mar 2017 08:44:14 GMT&amp;#39;, &amp;#39;last-modified&amp;#39;: &amp;#39;Thu, 09 Mar 2017 07:40:35 GMT&amp;#39;, &amp;#39;-content-encoding&amp;#39;: &amp;#39;gzip&amp;#39;, &amp;#39;date&amp;#39;: &amp;#39;Thu, 09 Mar 2017 09:29:38 GMT&amp;#39;, &amp;#39;access-control-allow-origin&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;content-location&amp;#39;: &amp;#39;http://www.vimlinux.com/feeds/atom.xml&amp;#39;, &amp;#39;age&amp;#39;: &amp;#39;0&amp;#39;, &amp;#39;x-timer&amp;#39;: &amp;#39;S1489051777.946283,VS0,VE181&amp;#39;, &amp;#39;server&amp;#39;: &amp;#39;GitHub.com&amp;#39;, &amp;#39;connection&amp;#39;: &amp;#39;keep-alive&amp;#39;, &amp;#39;x-fastly-request-id&amp;#39;: &amp;#39;62146dd2576ae50f0f43f9f9117e4b618c0cdb54&amp;#39;, &amp;#39;content-type&amp;#39;: &amp;#39;application/xml&amp;#39;}
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http缓存设计为尽量最大化的缓存命中率和最小化的网络访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPLIB2如何处理LAST-MODIFFIED和ETAG头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cache-Control和Expires缓存头被称为新鲜度指标。它们通过只缓存，除非缓存过期，不然不会产生任何的网络活动（除非显示的要求跳过缓存）&lt;/p&gt;
&lt;p&gt;如果数据可能已改变，但缓存不知道呢？Http因此定义了Last-Modified和Etag头。如果本地缓存不再是最新的数据，客户端请求时可以发送Last-Modified和Etag头进行验证数据是否改变。如果没有改变，服务器会返回304状态码，但不返回数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 第一次请求该页面，httplib2在请求时发出较少的头，没啥要处理的&lt;/span&gt;
&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET / HTTP/1.1&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;
&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;259&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 响应包含多个http头，但没有缓存信息，但包含了ETag和Last-Modified头&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-content-encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;accept-ranges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bytes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6657&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tue, 02 Jun 2009 03:26:54 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;etag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;7f806d-1a01-9fb97900&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;last-modified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tue, 02 Jun 2009 02:51:48 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Apache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;vary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Accept-Encoding,User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                  
&lt;span class="mi"&gt;6657&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# 再次请求这个页面&lt;/span&gt;
&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET / HTTP/1.1&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;7f806d-1a01-9fb97900&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# httplib2将Etag validator通过if-none-match头发送回服务器&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;2009&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;GMT&lt;/span&gt; &lt;span class="c1"&gt;# httplib2将Last-Modified validator通过if-modfied-since发送回服务器&lt;/span&gt;
&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;259&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 304 Not Modified&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# 服务器查看这些验证器，查看请求的页面，然后判断出页面在上次请求之后没有变化，返回304状态码&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromcache&lt;/span&gt;  &lt;span class="c1"&gt;# 客户端httplib2检查到304,所以从缓存加载页面内容&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="c1"&gt;# response.status 返回缓存的状态码，没有返回304&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 服务器返回的状态码(304)可以从response.dict里找到&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;304&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 数据仍然保存在content变量&lt;/span&gt;
&lt;span class="mi"&gt;6657&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;HTTP2LIB处理压缩&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;http2lib支持deflate或gzip格式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response, content = h.request(&amp;#39;http://diveintopython3.org/&amp;#39;)
connect: (diveintopython3.org, 80)
send: b&amp;#39;GET / HTTP/1.1
Host: diveintopython3.org
accept-encoding: deflate, gzip # 每次httplib2发送请求，都包含了accept-encoding头来告诉服务器它能处理的deflate或gzip压缩
user-agent: Python-httplib2/$Rev: 259 $&amp;#39;
reply: &amp;#39;HTTP/1.1 200 OK&amp;#39;
&amp;gt;&amp;gt;&amp;gt; print(dict(response.items()))
{&amp;#39;-content-encoding&amp;#39;: &amp;#39;gzip&amp;#39;,   # 服务器返回了gzip压缩格式的数据
 &amp;#39;accept-ranges&amp;#39;: &amp;#39;bytes&amp;#39;,
 &amp;#39;connection&amp;#39;: &amp;#39;close&amp;#39;,
 &amp;#39;content-length&amp;#39;: &amp;#39;6657&amp;#39;,
 &amp;#39;content-location&amp;#39;: &amp;#39;http://diveintopython3.org/&amp;#39;,
 &amp;#39;content-type&amp;#39;: &amp;#39;text/html&amp;#39;,
 &amp;#39;date&amp;#39;: &amp;#39;Tue, 02 Jun 2009 03:26:54 GMT&amp;#39;,
 &amp;#39;etag&amp;#39;: &amp;#39;&amp;quot;7f806d-1a01-9fb97900&amp;quot;&amp;#39;,
 &amp;#39;last-modified&amp;#39;: &amp;#39;Tue, 02 Jun 2009 02:51:48 GMT&amp;#39;,
 &amp;#39;server&amp;#39;: &amp;#39;Apache&amp;#39;,
 &amp;#39;status&amp;#39;: &amp;#39;304&amp;#39;,
 &amp;#39;vary&amp;#39;: &amp;#39;Accept-Encoding,User-Agent&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;HTTPLIB2处理重定向&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/examples/feed-302.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 这个url没有feed,但设置让服务器发出一个正确的重定向&lt;/span&gt;
&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET /examples/feed-302.xml HTTP/1.1 　# 请求&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;
&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;259&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 302 Found&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 响应包含了一个Location头给出实际的URL&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET /examples/feed.xml HTTP/1.1 # httplib2立即跟随重定向，发出一个新的Location（包含正确的地址）&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diveintopython3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;
&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;259&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;   &lt;span class="c1"&gt;# 调用request()方法返回的respnse是最终URL的响应&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3070&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://diveintopython3.org/examples/feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# httplib2会将最终的URL以content-localton加入到response字典&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;accept-ranges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bytes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;expires&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thu, 04 Jun 2009 02:21:41 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;vary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Apache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;last-modified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wed, 03 Jun 2009 02:20:15 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;-content-encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;etag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;bfe-4cbbf5c0&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;cache-control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max-age=86400&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
 &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wed, 03 Jun 2009 02:21:41 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你得到的response给了你最终URL的相关信息，如果希望那些最后重定向到最终URL中间的URL的信息呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response.previous # response.previous 属性持有前一个响应对象的引用
{&amp;#39;status&amp;#39;: &amp;#39;302&amp;#39;,
 &amp;#39;content-length&amp;#39;: &amp;#39;228&amp;#39;,
 &amp;#39;content-location&amp;#39;: &amp;#39;http://diveintopython3.org/examples/feed-302.xml&amp;#39;,
 &amp;#39;expires&amp;#39;: &amp;#39;Thu, 04 Jun 2009 02:21:41 GMT&amp;#39;,
 &amp;#39;server&amp;#39;: &amp;#39;Apache&amp;#39;,
 &amp;#39;connection&amp;#39;: &amp;#39;close&amp;#39;,
 &amp;#39;location&amp;#39;: &amp;#39;http://diveintopython3.org/examples/feed.xml&amp;#39;,
 &amp;#39;cache-control&amp;#39;: &amp;#39;max-age=86400&amp;#39;,
 &amp;#39;date&amp;#39;: &amp;#39;Wed, 03 Jun 2009 02:21:41 GMT&amp;#39;,
 &amp;#39;content-type&amp;#39;: &amp;#39;text/html; charset=iso-8859-1&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; type(response)  # response和response.previous都是httplib2.Response对象
&amp;lt;class &amp;#39;httplib2.Response&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(response.previous)
&amp;lt;class &amp;#39;httplib2.Response&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; response.previous.previous  # 如果重定向多次，该方法可以追溯
&amp;gt;&amp;gt;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; response2, content2 = h.request(&amp;#39;http://diveintopython3.org/examples/feed-302.xml&amp;#39;)  # 同一个URL,同一个httplib2.Http对象
connect: (diveintopython3.org, 80)
send: b&amp;#39;GET /examples/feed-302.xml HTTP/1.1 # 302影响没有缓存，所以httplib2对同一个URL再一次发送请求
Host: diveintopython3.org
accept-encoding: deflate, gzip
user-agent: Python-httplib2/$Rev: 259 $&amp;#39;
reply: &amp;#39;HTTP/1.1 302 Found&amp;#39; # 再一次，返回302.但是没有继续进行。一旦httplib2收到302Found状态码，再发送新的请求前检查都缓存数据仍然可用
&amp;gt;&amp;gt;&amp;gt; content2 == content 
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;永久重定向&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response, content = h.request(&amp;#39;http://diveintopython3.org/examples/feed-301.xml&amp;#39;) # 请求一个不存在的URL,设置服务器执行一个永久重定向到正确URL
connect: (diveintopython3.org, 80)
send: b&amp;#39;GET /examples/feed-301.xml HTTP/1.1
Host: diveintopython3.org
accept-encoding: deflate, gzip
user-agent: Python-httplib2/$Rev: 259 $&amp;#39;
reply: &amp;#39;HTTP/1.1 301 Moved Permanently&amp;#39; # 状态码301,但是再次注意什么没发生，因为本地已缓存
&amp;gt;&amp;gt;&amp;gt; response.fromcache          　# httplib2跟随重定向到缓存里
True


# continued from the previous example
&amp;gt;&amp;gt;&amp;gt; response2, content2 = h.request(&amp;#39;http://diveintopython3.org/examples/feed-301.xml&amp;#39;) # 这是临时和永久重定向的区别：一旦httplib2跟随了一个永久的重定向，后续的都会到定向的URL
&amp;gt;&amp;gt;&amp;gt; response2.fromcache                                                                 # 数据从本地缓存获取
True
&amp;gt;&amp;gt;&amp;gt; content2 == content
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;HTTP GET之外&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP web服务不限于GET请求。当你要修改服务器上的数据时，就需要POST请求。再发布前，需要进行身份的验证，httplib2支持SSL和HTTP Basic Authentication.
POST请求和GET请求不同，因为它包含payload，是你要发送到服务器的数据。这个API方法必须的参数是status,并且它应该是URL编码的。这是一种简单的序列化格式，将一组键值对转换为一个字符串。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt; &lt;span class="c1"&gt;# Python带有一个工具函数用于URL编码一个字典:urllib.parse.urlencode()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test update from Python 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 这是Identi.ca API所期望的字典。包含一个键，status, 对应值是状态更新的文本&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# URL编码之后的字符串的样子。这就是会通过线路发送到Identi.ca API服务器的HTTP POST请求的负荷&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;status=Test+update+from+Python+3&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test update from Python 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_credentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;diveintomark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MY_SECRET_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;identi.ca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# httplib2处理认证的方法，add_credentials()方法记录你的用户名和密码。当httplib2试图执行请求的时候，服务会返回一个401 Unauthorized状态码，并且列出所有它支持的认证方法(WWW-Authenticate头).httplib2会自动构造Authorization头并且重新请求该URL&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://identi.ca/api/statuses/update.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="c1"&gt;# 请求的类型POST&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# 发送到服务器的负荷,包含状态消息的URL编码过的字典&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;#　最后告诉服务器负荷是URL编码过的数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add_credentials()方法的第三个参数是该证书有效的域名。你应该总是指定这个参数，如果忽略了，并且之后重用这个httplib2.Http对象访问另一个需要认证的站点，可能会导致httplib2将一个站点的用户名密码泄露给其他站点。&lt;/p&gt;
&lt;p&gt;发送到线路上的数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST /api/statuses/update.xml HTTP/1.1&lt;/span&gt;
&lt;span class="s1"&gt;Host: identi.ca&lt;/span&gt;
&lt;span class="s1"&gt;Accept-Encoding: identity&lt;/span&gt;
&lt;span class="s1"&gt;Content-Length: 32&lt;/span&gt;
&lt;span class="s1"&gt;content-type: application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class="s1"&gt;user-agent: Python-httplib2/$Rev: 259 $&lt;/span&gt;

&lt;span class="s1"&gt;status=Test+update+from+Python+3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 401 Unauthorized&amp;#39;&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;第一个请求，服务器以&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="n"&gt;Unauthorized&lt;/span&gt;&lt;span class="err"&gt;状态码返回。&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="err"&gt;从不主动发送认证头，触发服务器明确的要求。&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST /api/statuses/update.xml HTTP/1.1　# httplib2马上转个身，发出第二次相同的URL&lt;/span&gt;
&lt;span class="s1"&gt;Host: identi.ca&lt;/span&gt;
&lt;span class="s1"&gt;Accept-Encoding: identity&lt;/span&gt;
&lt;span class="s1"&gt;Content-Length: 32&lt;/span&gt;
&lt;span class="s1"&gt;content-type: application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class="s1"&gt;authorization: Basic SECRET_HASH_CONSTRUCTED_BY_HTTPLIB2 # 包含了你通过add_credentials()方法加入的用户名和密码&lt;/span&gt;
&lt;span class="s1"&gt;user-agent: Python-httplib2/$Rev: 259 $&lt;/span&gt;

&lt;span class="s1"&gt;status=Test+update+from+Python+3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请求成功后服务器返回什么？这个完全由web服务API决定。在一些协议里面(像Atom Publishing Protocol)，服务器会返回201 Created状态码，并通过Location提供新创建的资源的地址。Identi.ca返回200 OK和一个包含新创建资源信息的XML文档。&lt;/p&gt;
&lt;p&gt;HTTP并不限于GET和POST，还能处理一些其他的web事务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.etree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ElementTree&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 服务器返回的是XML&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findtext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# findtext()方法找到对应表达式的第一个实例并抽取它的文本内容&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status_id&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;5131472&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://identi.ca/api/statuses/destroy/{0}.xml&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 基于id元素的文本内容，我们构造出一个url用于删除刚发布的状态消息&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deleted_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 要删除一条消息，只需对该URL执行一个HTTP DELETE请求即可&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python的网络功能还是比较强大的，以后再分享python网络爬虫。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-24:2014/05/24/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(八)</title><link>http://king32783784.github.io/2014/05/22/python/</link><description>&lt;h3&gt;Tips 24&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;序列化对象&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;pickle&lt;/h4&gt;
&lt;p&gt;序列化的概念很简单，内存里面的数据，想保存下来。下次使用时，又能容易恢复，而且不想使用大型的数据库。这种情况下，pickle模块是理想的，它是python标准库的一部分，所以总是可用的。它的大部分和python解释器本身一样是用C编写的，可用存储任意复杂的python数据结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python支持的原生类型:布尔，整数，浮点数，复数，字符串，字符数组，None&lt;/li&gt;
&lt;li&gt;列表，元组，字典和集合&lt;/li&gt;
&lt;li&gt;列表，元组，字典和集合嵌套列表，元组，字典和集合（直到python支持最大的递归层数）&lt;/li&gt;
&lt;li&gt;函数，类，和类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;保存数据到文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; entry
{&amp;#39;article_link&amp;#39;: &amp;#39;http://diveintomark.org/archives/2009/03/27/dive-into-history-2009-edition&amp;#39;, &amp;#39;published&amp;#39;: True, &amp;#39;published_date&amp;#39;: time.struct_time(tm_year=2009, tm_mon=3, tm_mday=27, tm_hour=22, tm_min=20, tm_sec=42, tm_wday=4, tm_yday=86, tm_isdst=-1), &amp;#39;internal_id&amp;#39;: b&amp;#39;\xde\xd5\xb4\xf8&amp;#39;, &amp;#39;tags&amp;#39;: (&amp;#39;diveintopython&amp;#39;, &amp;#39;docbook&amp;#39;, &amp;#39;html&amp;#39;), &amp;#39;comments_link&amp;#39;: None, &amp;#39;title&amp;#39;: &amp;#39;Dive into history, 2009 edition&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义了一个包含多个数据格式的字典&lt;/p&gt;
&lt;p&gt;保存数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entry.pickle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# open打开一个文件，文件模式&amp;#39;wb&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# pickle模块的dump()函数接收一个可序列化的python数据结构。使用pickle协议将其序列化为二进制，保存到entry.pickle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pickle协议是python特定的。该协议也在修改变化，最新的协议是二进制格式的，所以使用时注意其版本变化&lt;/p&gt;
&lt;p&gt;读取数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; with open(&amp;#39;entry.pickle&amp;#39;, &amp;#39;rb&amp;#39;) as f: # with语句，二进制模式打开entry.pickle文件
...     entrya = pickle.load(f)   # pickle.load()函数接收一个流对象，从文件读取序列化后的数据，创建一个新的python对象
... 
&amp;gt;&amp;gt;&amp;gt; entrya # 和前面的entry内容一样
{&amp;#39;published_date&amp;#39;: time.struct_time(tm_year=2009, tm_mon=3, tm_mday=27, tm_hour=22, tm_min=20, tm_sec=42, tm_wday=4, tm_yday=86, tm_isdst=-1), &amp;#39;comments_link&amp;#39;: None, &amp;#39;title&amp;#39;: &amp;#39;Dive into history, 2009 edition&amp;#39;, &amp;#39;article_link&amp;#39;: &amp;#39;http://diveintomark.org/archives/2009/03/27/dive-into-history-2009-edition&amp;#39;, &amp;#39;internal_id&amp;#39;: b&amp;#39;\xde\xd5\xb4\xf8&amp;#39;, &amp;#39;published&amp;#39;: True, &amp;#39;tags&amp;#39;: (&amp;#39;diveintopython&amp;#39;, &amp;#39;docbook&amp;#39;, &amp;#39;html&amp;#39;)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pickle.dump()/pickle.load()循环的结果是一个和原始数据结构等同的新的数据结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; with open(&amp;#39;entry.pickle&amp;#39;, &amp;#39;rb&amp;#39;) as f:
...     entryb = pickle.load(f)
... 
&amp;gt;&amp;gt;&amp;gt; entryb == entry # 另外读取的entryb和之前的entry相等
True 
&amp;gt;&amp;gt;&amp;gt; entryb is entry # 虽然相等，但不是一个
False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;保存到内存&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b = pickle.dumps(entry) # 这里是dumps
&amp;gt;&amp;gt;&amp;gt; type(b)   # 保存的是二进制数据格式
&amp;lt;class &amp;#39;bytes&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; entry3 = pickle.loads(b) # 接收包含序列化后的数据bytes对象
&amp;gt;&amp;gt;&amp;gt; entry3 == entry
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;pickle&lt;/strong&gt;文件调试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickletools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entry.pickle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;pickletools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; \&lt;span class="n"&gt;x80&lt;/span&gt; &lt;span class="n"&gt;PROTO&lt;/span&gt;      &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;highest&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="n"&gt;among&lt;/span&gt; &lt;span class="n"&gt;opcodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 显示了pickle协议的版本号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;JSON&lt;/h4&gt;
&lt;p&gt;pickle序列化数据是python特定的，但json是可以跨语言使用的。&lt;/p&gt;
&lt;p&gt;json是基于文本的，不是二进制。json值是大小写敏感的。由于是文本格式的，存在空白的问题。json允许在值之间有任意数目的空白（空格，跳格，回车，换行）。空白是无关紧要的，可以根据需要添加任意的空白。python的josn模块在编码时支持pretty-printing选项
json同样要注意编码格式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;json看起来想在javascript手工定义的数据结构。支持js中eval()函数来解码json序列化的数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;basic_entry&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;diveintopython&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docbook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comments_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Dive into history, 2009 edition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;basic.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# json是文本格式，所以w打开即可&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basic_entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 同pickle一样，json定义了dump()函数，接收一个流对象和一个可写的流对象。然后写入&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;json是文本格式，所以可是用cat查看一下其内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; with open(&amp;#39;basic-pretty.json&amp;#39;, mode=&amp;#39;w&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as f:
...     json.dump(basic_entry, f, indent=2) # indent参数指定空格数量进行缩进嵌套保存数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;读取数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类似pickle模块，json模块有一个load()函数接受一个流对象，从中读取JSON编码过的数据，并且创建该JSON数据结构的python对象的镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; with open(&amp;#39;basic.json&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as f:
...     entry = json.load(f)
... 
&amp;gt;&amp;gt;&amp;gt; entry
{&amp;#39;tags&amp;#39;: [&amp;#39;diveintopython&amp;#39;, &amp;#39;docbook&amp;#39;, &amp;#39;html&amp;#39;], &amp;#39;id&amp;#39;: 256, &amp;#39;comments_link&amp;#39;: None, &amp;#39;published&amp;#39;: True, &amp;#39;title&amp;#39;: &amp;#39;Dive into history, 2009 edition&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python中还有其他一些序列化对象的如dbm、shelve等等&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 22 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-22:2014/05/22/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(七）</title><link>http://king32783784.github.io/2014/05/18/python/</link><description>&lt;h3&gt;Tips 23&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XML是一种描述层次结构话数据的方法。XML文档包含由起始和结束标签分割的一个或多个元素。下面这个就是个简单的XML文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;     # 这是foo元素的起始标签
&lt;span class="nt"&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;　　# 这是foo元素对应的结束标签
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元素可以嵌套到任意层次&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;bar&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/bar&amp;gt;&lt;/span&gt;  # 可以作为foo元素的子元素
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/foo&gt;
XML文档中第一个元素叫做根元素，每份XML文档只能有一个根元素。以下就不是一个xml文档。
　　&lt;foo&gt;&lt;/foo&gt;
    &lt;bar&gt;&lt;/bar&gt;　# 两个根元素
元素可以有其属性，类似字典的键值对。属性由空格分割列举在元素的起始标签中。一个元素中属性名不恩能够重复，属性值必须用括号包括起来，单引号或双引号都可以。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;foo&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; # foo元素有一个叫做lang的属性，属性值为&amp;#39;en&amp;#39;
  &lt;span class="nt"&gt;&amp;lt;bar&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;papayawhip&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fr&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/bar&amp;gt;&lt;/span&gt;　# bar元素分别两个属性,id和lang，每个属性都有对应值，每个元素具有独立的属性集
&lt;span class="nt"&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果元素存在多个属性，书写的顺序不重要。元素的属性都是无序的键值对集，和字典类似。元素的个数是没有限制的。
元素可以有其文本内容
    &lt;foo lang='en'&gt;
    　&lt;bar lang='fr&gt;PapayaWhip&lt;/bar&gt;
    &lt;/foo&gt;
如果和开头那个啥都没有，较空元素。空元素的简洁表示：&lt;foo/&gt;
和python函数可以在不同模块中声明一样，可以在不同命名空间中声明XML元素。XML文档的命名空间看起来像URL.可以通过xmlns来定义默认命名空间。命名空间声明和元素属性类似，但作用不同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; # feed元素处于命名空间&amp;quot;http://www..../Atom&amp;#39; 
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;dive into mark&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;  #title元素的命名空间也是，命名空间会作用到子元素
&lt;span class="nt"&gt;&amp;lt;/feed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以通过xmlns:prefix声明定义一个命名空间并取名为prefix.然后该命名空间的每个元素都必须显式的调用这个前缀。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;atom:feed&lt;/span&gt; &lt;span class="na"&gt;xmlns:atom=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; # feed元素属于命名空间http.../Atom
　　&lt;span class="nt"&gt;&amp;lt;atom:title&amp;gt;&lt;/span&gt; dive into mark &lt;span class="nt"&gt;&amp;lt;/atom:title&amp;gt;&lt;/span&gt; # title元素也是
&lt;span class="nt"&gt;&amp;lt;atom:feed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于XML解析器而言，以上两种方式是一样的。命名空间 + 元素名 = XML标识　前缀是用来引用命名空间的，所以对应解析器来说，这些前缀(atom:）无关紧要。名字空间、元素名、属性、元素的文本内容相同的情况下，xml文档相同。&lt;/p&gt;
&lt;p&gt;在根元素之前，加上字符编码信息（无处不在啊）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Atom结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个Atom订阅都共享一个根元素：即在命名空间http://www.w3.org/2005/Atom中的元素feed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;表示命名空间Atom&lt;/span&gt;
   &lt;span class="na"&gt;xml:lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    # 用来声明元素及子元素使用的语言 
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt; dive into mark &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; # 表题
  &lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt; currently between addictions&lt;span class="nt"&gt;&amp;lt;/subtitle&amp;gt;&lt;/span&gt;# 子标题
  &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt; tag:diveintomark.org,2001-07-29:/&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;　# 全局唯一标识符
  &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-03-27T21:56:07Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alternate&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org/&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;　#link3个属性

&lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt; # 作者
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Mark&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;uri&amp;gt;&lt;/span&gt;http://diveintomark.org/&lt;span class="nt"&gt;&amp;lt;/uri&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dive into history, 2009 edition&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;                           # 标题
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alternate&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;                                   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;文章链接&lt;/span&gt; 
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org/archives/2009/03/27/dive-into-history-2009-edition&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:diveintomark.org,2009-03-27:/archives/20090327172042&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;        #标识符
  &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-03-27T21:56:07Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;                                  # 日期
  &lt;span class="nt"&gt;&amp;lt;published&amp;gt;&lt;/span&gt;2009-03-27T17:20:42Z&lt;span class="nt"&gt;&amp;lt;/published&amp;gt;&lt;/span&gt;        
  &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;scheme=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;term=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;diveintopython&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;       # 类别
  &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;scheme=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;term=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;docbook&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;scheme=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://diveintomark.org&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;term=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;summary&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Putting an entire chapter on one page sounds        # 简介
    bloated, but consider this &lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;mdash; my longest chapter so far
    would be 75 printed pages, and it loads in under 5 seconds&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;hellip;
    On dialup.&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/entry&gt;                    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来才是重点，不然啰嗦那么多干嘛&lt;/p&gt;
&lt;p&gt;python可以使用几种不同的方式解析XML文档。它包含DOM和SAX解析器。这里讲一下ElementTree和库上边。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;etree&lt;/span&gt; &lt;span class="c1"&gt;# ElementTree属于Python标准库的一部分，位置为xml.etree.ElementTree&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# parse函数是ElementTree库的主要入口,使用文件名或流对象作为参数,parse()函数会解析完整的文档。如果内存资源紧张，可以增量式解析&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getroot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# parse函数会返回一个能代表整篇文档的对象，这不是根元素，获取根元素可以调用getroot()方法&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; 
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/2005/Atom}feed&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f61dc975ae8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ElementTree使用{namespace}localname来表达XML元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元素即列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在ElementTree API中，元素的行为就像列表一样。列表中的项即该元素的子元素&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; root.tag    # 根元素如下
&amp;#39;{http://www.w3.org/2005/Atom}feed&amp;#39;
&amp;gt;&amp;gt;&amp;gt; len(root) # 根元素的长度即为子元素的数量
8
&amp;gt;&amp;gt;&amp;gt; for child in root: # 我们可以像使用迭代器（列表）一样遍历其子元素
...     print(child)
... 
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}title&amp;#39; at 0x7fc09da09408&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}subtitle&amp;#39; at 0x7fc09da09458&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}id&amp;#39; at 0x7fc09da09548&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}updated&amp;#39; at 0x7fc09da09598&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da09638&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09688&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09b38&amp;gt;
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09ef8&amp;gt;
从输出看到，根元素共8个子元素，所有feed级的元数据(title,subtitle,id,updated,link,entrya)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该列表只包括了直接的子元素，子元素如果有其自身的子元素，是不包含在这，他们包含在各自的子元素的列表中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性即字典&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XML不只是元素的集合；每一个元素还有其属性集。一旦获取某个元素的引用，我们可以像操作字典一样来获取其属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; root.attrib # attrib是一个代表元素属性的字典，该部分的xml内容： &amp;lt;feed xmlns=&amp;#39;http://www.w3.org/2005/Atom&amp;#39; xml:lang=&amp;#39;en&amp;#39;&amp;gt;，前缀xml:指示一个内置的名字空间，每个XML不需声明便可使用
{&amp;#39;{http://www.w3.org/XML/1998/namespace}lang&amp;#39;: &amp;#39;en&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; root[4] # 第五个子元素即子元素link
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da09638&amp;gt;
&amp;gt;&amp;gt;&amp;gt; root[4].attrib # link元素的属性字典
{&amp;#39;href&amp;#39;: &amp;#39;http://diveintomark.org/&amp;#39;, &amp;#39;type&amp;#39;: &amp;#39;text/html&amp;#39;, &amp;#39;rel&amp;#39;: &amp;#39;alternate&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; root[3] # 第4个子元素updated
&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}updated&amp;#39; at 0x7fc09da09598&amp;gt;
&amp;gt;&amp;gt;&amp;gt; root[3].attrib # updated没有属性，所以是个空字典
{}
&amp;gt;&amp;gt;&amp;gt; root[4].attrib[&amp;#39;href&amp;#39;] # 和字典操作一样，获取对应的属性值
&amp;#39;http://diveintomark.org/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;XML查找结点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;许多情况下，我们需要找到XML中特点的元素。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; root.findall(&amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39;) # findall()方法可以查找匹配的子元素
[&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09688&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09b38&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09ef8&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; root.tag
&amp;#39;{http://www.w3.org/2005/Atom}feed&amp;#39;
&amp;gt;&amp;gt;&amp;gt; root.findall(&amp;#39;{http://www.w3.org/2005/Atom}feed&amp;#39;) # 每个元素都有findall()方法，但查询只会搜索其子元素，根元素feed中不存在feed的子元素，所以为空列表
[]
&amp;gt;&amp;gt;&amp;gt; root.findall(&amp;#39;{http://www.w3.org/2005/Atom}author&amp;#39;) # author虽然有，但它是entry的子元素
[]
&amp;gt;&amp;gt;&amp;gt; tree.findall(&amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39;) # 对象tree(etree.parse()返回值)中一些方法是根元素方法的镜像，和tree.getroot().findall()返回值一样
[&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09688&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09b38&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39; at 0x7fc09da09ef8&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; tree.findall(&amp;#39;{http://www.w3.org/2005/Atom}author&amp;#39;) # 和tree.getroot().findall结果一样
[]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;findall()匹配所有元素，find()方法只返回第一个匹配元素&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; entries = tree.findall(&amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39;)# 查找元素赋给entries
&amp;gt;&amp;gt;&amp;gt; len(entries)
3
&amp;gt;&amp;gt;&amp;gt; title_element = entries[0].find(&amp;#39;{http://www.w3.org/2005/Atom}title&amp;#39;) # find()方法使用ElementTree作为参数,返回第一个匹配的元素
&amp;gt;&amp;gt;&amp;gt; title_element.text
&amp;#39;Dive into history, 2009 edition&amp;#39;
&amp;gt;&amp;gt;&amp;gt; foo_element = entries[0].find(&amp;#39;{http://www.w3.org/2005/Atom}foo&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; foo_element
&amp;gt;&amp;gt;&amp;gt; type(foo_element) # entries[0]没有foo元素，返回None
&amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ElementTree元素对象如果不包含子元素，其值被认为False(即len(element)为0).if element.find('...')并非在测试是否find()方法找到匹配项，而是在判断元素是否包含子元素。想要判断是否包含要查找的子元素，需要使用if element.find('...') is not None&lt;/p&gt;
&lt;p&gt;可以在所以派生元素中搜索，即任意嵌套层次的子元素、孙子元素...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; all_links = tree.findall(&amp;#39;.//{http://www.w3.org/2005/Atom}link&amp;#39;) # .//指在任意嵌套层次查找
&amp;gt;&amp;gt;&amp;gt; all_links
[&amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da09638&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da098b8&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da09d18&amp;gt;, &amp;lt;Element &amp;#39;{http://www.w3.org/2005/Atom}link&amp;#39; at 0x7fc09da0c098&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; all_links[0].attrib # 直接子元素的link
{&amp;#39;href&amp;#39;: &amp;#39;http://diveintomark.org/&amp;#39;, &amp;#39;type&amp;#39;: &amp;#39;text/html&amp;#39;, &amp;#39;rel&amp;#39;: &amp;#39;alternate&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; all_links[1].attrib # 子元素entry子元素link
{&amp;#39;href&amp;#39;: &amp;#39;http://diveintomark.org/archives/2009/03/27/dive-into-history-2009-edition&amp;#39;, &amp;#39;type&amp;#39;: &amp;#39;text/html&amp;#39;, &amp;#39;rel&amp;#39;: &amp;#39;alternate&amp;#39;}                                                           
&amp;gt;&amp;gt;&amp;gt; all_links[2].attrib                                                                     
{&amp;#39;href&amp;#39;: &amp;#39;http://diveintomark.org/archives/2009/03/21/accessibility-is-a-harsh-mistress&amp;#39;, &amp;#39;type&amp;#39;: &amp;#39;text/html&amp;#39;, &amp;#39;rel&amp;#39;: &amp;#39;alternate&amp;#39;}                                                        
&amp;gt;&amp;gt;&amp;gt; all_links[3].attrib
{&amp;#39;href&amp;#39;: &amp;#39;http://diveintomark.org/archives/2008/12/18/give-part-1-container-formats&amp;#39;, &amp;#39;type&amp;#39;: &amp;#39;text/html&amp;#39;, &amp;#39;rel&amp;#39;: &amp;#39;alternate&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ElementTree的findall()方法是其一个非常强大的特性,但它的查询方式有些出乎意料，“有限的XPath支持"  XPath是一种用于查询XML文档的W3C标准。另外一个第三方库对ElementTree的API进行了扩展，提供了对XPath的全面支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LXML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lxml是一个开源的第三方库，以流行的libxml2解析器为基础开发。它提供了对XPath1.0的全面支持。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt; &lt;span class="c1"&gt;# 导入lxml，和ElementTree提供相同的API&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# parse函数和ElementTree&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getroot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 相同&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/2005/Atom}entry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 相同&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09da04b48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09da04a08&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd92ec8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应大型的xml文件，lxml明显比内置的ElementTree快了许多。如果现在只用到了ElementTree的API，并且想要使用最快的实现，可以尝试导入lxml。&lt;/p&gt;
&lt;p&gt;比如
    try:
        from lxml import etree
    except ImportError:
        import xml.etree.ElementTree as etree
这种方法同样适用于其他备选模块的方法&lt;/p&gt;
&lt;p&gt;lxml不只是一个更快速的ElementTree,它的findall()方法能够支持更加复杂的表达式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml.etree&lt;/span&gt; &lt;span class="c1"&gt;# 直接导入了lxml.etree，强调这些特性只限于lxml&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//{http://www.w3.org/2005/Atom}*[@href]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# 查找整个文档范围内搜索命名空间Atom中具有href属性的元素 {http://www.w3.org/2005/Atom}指示&amp;quot;搜索范围仅在命名空间Atom中。”*表示“任意本地名的元素”[@href]表示含有href属性“&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd99088&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd99108&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd990c8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd92f08&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.//{http://www.w3.org/2005/Atom}*[@href=&amp;#39;http://diveintomark.org/&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 查找所有包含href属性并且值为&amp;quot;http://diveintomark.org/&amp;quot;的Atom元素&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd99088&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;NS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/2005/Atom}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.//{NS}author[{NS}uri]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#搜索命名空间Atom中包含uri元素作为子元素的author元素。该语句只返回第一个和第二个entry元素中的author元素，最后的entry元素没有uri &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd991c8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd99048&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lxml集成了对任意XPath1.0表达式的支持&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml.etree&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;NSMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;atom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 要查询命名空间的元素，定义一个命名空间前缀映射。&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.//atom:category[@term=&amp;#39;accessibility&amp;#39;]/..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NSMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  XPath查询请求。这个XPath表达式目的在于搜索category元素，并且该元素包含值为accessibility的term属性”/..&amp;quot;意思是返回找到的category元素的父元素。这条语句会找到所有包含&amp;lt;category term = &amp;#39;accessibility&amp;#39;&amp;gt;作为子元素的条目&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="c1"&gt;# xpath()函数返回一个ElementTree对象列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fc09bd99188&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./atom:title/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NSMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# XPath表达式并总是返回一个元素列表。一个解析了的xml文档的DOM模型并不包含元素；只包含结点。结点可以是元素，属性，甚至是文本内容。XPath查询的结果是一个结点列表。当前查询返回一个文本结点列表：title元素(atom:title)的文本内容（text()),并且title元素必须是当前元素的子元素(./)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;生成XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python同样可以创建xml文档&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;etree&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/2005/Atom}feed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 实例化Element类创建一个新元素。将元素的名字(命名空间+本地名)作为参数。&lt;/span&gt;
&lt;span class="n"&gt;attrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/XML/1998/namespace}lang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;# 将属性名和值构成的字典传递给attrib参数&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;ns0:feed xmlns:ns0=&amp;quot;http://www.w3.org/2005/Atom&amp;quot; xml:lang=&amp;quot;en&amp;quot; /&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accessibility is a harsh mistress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;内置的ElementTree库没有提供细粒度地对序列化时命名空间内元素的控制，但是lxml有这样的功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml.etree&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;NSMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 首先，定义一个用于命名空间映射的字典对象,使用None前缀来定义默认的命名空间&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nsmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NSMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 我们创建元素的时候，给lxml专有的nsmap参数传值，并且lxml会参照我们定义的命名空间前缀&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tounicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{http://www.w3.org/XML/1998/namespace}lang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# 使用set方法随时给元素添加所需属性&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tounicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;# 给已有元素创建子元素，实例化SubElement类，两个参数，父元素(new_feed)和子元素的名字&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tounicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="c1"&gt;# 传递属性字典进去&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dive into &amp;amp;hellip;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tounicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dive&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;hellip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# 新创建title元素在Atom命名空间中，并作为子元素插入到feed元素中。设定元素的文本内容，只需设定其.text属性；当前title元素序列化时就使用了其文本内容，任何包含&amp;lt;或则&amp;amp;符号的内容在序列化时都需要转义&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tounicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_feed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pretty_print&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dive&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;hellip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;pretty_print=True,&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;会在每个结束的末尾或含义子元素但没有文本内容的末尾添加换行符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;解析损坏的XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不再说明了，尽量保证xml格式符合标准吧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 18 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-18:2014/05/18/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(七）</title><link>http://king32783784.github.io/2014/05/13/python/</link><description>&lt;h3&gt;Tips 22&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;文件操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读取文件之前，需要打开，打开文件比较简单：&lt;/p&gt;
&lt;p&gt;a_file = open('roman2.py', encoding='utf-8')&lt;/p&gt;
&lt;p&gt;"roman2.py"打开文件的文件名＋路径名　encoding 指定编码规则，如果想查看当前编码信息，可以导入local模块通过locale.getpreferredencoding()查看
open函数返回一个流对象(stream　object)支持下面的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a_file.name
&amp;#39;roman2.py&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.encoding
&amp;#39;utf-8&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.mode
&amp;#39;r&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.read() # 返回的结果是文件的一个字符串表示
&amp;gt;&amp;gt;&amp;gt; a_file.read() # 再次读取不会返回一个异常，但返回为空
&amp;#39;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.read() # 依旧在文末所以为空
&amp;#39;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.seek(0) # seek()方法定位到文件中特定字节
0
&amp;gt;&amp;gt;&amp;gt; a_file.read(16) #read()方法支持字符个数的参数
&amp;#39;#*-*coding=utf-8&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.read(1)
&amp;#39;*&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.read(1)
&amp;#39;-&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a_file.tell()　# 当前在18字符处　
18
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;read()和seek()方法是以字节的方式记数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a_file.close()
&amp;gt;&amp;gt;&amp;gt; a_fiel.read() # 试图读取关闭的文件会引发IOError异常
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;a_fiel&amp;#39; is not defined
&amp;gt;&amp;gt;&amp;gt; a_file.close()
&amp;gt;&amp;gt;&amp;gt; a_file.closed　# closed用来确认文件是否关闭
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;自动关闭文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;try..finally可以，但with更好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;roman2.py&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) as a_file:
    a_file.seek(17)
    a_character = a_file.read(1)
    print(a_character)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里没有使用cloase()方法，但with块结束时，会自动调用a_file.close(),即时程序突然中止，也会保证文件被关闭。
从实现上说，with语句创建了一个运行时环境(runtime context)。在几个样例中，流对象的行为就是一个上下文管理器。当with结束时，python告诉流对象正在退出这个运行时环境，然后环境对象就会调用它的close()方法。&lt;/p&gt;
&lt;p&gt;with语句不是针对文件而言的，它是用来创建运行时环境的通用框架，告诉对象它们正在进入和离开一个运行时环境。如果该对象是流对象，那么它就会做一些类似文件对象一样有用的动作。但是那个行为是被流对象自身定义的，不是with决定的。还有很多跟文件无关的使用上线文管理器的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一次读取一行数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;line_number = 0
with open(&amp;#39;roman2.py&amp;#39;) as a_file:  # 使用for循环一次读取一行(a_line),流对象也是一个迭代器
    for a_line in a_file:
        line_number += 1
        print(&amp;#39;{:&amp;gt;4} {}&amp;#39;.format(line_number, a_line.rstrip())) # 使用字符串的format方法，可以打印出行号和行内容，{:&amp;gt;4}&amp;quot;使用最多４个空格使之右对齐,字符串方法rstrip()可以去掉尾随的空白符
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;写入文本文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用open()函数，指定写入模式，存在两种模式用于写入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"写"模式会重写文件, mode='w'&lt;/li&gt;
&lt;li&gt;“追加”模式会在文件末尾追写数据，mode='a'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果打开文件不存在，两种模式都会自动创建文件。
完成写入后应该马上关闭文件，释放文件句柄，并且保证数据被完整的写入到了磁盘。跟读文件类似，可以调用close(),或则使用with块。
    &amp;gt;&amp;gt;&amp;gt; with open('test.log', mode='w', encoding='utf-8') as a_file: # 覆盖写，之前的数据没有了
    ...     a_file.write('test successed')
    ... 
    14
    &amp;gt;&amp;gt;&amp;gt; with open('test.log', encoding='utf-8') as a_file:
    ...     print(a_file.read())
    ... 
    test successed
    &amp;gt;&amp;gt;&amp;gt; with open('test.log', mode='a', encoding='utf-8') as a_file: # 追加写
    ...     a_file.write('and again')
    ... 
    9
    &amp;gt;&amp;gt;&amp;gt; with open('test.log', encoding='utf-8') as a_file:
    ...     print(a_file.read())
    ... 
    test successedand again&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符编码&lt;/strong&gt;
打开写入时加了encoding参数，这个参数非常重要，文件中并不存在字符串，他们都是字节，当年你指定编码方式时，从文件读取字符串才可能。
不是所有的文件都包含文本内容，还可以存放二进制。打开二进制时需要加入参数'b'，二进制流对象没有encoding属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非文件来源的流对象&lt;/strong&gt;
使用read()方法即可从虚拟文件读取数据。
比如一个库，其中一个库函数从文件读取数据，它使用文件名为参数，以只读的方式打开文件，读取数据，关闭文件，返回。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PapayaWhip is the new black.&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 字符串&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# io模块定义了StringIO类，可以把内存中字符串作为文件处理&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;PapayaWhip is the new black.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;PapayaWhip&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;new black.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;io.StringIO可以将一个字符串作为文件处理，io.ByteIO可以把字节数组当成二进制文件处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python标准库中包含支持读写压缩文件的模块，其中gzip和bzip2是非windows下最流行的压缩方式。
gzip模块允许你创建用来读写gzip压缩文件的流对象，该流对象支持read()方法或则write()方法。也就是可以用普通文件的方式来操作gzip压缩文件，它同样支持with语句。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gzip&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out.log.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;z_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# mode参数里面有b&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;z_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A nine mile walk is no joke, especially in the rain.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="mi"&gt;52&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;退出之后，通过ls，可以看到压缩文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准输入、输出和错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sys.stdin, sys.stdout, sys.stderr&lt;/p&gt;
&lt;p&gt;数据流应用时，多次提到。标准输出和标准错误输出，是类UNIX系统中的两个管道(pipe)。当你调用print()的时候，需要打印的内容被发送的stdout管道，当程序出错并需要打印跟踪信息时，被发送到sys.stderr管道。默认情况下，两个管道都链接到终端。
sys.stdout和sys.stderr都是流对象，但他们都只支持写入，试图调用read()会引发IOError。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准输出重定向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sys.stdout和sys.stderr是变量不是常量，可以利用其他任意流对象进行重定向他们的输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedirectStdoutTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_new&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out_new&lt;/span&gt; &lt;span class="c1"&gt;# 传入一个参数(上下文环境的生命周期内用作标准输出的流对象&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 进入上下文环境时会调用该方法（即with开始时)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="c1"&gt;# 把当前的sys.stdout值保存到self.out_old&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_new&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 通过self.out_new赋给sys.stdout来重定向标准输出&lt;/span&gt;
    &lt;span class="c1"&gt;# 先保存当前的标准输出，然后将标准输出定向到为传入的流对象(out.log)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 离开上下文是调用（with语句末尾)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out_old&lt;/span&gt; &lt;span class="c1"&gt;# 把保存的self.out_old的值赋给sys.stdout恢复标准输出&lt;/span&gt;
    &lt;span class="c1"&gt;# 恢复标准输出为标准输出（终端输出）&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 输出到终端&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# 打开一个文件out.log&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;RedirectStdoutTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#  怎么没有as,就像调用函数忽略返回值，with语句的上下文环境同样可以忽略&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 这个print()函数在with语句上下文环境执行，不会输出，会写入文件&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with语句块结束了，python告诉每一个上下文管理器完成他们应该离开上下文环境时该做的事。这些上下文环境形成一个后进先出的栈。当一个上下文环境离开时，第二个上下文环境将sys.stdout的值恢复到原来的状态，然后第一个上下文环境关闭out.log文件。由于标准输出已经被恢复，所以再调用print()函数会输出到终端上。
　
 RedirectsStdoutTo上下文环境的side effect,该类是用户自定义的上下文管理器。任何类只要定义了__enter__()和__exit__()就可以变成上下文管理器。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-13:2014/05/13/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(六）</title><link>http://king32783784.github.io/2014/05/10/python/</link><description>&lt;h3&gt;Tips 21&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;重构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面将了测试驱动开发，但就算尽全力编写的单元测试，仍然会遇到错误。仍然会有考虑不全面的测试用例。
比如前面的实现的转换数字的程序，如果输入空字符，会触发InvalidRomanNumeralError例外。
在出现错误后，应该在修复前写出一个导致该失败情形的测试用例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FromRomanBadInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;testBlank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;from_roman should fail with blank string&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roman2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InvalidRomanNumeralError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;roman2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_roman&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行测试用例会失败，现在可以修复这个bug。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not s:
    raise InvalidRomanNumberalError(&amp;#39;Input can not be blank&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后测试成功&lt;/p&gt;
&lt;p&gt;正常情况下，罗马数字中任何一个字符在同一行中不得重复出现三次以上，但通过一行4个Ｍ字符来代表4000,这样就可以把数字范围才能够１..3999转为１..4999．先修改测试用例
增加 (4000, 'MMMM'), (4500, 'MMMMD'),(4888, 'MMMMDCCCLXXXVIII), (4999, 'MMMMCMXCIX')
过大值测试由4000转为5000,太多重复数字测试'MMMM'被定为符合要求的罗马数字，所以'MMMM'改为'MMMMM',范围测试的１-3999,改为１-4999
测试失败
因为一些新需求导致失败的测试用例，现在就需要对实现进行修改。
首先判断是否合法的罗马数字的匹配规则要修改
M{0,4}对4000+数字的支持
对数字判断的范围改为(0&amp;lt;n&amp;lt;5000)
到底这样修改，符合要求吗？光说不行啊，还得测试才能确保。测试最终通过，说明我们的修改是有效的&lt;/p&gt;
&lt;p&gt;需求变了，实现跟着变了，但改变实现后，影响之前的功能吗？新功能实现成功吗？完整的单元测试的好处就是明确的告诉你修改是否成功，是否对之前的功能有影响。&lt;/p&gt;
&lt;p&gt;重构是修改可运行的代码，使其表现更好。更佳可以是性能更好，占用内存更少，占用更少的空间，更加简洁、增加更多功能，代码可读性更高。如果代码存在完整的单元测试的前提下，你才能毫无顾忌的去修改去重构，不然心里没底啊。&lt;/p&gt;
&lt;p&gt;原来代码中的正则表达式看起来可读性不高，可以用个查询表替换，但是替换之后功能会不会有影响？别怕，我们已经实现了相应的单元测试。&lt;/p&gt;
&lt;p&gt;现在可以大胆去修改实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OutOfRangeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NotIntegerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InvalidRomanNumeralError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;

&lt;span class="nx"&gt;roman_numeral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;XC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;XL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;to_roman_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;from_roman_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;to_roman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;convert integer to Roman numeral&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;OutOfRangeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number out of range (must be 1..4999)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;:
        &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;NotIntegerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-integers can not be converted&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;to_roman_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;from_roman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;convert Roman numeral to integer&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;InvalidRomanNumeralError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Input must be a string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;:
        &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;InvalidRomanNumeralError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Input can not be blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;from_roman_table&lt;/span&gt;:
        &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;InvalidRomanNumeralError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Invalid Roman numeral: {0}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;from_roman_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;build_lookup_tables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;to_roman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;numeral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;roman_numeral_map&lt;/span&gt;:
            &lt;span class="kt"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt;:
                &lt;span class="kt"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numeral&lt;/span&gt;
                &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:
            &lt;span class="kt"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;to_roman_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;roman_numeral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to_roman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;to_roman_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roman_numeral&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="err"&gt;的罗马数字列表&lt;/span&gt;
        &lt;span class="nx"&gt;from_roman_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;roman_numeral&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="err"&gt;　＃&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="err"&gt;罗马数字和阿拉伯数字的字典&lt;/span&gt;

&lt;span class="nx"&gt;build_lookup_tables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完成好，再次执行单元测试，测试通过，说明虽然实现变了，但功能依旧能保证。&lt;/p&gt;
&lt;p&gt;单元测试是一个威力巨大的概念，如果实施的好，可以降低维护成本，提高项目的灵活性。但编写良好的测试用例非常艰难。很多语言都有自己的单元测试框架，但框架直接的共同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计测试用例是具体、自动且独立的工作&lt;/li&gt;
&lt;li&gt;在编写被测代码之前编写测试用例（测试驱动开发）&lt;/li&gt;
&lt;li&gt;编写用于检查好输入并验证正确结果的测试&lt;/li&gt;
&lt;li&gt;编写用于检查坏输入并做出正确失败响应的测试&lt;/li&gt;
&lt;li&gt;编写并更新测试用例反映新需求&lt;/li&gt;
&lt;li&gt;重构以提升性能、可扩展性、可读性、可维护性及补充特性&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 10 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-10:2014/05/10/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(五）</title><link>http://king32783784.github.io/2014/05/07/python/</link><description>&lt;h3&gt;Tips 20&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TDD／单元测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例子要求
1.只有一种正确的途径用阿拉伯数字表示罗马数字。
2.反过来一样，一个字符串类型的有效的罗马数字也仅可以表示一个阿拉伯数字（即，这种转换方式也是只有一种）。
3.只有有限范围的阿拉伯数字可以以罗马数字表示，那就是1‐3999。而罗马数字表示大数字却有几种方式。例如，为了表示一个数字连续出现时正确的值则需要乘以1000。限定罗马数字在1到3999之间。
4.无法用罗马数字来表示0。
5.无法用罗马数字来表示负数。
6.无法用罗马数字来表示分数或非整数&lt;/p&gt;
&lt;p&gt;１．to_roman()方法应该返回代表1-3999的罗马数字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;roman1&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KonwnValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 测试用例类应该继承unittest的TestCase子类&lt;/span&gt;
    &lt;span class="n"&gt;known_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;# 需要测试所有明显边界值&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;II&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;III&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;IV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;VI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;VII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;VIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;IX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;XXXI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CXLVIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;294&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CCXCIV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CCCXII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;421&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CDXXI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;528&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DXXVIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;621&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DCXXI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;782&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DCCLXXXII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;870&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DCCCLXX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;941&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CMXLI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1043&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MXLIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MCX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1226&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MCCXXVI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MCCCI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1485&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MCDLXXXV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1509&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MDIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1607&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MDCVII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1754&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MDCCLIV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MDCCCXXXII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1993&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MCMXCIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2074&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMLXXIV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMCLII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2212&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMCCXII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2343&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMCCCXLIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2499&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMCDXCIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2574&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMDLXXIV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2646&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMDCXLVI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2723&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMDCCXXIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2892&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMDCCCXCII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMCMLXXV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3051&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMLI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3185&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCLXXXV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCCL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3313&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCCCXIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3408&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCDVIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3501&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMDI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3610&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMDCX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3743&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMDCCXLIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3844&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMDCCCXLIV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3888&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMDCCCLXXXVIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3940&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCMXL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MMMCMXCIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_to_roman_konwn_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 每个独立的测试都有自己的不含参数及没有返回值的方法，如果不跑异常则测试通过&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;to_roman should give known result with know input&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;interger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numeral&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;konwn_values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;roman1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_roman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 这里调用了roman1中的to_roman()方法，这里roman1仍未编写，但此处已定义了其接口&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numeral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# 假设to_roman()方法已经正确定义，正确调用，成功实现并返回了一个值，这里判断返回值是否正确，TestCase类提供assertEqual方法检查两个值是否相对。如果返回值与预期值相同，则会正常退出，也就通过了测试&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;roman1.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_roman(n):
    &amp;#39;&amp;#39;&amp;#39;整型转罗马数字&amp;#39;&amp;#39;&amp;#39;
    pass  # 什么都不做
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在执行测试用例，结果如你所料，肯定会失败。-v　参数会有更详细的输出
输出：
    [root@isoft_lp 0306]# python romantest1.py  -v
    test_to_roman_known_values (&lt;strong&gt;main&lt;/strong&gt;.KnownValues) #运行脚本就会执行unittest.main(),该方法执行每一个测试用例，每条用例都是romantest.py中的类方法，这些类没有必要的组织要求；它们每一个都包含一个独立的测试方法，可以编写一个含有多个方法的类。但每个类都必须继承unittest.TestCase
    to_roman should give known result with known input ... FAIL # 每个测试用例，unitest模块都会打印测试方法的docstring&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;======================================================================
FAIL: test_to_roman_known_values (__main__.KnownValues)　　　#每个失败的用例，unittest模块会打印出详细的跟踪信息
to_roman should give known result with known input
----------------------------------------------------------------------
Traceback (most recent call last):
File &amp;quot;romantest1.py&amp;quot;, line 66, in test_to_roman_known_values
    self.assertEqual(numeral, result)　　# assertEqual() 的调用抛出了一个AssertionError异常，因为to_roman(1)应该返回&amp;quot;I&amp;quot;,但时间没有
AssertionError: &amp;#39;I&amp;#39; != None

----------------------------------------------------------------------
Ran 1 test in 0.000s　# 说明每个用例执行情况后，打印执行了多少用例，用了多少时间

FAILED (failures=1)　# 如果测试用例没有通过的话，unittest可以区别用例执行失败跟程序错误的。像assertXYX, assertRaise这样的assertEqual方法的失败是因为被声明的条件不是为真，或则预期的异常没有抛出。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在可以实现to_roman&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;roman_numeral_map = ((&amp;#39;M&amp;#39;, 1000),
                 (&amp;#39;CM&amp;#39;, 900),
                 (&amp;#39;D&amp;#39;,  500),
                 (&amp;#39;CD&amp;#39;, 400),
                 (&amp;#39;C&amp;#39;,  100),
                 (&amp;#39;XC&amp;#39;, 90),
                 (&amp;#39;L&amp;#39;,  50),
                 (&amp;#39;XL&amp;#39;, 40),
                 (&amp;#39;X&amp;#39;,  10),
                 (&amp;#39;IX&amp;#39;, 9),
                 (&amp;#39;V&amp;#39;,  5),
                 (&amp;#39;IV&amp;#39;, 4),
                 (&amp;#39;I&amp;#39;,  1))
                          # 组成罗马数字基本的元素
def to_roman(n):
&amp;#39;&amp;#39;&amp;#39;整型转罗马数字&amp;#39;&amp;#39;&amp;#39;
    result = &amp;#39;&amp;#39;
    for numeral, integer in roman_numeral_map:
        while n &amp;gt;= integer:
            result += numeral
            n -= integer
    return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以通过测试了&lt;/p&gt;
&lt;p&gt;如果输入非法值会怎么样呢？
比如输入4000,程序返回了MMMM,和预期不符，而且不是一个正确的罗马数
当to_roman()应该抛出一个OutOfRangeError异常&lt;/p&gt;
&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToRomanBadInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;test_too_large&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;to_roman should fail with large input&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roman2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OutOfRangeErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;roman2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to_roman&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;该测试方法需要以下：期望的异常，要测试的方法及传入给方法的参数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后一行，这里没有直接调用to_roman()，也不需要手动检查它抛出的异常类型（通过一个try...except块包装），　这些assertRaises方法都完成了。
我们要做的事情只有，告诉assertRaise所期望的异常类型(roman2.OutOfRangeErr),被测方法(to_roman()),以及方法的参数(4000).assertEqual方法负责调用to_roman()和检查方法抛出roman2.OutOfRangeError异常。这里只是把to_roman方法以参数传递，没有调用被测方法，也不是被测方法作为一个字符串名字传递进去。&lt;/p&gt;
&lt;p&gt;执行
    [root@isoft_lp 0306]# python romantest2.py  -v
    test_to_roman_known_values (&lt;strong&gt;main&lt;/strong&gt;.KnownValues)
    to_roman should give known result with known input ... ok
    test_too_large (&lt;strong&gt;main&lt;/strong&gt;.ToRomanBadInput)
    to_roman should fail with large input ... ERROR&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;======================================================================
ERROR: test_too_large (__main__.ToRomanBadInput)
to_roman should fail with large input
----------------------------------------------------------------------
Traceback (most recent call last):
  File &amp;quot;romantest2.py&amp;quot;, line 71, in test_too_large
    self.assertRaises(roman2.OutOfRangeError, roman2.to_roman, 4000)
AttributeError: &amp;#39;module&amp;#39; object has no attribute &amp;#39;OutOfRangeError&amp;#39;

----------------------------------------------------------------------
Ran 2 tests in 0.000s

FAILED (errors=1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试本身是失败，但这里是报错了，提示没有OutOfRangeError
在测试模块添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OutOfRangeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;异常也是类，越界是值错误的一种，因此继承ValueError&lt;/p&gt;
&lt;p&gt;再次执行，仍然失败，但没有出错，意味者用例执行成功了。
现在修改代码，使其通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_roman(n):
    &amp;#39;&amp;#39;&amp;#39;convert interger to Roman&amp;#39;&amp;#39;&amp;#39;
    if n &amp;gt; 3999：
        raise OutOfRangeError(&amp;#39;number out of range (must be less than 4000)&amp;#39;)
    result = &amp;#39;&amp;#39;
    for numeral, interger in roman_numeral_map:
        whiel n &amp;gt;= integer:
            result += numeral
            n -= interger
    return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终两个测试都通过了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@isoft_lp 0306]# python romantest2.py  -v
test_to_roman_known_values (__main__.KnownValues)
to_roman should give known result with known input ... ok
test_too_large (__main__.ToRomanBadInput)
to_roman should fail with large input ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的需求还提到无法转换０和负数，因此要增加用例来进行测试。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_zero(self):
    &amp;#39;&amp;#39;&amp;#39;to_roman　should fail with 0 input&amp;#39;&amp;#39;&amp;#39;
    self.assertRaises(roman3.OutOfRangeError, roman3.to_roman,0) # 如果输入０触发错误

def test_negative(self):
    &amp;#39;&amp;#39;&amp;#39; to_roman should fail with negative input&amp;#39;&amp;#39;&amp;#39;
    self.assertRaises(roman3.OutOfRangeError, roman3.to_roman, -1) # 如果输入-1触发错误
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行测试，不出所料的失败，因为roman3中没有实现对应处理，接下来要考虑如何修改roman3让测试通过
修改如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_roman(n):
    &amp;#39;&amp;#39;&amp;#39;整型转罗马数字&amp;#39;&amp;#39;&amp;#39;
    if not (0&amp;lt; n &amp;lt; 4000):
        raise OutOfRangeError(&amp;#39;number out of range (must be less than 4000)&amp;#39;)
    result = &amp;#39;&amp;#39;
    for numeral, integer in roman_numeral_map:
        while n &amp;gt;= integer:
            result += numeral
            n -= integer
    return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是非整型数据呢？需要再添加对应的测试用例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_non_interger(self):
    &amp;#39;&amp;#39;&amp;#39;to_roman should fail with non-integer&amp;#39;&amp;#39;&amp;#39;
    self.assertRaises(roman2.NotIntegerError, roman2.to_roman, 0.5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行测试，缺少NotIntegerError,需要在roman2模块中进行定义，和前面一样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NotINtergerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次执行测试，不出所料，提示未触发异常，因为roman2没有进行判断，实现该判断：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not isinstance(n, int):
    raise NotIntegerError(&amp;#39;no-integers can not be converted&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次执行测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_to_roman_known_values (__main__.KnownValues)
to_roman should give known result with known input ... ok
test_negative (__main__.ToRomanBadInput)
to_roman should fail with negative input ... ok
test_non_interger (__main__.ToRomanBadInput)
to_roman should fail with non-integer ... ok
test_too_large (__main__.ToRomanBadInput)
to_roman should fail with large input ... ok
test_zero (__main__.ToRomanBadInput)
to_roman should fail with 0 input ... ok----------------------------------------------------------------------
Ran 5 tests in 0.001s
OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开头提出的需求是相互转换，所以还要实现罗马数字转阿拉伯数字的功能，不过测试先行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_from_roman_know_values(self):
    &amp;#39;&amp;#39;&amp;#39;from_roman should give know result with konwn input&amp;#39;&amp;#39;&amp;#39;
    for integer, numeral in self.known_values:
        result = roman2.from_roman(numeral)
        self.assertEqual(integer, result)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来好像和前面的测试阿拉伯转罗马数字一样，确实，调用的测试数据是一样的，只不过输入输出颠倒了。理论上把数字传递给to_roman()方法，得到一个罗马字符串，然后把字符串传入from_roman(),然后又返回一个数字，这个数字和最初传给to_roman()应该是一样的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;n = from_roman(to_roman(n)) for all values of n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么，from_roman的边界取值测试就可以利用这个方法，进行测试，也就是输入的还是数字，先调用to_roman()转成罗马数字，然后to_roman的输出作为from_roman的输入，进行from_roman的测试
    class RoundtripCheck(unittest.TestCase):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def test_roundtrip(self):
        &amp;#39;&amp;#39;&amp;#39;from_roman(to_roman(n))==n for all n&amp;#39;&amp;#39;&amp;#39;
        for integer in range(1, 4000):
            numeral = roman2.to_roman(integer)
            result = roman2.from_roman(numeral)
            self.assertEqual(integer, result)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果现在测试，肯定是提示error,因为我们还没有实现from_roman&lt;/p&gt;
&lt;p&gt;下面开始实现from_roman:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def from_roman(s):
    &amp;#39;&amp;#39;&amp;#39;罗马数字转整型&amp;#39;&amp;#39;&amp;#39;
    result = 0
    index = 0
    for numeral, integer in roman_numeral_map:
        while s[index:index+len(numeral)] == numeral: # 沿着roman_numeral_map从上往下匹配，匹配一个转换一个再相加
            result += integer
            index += len(numeral)
        return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在开始执行测试，Ran 7 tests in 0.030s  OK&lt;/p&gt;
&lt;p&gt;现在１-3999的合法输入的罗马数字都可以转换为正确的数字，但是如果不是合法的罗马数字呢？这就需要一个方法检查输入的字符是不是有效的罗马数字。
罗马数字的规则不再描述:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_too_many_repeated_numerals(self):
    &amp;#39;&amp;#39;&amp;#39;from_roman should fail with too many repeated&amp;#39;&amp;#39;&amp;#39;
    for s in (&amp;#39;MMMM&amp;#39;, &amp;#39;DD&amp;#39;, &amp;#39;CCCC&amp;#39;, &amp;#39;LL&amp;#39;, &amp;#39;XXXX&amp;#39;, &amp;#39;VV&amp;#39;, &amp;#39;IIII&amp;#39;): # 一种情况，比如4是IV而不是IIII,首先测试这类情况
        self.assertRaises(roman2.InvalidRomanNumeralError,
                          roman2.from_roman, s)

def test_repeated_pairs(self):
    &amp;#39;&amp;#39;&amp;#39;from_roman should fail with repeated pairs of numerals&amp;#39;&amp;#39;&amp;#39;
    for s in (&amp;#39;CMCM&amp;#39;, &amp;#39;CDCD&amp;#39;, &amp;#39;XCXC&amp;#39;, &amp;#39;XLXL&amp;#39;, &amp;#39;IXIX&amp;#39;, &amp;#39;IVIV&amp;#39;): # 检查某些不允许的重复，如IX为９，但IXIX不合法
        self.assertRaises(roman2.InvalidRomanNumeraError,
                          roman2.from_roman,s)

def test_malformed_antecedents(self):
    &amp;#39;&amp;#39;&amp;#39;from_roman shoud fail with malformed antecedents&amp;#39;&amp;#39;&amp;#39;
    for s in (&amp;#39;IIMXCC&amp;#39;, &amp;#39;VX&amp;#39;, &amp;#39;DCM&amp;#39;, &amp;#39;CMM&amp;#39;, &amp;#39;IXIV&amp;#39;, &amp;#39;MCMC&amp;#39;, &amp;#39;XCX&amp;#39;, &amp;#39;IVI&amp;#39;,　# 检测数字是否正确顺序出现，比如CL150,但LC不合法
              &amp;#39;LM&amp;#39;, &amp;#39;LD&amp;#39;, &amp;#39;LC&amp;#39;):
        self.assertRaises(roman2.InvalidRomanNumeraError,
                          roman2.from_roman, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在要做的是修改from_roman实现对输入罗马数字的检测：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;roman_numeral_pattern = re.compile(&amp;#39;&amp;#39;&amp;#39;
    ^        # 字符的开头
    M{0,3}   # 千位,可以是0-3个M
    (CM|CD|D?C{0,3})  # 百位,900(CM), 400(CD), 500(D) 0-300（0-3个C)
    (XC|XL|L?X{0,3})  # 十位,90(XC),40(XL),0-30(0-3个X),50(L)
    (IX|IV|V?I{0,3})  # 个位,9(IX), 4(IV), 5(V), 0-3(I,II,III)
    $                 # 字符结束
    &amp;#39;&amp;#39;&amp;#39;, re.VERBOSE)
    if not roman_numeral_pattern.search(s):
        raise InvalidRomanNumberalError(&amp;#39;Invalid Roman numeral: {0}&amp;#39;.format(s))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终：
    ..........
    ----------------------------------------------------------------------
    Ran 10 tests in 0.038s
    OK&lt;/p&gt;
&lt;p&gt;测试驱动开发(TDD)方法的好处不言而喻。所以会测试的开发才是好开发。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 07 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-07:2014/05/07/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(四）</title><link>http://king32783784.github.io/2014/05/06/python/</link><description>&lt;h2&gt;Tips19&lt;/h2&gt;
&lt;h3&gt;斐波那契生成器&lt;/h3&gt;
&lt;p&gt;每个数字都是前两个数字的和&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def fib(max):
    a, b = 0, 1
    while a &amp;lt; max:
        yield a　　　　# a是当前序列的数字，因此对它进行yield，yield命令的意思是这不是一个普通的函数。它是一次生成一个值的特殊类型函数。可以将其视为可恢复函数。调用该函数将返回一个可用于生成连　　续x值的生成器【Generator】　　
        a,b = b, a+b   # b是序列中下一个数字，因此将它赋值给a，但同时计算下一个值(a+b)并将其赋值给b以供稍后使用
for n in fib(1000):
    print(n, end=&amp;#39; &amp;#39;)

0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;复数规则生成器&lt;/h3&gt;
&lt;p&gt;英文单词复数形式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_math_and_appll_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;matches_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches_rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apply_rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          &lt;span class="c1"&gt;# rules()是按照需求连续生成匹配和应用函数的生成器&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pattern_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pattern_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;build_math_and_appll_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plural&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rules_filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plural5-rules.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;matches_rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apply_rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# rules是生成器，可直接for循环使用&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matches_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;apply_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;no matching rule for {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;斐波那契迭代器&lt;/h3&gt;
&lt;p&gt;迭代器就是一个定义了__iter__()方法的类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;时，&lt;/span&gt;&lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;就会被调用&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　#&lt;/span&gt; &lt;span class="err"&gt;当有人在迭代器实例中调用&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;方法时，&lt;/span&gt;&lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;会自动调用&lt;/span&gt;
        &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;self.max&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;&lt;span class="err"&gt;　#&lt;/span&gt; &lt;span class="err"&gt;给调用者发送迭代用完的信号&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for 循环调用iter(fib_inst),它返回迭代器，叫fib_iter.在这，fib_inst== fib_inst,因为__iter__()方法返回self.for 循环调用next(fib_iter),调用fib_iter对象的__next__()方法，产生下一个计算并返回值。当抛出StopIteration时，for循环将接收该异常并退出。&lt;/p&gt;
&lt;h3&gt;复数规则迭代器器&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__iter__&lt;/span&gt;
&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__next__&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LazyRules&lt;/span&gt;:
    &lt;span class="kt"&gt;rules_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plural6-rules.txt&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pattern_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rules_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;实例化&lt;/span&gt;&lt;span class="nx"&gt;LazyRules&lt;/span&gt;&lt;span class="err"&gt;时，打开文件&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="err"&gt;　　　＃　打开文件之后，初始化缓存&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　　　　#&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;时，&lt;/span&gt;&lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="err"&gt;方法会自动调用&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="err"&gt;　　　　　　#&lt;/span&gt; &lt;span class="err"&gt;每个&lt;/span&gt;&lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="err"&gt;方法都需要返回一个迭代器，返回&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;　　　　#&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="err"&gt;方法，&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;会跟着被调用&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;self.cache_index&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self.pattern_file.closed&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;

        &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pattern_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;:
            &lt;span class="kt"&gt;self.pattern_file.close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;

        &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;build_math_and_appll_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　#&lt;/span&gt; &lt;span class="err"&gt;在返回匹配和应用功能之前（保存在元组&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="err"&gt;中）&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;
    &lt;span class="nx"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LazyRules&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;高级迭代器&lt;/h3&gt;
&lt;p&gt;例如，解决字母算术谜题。&lt;/p&gt;
&lt;p&gt;HAWAII+IDAHO+IOWA+OHIO==STATES&lt;/p&gt;
&lt;p&gt;510199+98153+9301+3593==621246&lt;/p&gt;
&lt;p&gt;H=5 A=1 W=0 I=9 D=8 O=3 S=6 T=2 E=4&lt;/p&gt;
&lt;p&gt;示例代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;puzzle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[A-Z]+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;puzzle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 找到字符串，形成字符串列表&lt;/span&gt;
    &lt;span class="n"&gt;unique_characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 通过集合唯一性，找到字母的集合&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Too many letters&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 判断字母的种类是否大于10&lt;/span&gt;
    &lt;span class="n"&gt;first_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# 获取每个字符串的首字母　&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 字符串数量&lt;/span&gt;
    &lt;span class="n"&gt;sorted_characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique_characters&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;first_letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#首字符在前的，有序字符串&lt;/span&gt;
    &lt;span class="n"&gt;characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 获取字母的对应的字节值列表&lt;/span&gt;
    &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0123456789&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 计算0-9数字的字节值生成元组&lt;/span&gt;
    &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 0的字节值&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt; &lt;span class="c1"&gt;# 通过迭代器取出指定数目的&amp;gt;有序组合&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="c1"&gt;# 判断是否存在０&lt;/span&gt;
            &lt;span class="n"&gt;equation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;puzzle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="c1"&gt;# 先将characters和guess&amp;gt;元素对构造出作为转换表的字典，然后通过translate,将字符串中的每个字母转换为相应的数字）&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 判断equation是否成立&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;equation&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;puzzle&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
        &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;puzzle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@isoft_lp 0306]# python3 alphametics.py &amp;quot;HAWAII + IDAHO + IOWA + OHIO == STATES&amp;quot;

HAWAII + IDAHO + IOWA + OHIO == STATES                                                                                                               
510199 + 98153 + 9301 + 3593 == 621246
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决这个问题，首先要找到谜题中所有的[A-Z]字母&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;re.findall(&amp;#39;[0-9]+&amp;#39;, &amp;#39;16 2-by-4s in rows of 8&amp;#39;)  # 找到字符串中的数字

re.findall(&amp;#39;[A-Z]+&amp;#39;, &amp;#39;SEND + MORE == MONEY&amp;#39;)　　# 找到字符串中的字母

re.findall(&amp;#39; s.*? s&amp;#39;, &amp;quot;The sixth sick sheikh&amp;#39;s is sixth sheep&amp;#39;s sick.&amp;quot;) # 先匹配一个空格，后跟s 然后任意字符然后空格s;重叠的匹配只返回前一个
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;在序列中需找不同的元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集合使得在序列中查找不同的元素变得容易。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; a_list = [&amp;#39;The&amp;#39;, &amp;#39;sixth&amp;#39;, &amp;#39;sick&amp;#39;, &amp;quot;sheik&amp;#39;s&amp;quot;, &amp;#39;sixth&amp;#39;, &amp;quot;sheep&amp;#39;s&amp;quot;, &amp;#39;sick&amp;#39;]
&amp;gt; set(a_list)
{&amp;quot;sheik&amp;#39;s&amp;quot;, &amp;#39;sick&amp;#39;, &amp;#39;The&amp;#39;, &amp;quot;sheep&amp;#39;s&amp;quot;, &amp;#39;sixth&amp;#39;}　# set()函数将字符串列表转为集合（去掉重复，且无序）
&amp;gt; a_string = &amp;#39;EAST IS EAST&amp;#39;
&amp;gt; set(a_string)
{&amp;#39;E&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;A&amp;#39;}　　　　# set()函数可以将字符串转为集合
&amp;gt; words = [&amp;#39;SEND&amp;#39;, &amp;#39;MORE&amp;#39;, &amp;#39;MONEY&amp;#39;]
&amp;gt; &amp;#39;&amp;#39;.join(words)
&amp;#39;SENDMOREMONEY&amp;#39;　　# &amp;#39;&amp;#39;.join(words)将字符串列表拼接成一个字符串
&amp;gt; set(&amp;#39;&amp;#39;.join(words))
{&amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;N&amp;#39;} # 先拼接字符串，先后转为集合（去掉重复的字母）
&amp;gt; unique_characters = set(&amp;#39;&amp;#39;.join(words)) # 找到了题目提供不同字符的集合
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;断言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python中assert语句用作断言。例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert 1 + 1 == 2  # True
assert 1 + 1 == 3  # AssertionError
assert len(unique_characters) &amp;lt;= 10, &amp;#39;Too many letters&amp;#39; # 出现AssertionError，打印&amp;quot;Too many letters&amp;quot;因为数字只有０－９ 10个数字，如果字母大于10,肯定是无解的
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;生成器表达式&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; unique_characters = { &amp;#39;E&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;N&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;Y&amp;#39;}
&amp;gt; gen = (ord(c) for c in unique_characters)  # 生成器表达式类似一个yield值的匿名函数
&amp;gt; gen　　# 生成器表达式返回迭代器
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7f74c9f02938&amp;gt;　
&amp;gt; next(gen)       # 调用next(gen)返回迭代器的下一个值
68
&amp;gt; next(gen)    
69
&amp;gt; tuple(ord(c) for c in unique_characters) # 将生成器表达式ord(c) for c in unique_characters传递给tiple()，生成一个元组
(68, 69, 77, 89, 82, 83, 79, 78)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;使用生成器表达式取代列表解析可以同时节省cpu和内存，如果构造一个列表的目的仅仅是传递给别的函数（比如传递给tuple或set()),推荐使用生成器表达式替代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成器函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ord_map(a_string):
    for c in a_string:
        yield ord(c)
gen = ord_map(unique_characters)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成器表达式功能相同，但更紧凑&lt;/p&gt;
&lt;h3&gt;计算排列&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;perms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;# permutations()函数接受一个序列(3个元素的列表，和排列的元素的数目）函数返回一个迭代器，可以在for循环使用它&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;# [1,2,3]取２个的第一个排列是（１，2)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 排列是有序的&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;StopIteration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;permutaitons()函数可以接受任何序列，甚至是字符串。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;perms = itertools.permutations(&amp;#39;ABC&amp;#39;, 3)　# 字符串&amp;#39;ABC&amp;#39;和列表[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;]是等价的
&amp;gt; for string in perms:
...     print(string)
...

(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;)
(&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;)
(&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;)
(&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;)
(&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;)
(&amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;)
&amp;gt; list(itertools.permutations(&amp;#39;ABC&amp;#39;, 3))　# permutaitons()函数总是返回迭代器，将这个迭代器传给内建list()函数接收排列
[(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;itertools模块中其他有意思的方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; list(itertools.product(&amp;#39;ABC&amp;#39;, &amp;#39;123&amp;#39;))　# itertools.product()函数返回包含两个序列的笛卡尔乘积的迭代器
[(&amp;#39;A&amp;#39;, &amp;#39;1&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;3&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;1&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;3&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;1&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;3&amp;#39;)]
&amp;gt; list(itertools.combinations(&amp;#39;ABC&amp;#39;, 2)) # itertools.combinations()函数返回包含给定序列的给定长度的所有组合的迭代器
[(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;)]
&amp;gt; names = list(open(&amp;#39;favorite-people.text&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;))　# 这个表达式将文本内容以一行一行组成的列表返回
&amp;gt; names
[&amp;#39;Dora\n&amp;#39;, &amp;#39;Ethan\n&amp;#39;, &amp;#39;Wesley\n&amp;#39;, &amp;#39;John\n&amp;#39;, &amp;#39;Anne\n&amp;#39;, &amp;#39;Mike\n&amp;#39;, &amp;#39;Chris\n&amp;#39;, &amp;#39;Sarah\n&amp;#39;, &amp;#39;Alex\n&amp;#39;, &amp;#39;Lizzie\n&amp;#39;]
&amp;gt; names = [name.rstrip() for name in names]　# 通过rstrip字符串方法移除每行的空白
&amp;gt; names
[&amp;#39;Dora&amp;#39;, &amp;#39;Ethan&amp;#39;, &amp;#39;Wesley&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Anne&amp;#39;, &amp;#39;Mike&amp;#39;, &amp;#39;Chris&amp;#39;, &amp;#39;Sarah&amp;#39;, &amp;#39;Alex&amp;#39;, &amp;#39;Lizzie&amp;#39;]
&amp;gt; names=sorted(names)　# 进行排列
&amp;gt; names
[&amp;#39;Alex&amp;#39;, &amp;#39;Anne&amp;#39;, &amp;#39;Chris&amp;#39;, &amp;#39;Dora&amp;#39;, &amp;#39;Ethan&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Lizzie&amp;#39;, &amp;#39;Mike&amp;#39;, &amp;#39;Sarah&amp;#39;, &amp;#39;Wesley&amp;#39;]
&amp;gt; names = sorted(names, key=len)　# 通过key参数定义排序规则
&amp;gt; names
[&amp;#39;Alex&amp;#39;, &amp;#39;Anne&amp;#39;, &amp;#39;Dora&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Mike&amp;#39;, &amp;#39;Chris&amp;#39;, &amp;#39;Ethan&amp;#39;, &amp;#39;Sarah&amp;#39;, &amp;#39;Lizzie&amp;#39;, &amp;#39;Wesley&amp;#39;]
&amp;gt; groups = itertools.groupby(names, len)　# 接收一个序列和一个key函数，返回一个生成二元组的迭代器，每个二元组包含key_functoion(each item)的结果和另一个包含着所有共享key结果的元素的迭代器
&amp;gt; groups
&amp;lt;itertools.groupby object at 0x7f6788c8da48&amp;gt;
&amp;gt; list(groups)
[(4, &amp;lt;itertools._grouper object at 0x7f6788c86da0&amp;gt;), (5, &amp;lt;itertools._grouper object at 0x7f6788c86dd8&amp;gt;), (6, &amp;lt;itertools._grouper object at 0x7f6788c86e10&amp;gt;)]　# 调用list()函数会耗尽这个迭代器，将迭代器中所以元素生成了list。迭代器一但使用，就无法重新开始
&amp;gt; groups = itertools.groupby(names, len)　# 重新生成迭代器,会分别生成４个字母的迭代器，５个字母的迭代器，６个字母的迭代器
&amp;gt; for name_length, name_iter in groups:　
...     print(&amp;#39;Names with {0:d} letters:&amp;#39;.format(name_length))
...     for name in name_iter:
...         print(name)
... 　# 
Names with 4 letters:
Alex
Anne
Dora
John
Mike
Names with 5 letters:
Chris
Ethan
Sarah
Names with 6 letters:
Lizzie
Wesley
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;itertools.groupby()只有当输入序列已经按分组函数排过序才能正常工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; list(range(0,3))
[0, 1, 2]
&amp;gt; list(range(10,13))
[10, 11, 12]
&amp;gt; list(itertools.chain(range(0,3), range(10,13)))　# itertools.chain()函数接受两个迭代器，返回一个迭代器，它接受任何数目的迭代器，并把他们按传入顺序串在一起
[0, 1, 2, 10, 11, 12]
&amp;gt; list(zip(range(0,3), range(10,13)))　# zip函数：接收任何数目的序列，然后返回一个迭代器，其第一个元素是每个序列的第一个元素组成的数组，以此类推
[(0, 10), (1, 11), (2, 12)]
&amp;gt; list(zip(range(0,3), range(10,14)))　# zip在到达最短序列结尾的时候停止。
[(0, 10), (1, 11), (2, 12)]
&amp;gt; list(itertools.zip_longest(range(0,3), range(10,14)))# itertools.zip_longest()函数到达最长的序列的结尾时停止，空的填入None
[(0, 10), (1, 11), (2, 12), (None, 13)]
&amp;gt; characters = (&amp;#39;S&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;N&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;Y&amp;#39;)
&amp;gt; guess = (&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;)
&amp;gt; tuple(zip(characters, guess)) #  zip将字母列表，数字列表对应生成一组组字母数字对
((&amp;#39;S&amp;#39;, &amp;#39;1&amp;#39;), (&amp;#39;M&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;E&amp;#39;, &amp;#39;0&amp;#39;), (&amp;#39;D&amp;#39;, &amp;#39;3&amp;#39;), (&amp;#39;O&amp;#39;, &amp;#39;4&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;5&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;6&amp;#39;), (&amp;#39;Y&amp;#39;, &amp;#39;7&amp;#39;))
&amp;gt; dict(zip(characters, guess))　# 将字母列表、数字列表生成对应键值对的字典
{&amp;#39;S&amp;#39;: &amp;#39;1&amp;#39;, &amp;#39;E&amp;#39;: &amp;#39;0&amp;#39;, &amp;#39;N&amp;#39;: &amp;#39;5&amp;#39;, &amp;#39;D&amp;#39;: &amp;#39;3&amp;#39;, &amp;#39;O&amp;#39;: &amp;#39;4&amp;#39;, &amp;#39;Y&amp;#39;: &amp;#39;7&amp;#39;, &amp;#39;R&amp;#39;: &amp;#39;6&amp;#39;, &amp;#39;M&amp;#39;: &amp;#39;2&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;算术谜题解决方法使用这个方法对每一个可能的解法创建一个将谜题中字母映射到解法中的数字的字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;characters = tuple(ord(c) for c in sorted_characters)
digits = tuple(ord(c) for c in &amp;#39;0123456789&amp;#39;)
...
for guess in iteratools.permutations(digits, len*characters)):
    ...
    equation = puzzle.translate(dict(zip(characters, guess)))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;translate方法&lt;/h3&gt;
&lt;p&gt;python字符串方法有很多。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; translation_table = {ord(&amp;#39;A&amp;#39;): ord(&amp;#39;O&amp;#39;)}　# 字符串翻译从一个转换表开始，转换表是将一个字符映射到另一个字符的字典(一个字节映射到另一个）
&amp;gt; translation_table　# python3字节是整型数，ord()函数返回字符的ASCII码。
{65: 79}
&amp;gt; &amp;#39;MARK&amp;#39;.translate(translation_table)# 一个字符串的translate()方法接收一个转换表，并用它来转换该字符串。
&amp;#39;MORK&amp;#39;
&amp;gt; characters = tuple(ord(c) for c in &amp;#39;SMEDONRY&amp;#39;)# 使用生成器表达式，可以快速的计算字符串每个字符的字节值
&amp;gt; characters
(83, 77, 69, 68, 79, 78, 82, 89)
&amp;gt; guess = tuple(ord(c) for c in &amp;#39;91570682&amp;#39;)# 使用另一个生成器表达式，快速的计算出字符串中每个数字的字节值，计算结果guess，正好是alphametics.solve()函数中iteratools.permutations()函数返回值的格式
&amp;gt; guess
(57, 49, 53, 55, 48, 54, 56, 50)
&amp;gt; translation_table = dict(zip(characters, guess))#通过characters和guesszipping出来的元素对序列构造出的字典作为转换表，正是alphametics.solve()在for循环里面干的事情
&amp;gt; translation_table
{82: 56, 83: 57, 68: 55, 69: 53, 89: 50, 77: 49, 78: 54, 79: 48}
&amp;gt; &amp;#39;SEND + MORE == MONEY&amp;#39;.translate(translation_table)# 最后我们将转换表传递给原始字符串的translate（）方法。将字符串中的每个字母转换为相应的数字（基于characters中字母和guess中的数字）
&amp;#39;9567 + 1085 == 10652&amp;#39;
&amp;gt; eval(&amp;#39;9567 + 1085 == 10652&amp;#39;)
True
&amp;gt; eval(&amp;#39;&amp;quot;A&amp;quot; + &amp;quot;B&amp;quot;&amp;#39;)
&amp;#39;AB&amp;#39;
&amp;gt; eval(&amp;#39;&amp;quot;MARK&amp;quot;.translate({65:79})&amp;#39;)
&amp;#39;MORK&amp;#39;
&amp;gt; eval(&amp;#39;&amp;quot;AAAAA&amp;quot;.count(&amp;quot;A&amp;quot;)&amp;#39;)
5
&amp;gt; eval(&amp;#39;[&amp;quot;*&amp;quot;] * 5&amp;#39;)
[&amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;]
&amp;gt; x=5
&amp;gt; eval(&amp;quot;x * 5&amp;quot;)
25
&amp;gt; eval(&amp;quot;pow(x,2)&amp;quot;)
25
&amp;gt; import math
&amp;gt; eval(&amp;quot;math.sqrt(x)&amp;quot;)
2.23606797749979
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;eval()接受的表达式可以引用evel()之外定义的全局变量，以及函数、模块&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;subprocess.getoutput(&amp;#39;ls ~&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;abc.xml&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;AndroidStudioProjects&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;avocado&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;cpu.cfs_quota_us~&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Desktop&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Documents&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;install.txt&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Linux-version-test-result-201701181301.tar.gz&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;rpmbuild&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;test_brain&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;test.brain&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;test.log&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;下载&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;subprocess模块允许执行任何shell命令并以字符串形式获得输出&lt;/p&gt;
&lt;p&gt;总的来说，这个程序通过暴力解决字母数字算术谜题，通过穷举所有可能。&lt;/p&gt;
&lt;p&gt;１通过re.findall()函数找到谜题中所有的字母&lt;/p&gt;
&lt;p&gt;2.使用集合和set()函数找到谜题出现的所有不同的字母&lt;/p&gt;
&lt;p&gt;3.使用assert语句检查是否有超过１０个不同的字母，超过则无解&lt;/p&gt;
&lt;p&gt;4.通过一个生成器对象将字符转换成对应的ascii码值&lt;/p&gt;
&lt;p&gt;5.使用itertools.permutations()函数计算所有可能的解法&lt;/p&gt;
&lt;p&gt;6.使用translate()字符串方法将所有可能的解转换成python表达式&lt;/p&gt;
&lt;p&gt;7.使用eval()函数通过求值python表达式来检验解法&lt;/p&gt;
&lt;p&gt;8.返回第一个求值结果为True的解法&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 06 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-06:2014/05/06/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(三）</title><link>http://king32783784.github.io/2014/05/05/python/</link><description>&lt;p&gt;&lt;strong&gt;Tips15&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python中所有正则表达式相关功能都包含在re模块中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;^匹配字符串开始　$匹配字符串结尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;re模块最基本的方法是search()函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pattern = '^M?M?M?&lt;span class="math"&gt;\('  # ^表示从字符串开头匹配　M?重复３次，匹配0-3次Ｍ字符，\)&lt;/span&gt;　匹配字符传结束　？表示匹配是可选的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pattern = '^M?M?M?(CM|CD|D?C?C?C?)$' # "|"表示是可选的，一旦CM匹配成功，后面的均被忽略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;{N,M} {1,4} 匹配１到４个前面的模式　
  pattern = '^M{0,3}&lt;span class="math"&gt;\(' 和前面的 '^M?^M?^m?\)&lt;/span&gt;'等同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python允许使用松散正则表达式。特点：空白符被忽略。空格、制表符和回车不会被匹配，匹配时需要加转义字符“\"
  注释信息被忽略，＃开头的注释被忽略
　例如：
　pattern = '''
　    ^ 　　　                           # 字符开始
　    Ｍ{0,3}                           # 0-3个Ｍ
     (CM|CD|D?C{0,3})                  # CM 或CD 或D?0-3个C(可选）
      $                                # 字符结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\d匹配所有0-9的数字 \D匹配除了数字外的所有字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\d{3}  # 匹配３个数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;phonePattern = re.compile(r'^(\d{3})\D+(\d{3})\D+(\d{4})\D+(\D+(\d+)$')&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(\d{3})  3个数字的分组　\D+　\D匹配数字以外的字符，　+一个或多个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;phonePattern = re.compile(r'^(\d{3}\D&lt;em&gt;(\d{3})\D&lt;/em&gt;(\d{4})\D&lt;em&gt;(\d&lt;/em&gt;)$') +换成了*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;phonePattern = re.compile(r'^\D&lt;em&gt;(\d{3})\D&lt;/em&gt;(\d{3})\D&lt;em&gt;(\d{4})\D&lt;/em&gt;(\d*)$)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不明确字符串开始的地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;phonePattern = re.compile(r&amp;#39;(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;松散正则表达式会清晰一点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;phonePattern = re.compile(r&amp;#39;&amp;#39;&amp;#39;
    (\d{3})    # 先匹配３个数字（如８００）
    \D*        # 这个区域是任意非数字的字符如（&amp;quot;-&amp;quot;)
    (\d{3})     # 匹配三个数字如（555)
    \D*        #任意非数字的字符
    (\d{4})    # 匹配４个数字如（1212)
    \D*        # 任意非数字的字符
    (\d*)      # 任何数字字符
    $          # 字符结束
    &amp;#39;&amp;#39;&amp;#39;, re.VERBOSE)

例如　phone.Pattern.search(&amp;#39;work 1-(800) 555.1212 #1234&amp;#39;).groups()
(&amp;#39;800&amp;#39;,&amp;#39;555&amp;#39;,&amp;#39;1212&amp;#39;,&amp;#39;1234&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Tips16&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\b 匹配一个单词边界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x? 匹配可选的x字符（匹配０个或１个x字符）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x* 匹配０个或多个x字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x+ 匹配１个或多个x   x{n,m} 匹配n-m个x  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(a|b|c) 匹配人一个a或b或c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(x)　这是一个组，会记忆匹配到的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips17&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[sxz] “s、x或z"其中一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;^ 非，　[^abc] 除了a、b、c以外的字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;re.sub()函数执行基于正则表达式的字符串替换，　如re.sub('y$', 'ies', noun)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips18&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在动态函数中使用外部参数值的技术称为闭合 [closures]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yield命令不是一个普通的函数。它是一次生成一个值的特殊类型函数。可以将其视为可恢复函数。调用该函数将返回一个可用于生成连续x值的生成器【Generator】
yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 05 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-05:2014/05/05/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(二）</title><link>http://king32783784.github.io/2014/05/03/python/</link><description>&lt;p&gt;&lt;strong&gt;Tips11&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字典是无序的键值对, {};dict["键"]="值",反之不成立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字典中可以任意扩展，但键是唯一的；对字典中的键重新赋值，新值会替代旧值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字典的值可以为任何数据类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类似列表、集合，len()将返回字典中键的数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in 判断指定的键是否在字典中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空字典为假，非空为真；None是一个特殊常量，是一个空值。None不等同于0; None为假，not None为真&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips12&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遍历一个序列时，使用enumerate()函数可以同时得到索引和对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时遍历两个或更多的序列，使用zip()函数可以成对读取元素.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要反向遍历一个序列，首先正向生成这个序列，然后调用 reversed() 函数。 for i in reversed(xrange(1,10,2))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要按排序顺序循环一个序列，请使用sorted()函数，返回一个新的排序的列表，同时保留源不变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for f in sorted(set(basket)):
...     print f&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遍历字典时，使用iteritems()方法可以同时得到键和对应的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips13&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OS模块包含非常多的函数用于操作系统的api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;os.getcwd()函数获取当前目录。os.chdir()改变当前工作目录　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;os.path模块包含了操作文件名和目录名的函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;os.path.join()可以用于构造路径，os.path.join("/home", "isoft_lp")；os.path.expanduser()
用来将包含~符号（表示当前用户Home目录）的路径扩展为完整的路径　os.path.expanduser('~')&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;split函数分割一个完整路径并返回目录和文件名，os.path.splitext()函数分割一个文件名，返回文件名和扩展名，os.path.splitext("hello.py"),返回"hello"和".py"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glob模块是获得目录内容的一个模块，可以使用shell风格的通配符；glob模块接收一个通配符并返回匹配的文件和路径。如glob.glob("*.py")&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;os.stat()函数返回一个包含多种文件元信息的对象，包括以下信息（posix.stat_result(st_mode=33261, st_ino=2952447, st_dev=2061, st_nlink=1, st_uid=0, st_gid=0, st_size=1911, st_atime=1488354105, st_mtime=1484125146, st_ctime=1484125146)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;time是时间相关的模块，time.localtime()可以将纪元时间转为通用格式时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;os.path.realpath()函数可以获得文件的绝对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表解析可以过滤列表，生成比原列表短的结果列表如过滤当前目录容量大于1000的文件&lt;/p&gt;
&lt;p&gt;[f for f in glob.glob('*.py') if os.stat(f).st_size &amp;gt; 1000]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字典解析和列表解析类似，生成字典。例如：&lt;/p&gt;
&lt;p&gt;metadata_dict = {f:os.stat(f) for f in glob.glob('*.py')}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交换字典的键和值：&lt;/p&gt;
&lt;p&gt;{value:key for key, value in a_dict.items()}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合的解析方法和字典类似，不同的地方是结合只有值，没有键值对，例如
　　a = {0,1,2}
　　{x ** 2 for x in a}，集合元素求平方
　　{x for x in a if x % 2 == 0}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips14&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unicode编码使用4字节的数字来表达每个字母、符号或文字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python３支持把值格式化成字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;splitlines()方法以多行字符串作为输入，返回一个字符串组成的列表，列表的元素即为原来的单行字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lower（）方法把大写转为小写，upper()小写转换为大写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;count()方法对字符串找那个指定的子串进行计数；split()方法使用一个参数，即指定的分隔符，然后根据分隔符将字符串分割为字符串列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串分片跟列表的分片原理是一样的，可以指定索引值进行分片。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字节即字节；字符是一种抽象。一个不可变的unicode编码的字符序列叫做string. 一串０到255之间的数字组成的序列叫bytes对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python2中.py文件默认的编码方式为ASCII, Python3编码默认为utf-8;一般字符编码的重载声明:# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 03 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-03:2014/05/03/python/</guid><category>Python-Tips</category></item><item><title>Python-Tips(一）</title><link>http://king32783784.github.io/2014/05/01/python/</link><description>&lt;p&gt;&lt;strong&gt;Tips01&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过使用sys.path.insert(0,new_path)，你可以插入一个新的目录到sys.path列表的第一项，从而使其出现在Python搜索路径的开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips02&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python中一切皆对象，字符串、列表、函数、类、类的实例、模块等都是对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips03&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python使用try...except块来处理异常&lt;/p&gt;
&lt;p&gt;try:
     import hello
except ImportError:
     print("hello")&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips04&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 中所有东西都是区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips05&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 重要的内置数据类型包括布尔型、数值型、字符型、字节、列表、元组、集合、字典；模块、函数、类、方法、文件&lt;/li&gt;
&lt;li&gt;可以用type查看类型&lt;/li&gt;
&lt;li&gt;isinstance() 判断是否为给定类型，如isinstance(1, int)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips06&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/运算符执行浮点除法（python3中）&lt;/li&gt;
&lt;li&gt;// 运算符执行古怪的整数除法,用之前最好先判断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 支持大部分数学运算，但需要导入对应模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips08&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列表是以类的形式实现的，列表支持多种方法进行操作，如append(),extend(), insert()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;append()的参数可以是任何类型的数据，追加到原列表，extend()，参数必须是列表，类似于两个列表的拼接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;count返回列表中元素出现次数， index()返回列表元素的索引（同样元素多个的情况下，只返回第一个元素）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表中不会存在空隙。del用于进行索引删除，remove用于元素删除（多个同样删除第一个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pop()删除列表中最后的元素，并返回所删除的值，pop[弹出]删除并返回指定位置的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空列表为假，非空为真&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enumerate()函数可以同时得到索引和对应的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips09&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;元组不可变的列表；元素用()闭合，列表为[]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组切片和列表一样，切片可以得到新的元组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可变更的特点，元组不支持append、insert、remove、pop等方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组比列表快；可以对数据进行“写保护”，元组可以作为字典键（不可变）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组可以转换为列表-list()，列表也可以转换成元组-tuple() 转换：生成对应的元组或列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空元组为加，非空为真；单元素元组，单元数后加","，如a=(1) a为int型；a=(1,) a为tuple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组可以一次赋多个值，如a=(1,2,3) x,y,z = a x=1,y=2,z=3 内建的range()函数构造了一个整数序列,如x,y,x = range(3) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips10&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集合可以包含任何元素的数据，{}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用set函数，将列表创建为集合，集合是无序的;用set()可以创建空集合，a=set(),因为{}是一个字典&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add()方法可以扩展集合，接收任何参数（但集合是唯一值的，相同值只能有一份）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update()方法效果是合并两个集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discard()删除集合的元素（接受一个单值作为参数）；remove（）类似，但remove删除元素不存在时会触发KeyError&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pop()方法从集合删除元素，并返回对应值，集合是无序的，所以只能随机弹出;空集合弹出会触发KeyError&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clear()方法可以将集合清空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in:判断是否集合是否存在该元素；　union()合并两个集合；　intersection()返回两个集合的交集；difference()返回两个集合的补集（a出现，b没有）；　symmetric_difference()返回只在其中一个集合出现的元素; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;issubset()判断是否为子集，issuperset()判断是否为超集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和列表、元组一样，空集合为假，非空为真&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 01 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-05-01:2014/05/01/python/</guid><category>Python-Tips</category></item><item><title>Reboot test脚本</title><link>http://king32783784.github.io/2014/03/01/stablity/</link><description>&lt;p&gt;为了验证操作系统启动的稳定性，需要进行500次启动测试，便写了脚本实现。&lt;/p&gt;
&lt;p&gt;脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HOME=`pwd`
sleep 15
desktop_x86_4x(){
if [ ! -f /etc/reboot.sh ];then
    cp -rf $HOME/reboot.sh /etc/
fi
if grep &amp;quot;reboot.sh&amp;quot; /etc/profile &amp;gt; /dev/null;
then
   break;
else
   echo &amp;quot;/bin/sh /etc/reboot.sh &amp;amp;&amp;quot; &amp;gt;&amp;gt; /etc/profile
fi
if id rebootuser &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then
break
else
useradd rebootuser
passwd rebootuser &amp;lt;&amp;lt; TEST
abc123
abc123
TEST
echo &amp;quot;[Autologin]&amp;quot; &amp;gt;&amp;gt; /etc/sddm.conf
echo &amp;quot;Session=plasma.desktop&amp;quot; &amp;gt;&amp;gt; /etc/sddm.conf
echo &amp;quot;User=rebootuser&amp;quot; &amp;gt;&amp;gt; /etc/sddm.conf
fi
}

if id rebootuser &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then
    break
else
    desktop_x86_4x
fi

if [ ! -f /etc/tmpbash ];then
    echo $1 &amp;gt;&amp;gt; /etc/tmpbash
fi

if [ ! -f /home/rebootuser/reboot.log ]; then
    echo &amp;quot;Total=$1 , Times=0 , start at `date`&amp;quot; &amp;gt;&amp;gt; /home/rebootuser/reboot.log
    chmod 777 /home/rebootuser/reboot.log
fi

times=`cat /etc/tmpbash`

n=`cat /home/rebootuser/reboot.log | awk -F, &amp;#39;{print $2}&amp;#39; | awk -F= &amp;#39;{print $2}&amp;#39; | tail -1`
if (( $n &amp;lt; $times ));then
    N=$(($n + 1))
    echo &amp;quot; Total=$times , Times=$N , reboot at `date`&amp;quot; &amp;gt;&amp;gt; /home/rebootuser/reboot.log
    sleep 60
    reboot
else
    rm /etc/reboot.sh
    sed -i &amp;#39;$d&amp;#39; /etc/profile
fi
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 01 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-03-01:2014/03/01/stablity/</guid><category>shell</category></item><item><title>diff 和 patch</title><link>http://king32783784.github.io/2013/11/01/patch/</link><description>&lt;p&gt;如果hack了开源代码，为了方便分享（如提交Bug）或自己留存使用，一般都要制作一个补丁（Patch）。在从源码安装软件时，也难免要应用些别人做好的补丁。本文介绍如何制作和应用补丁。&lt;/p&gt;
&lt;p&gt;制作补丁和打补丁分别需要用到diff和patch。&lt;/p&gt;
&lt;h4&gt;diff&lt;/h4&gt;
&lt;p&gt;diff可以比较两个东西，并可同时记录下二者的区别。制作补丁时的一般用法和常见选项为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff 【选项】 源文件（夹） 目的文件（夹）&lt;/span&gt;
&lt;span class="gd"&gt;-r&lt;/span&gt;
递归。设置后diff会将两个不同版本源代码目录中的所有对应文件全部都进行一次比较，包括子目录文件。
&lt;span class="gd"&gt;-N&lt;/span&gt;
选项确保补丁文件将正确地处理已经创建或删除文件的情况。
&lt;span class="gd"&gt;-u&lt;/span&gt;
输出每个修改前后的3行，也可以用-u5等指定输出更多上下文。
&lt;span class="gd"&gt;-E, -b, -w, -B, --strip-trailing-cr&lt;/span&gt;
忽略各种空白，可参见文档，按需选用。
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;patch&lt;/h4&gt;
&lt;p&gt;patch的作用则是将diff记录的结果（即补丁）应用到相应文件（夹）上。最常见的用法为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;patch -pNUM &amp;lt;patchfile&amp;gt;
-p Num
忽略几层文件夹，随后详解。
-E
选项说明如果发现了空文件，那么就删除它
-R
取消打过的补丁。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了解释 -p 参数，需要看看如下patch文件片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- test1       2017-03-02 16:58:55.085518422 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ test2       2017-03-02 16:59:03.306461415 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,5 +1,4 @@&lt;/span&gt;
&lt;span class="gd"&gt;-test1&lt;/span&gt;
&lt;span class="gd"&gt;-test1&lt;/span&gt;
&lt;span class="gd"&gt;-test1&lt;/span&gt;
&lt;span class="gd"&gt;-test1&lt;/span&gt;
&lt;span class="gd"&gt;-&lt;/span&gt;
&lt;span class="gi"&gt;+test2&lt;/span&gt;
&lt;span class="gi"&gt;+test2&lt;/span&gt;
&lt;span class="gi"&gt;+test2&lt;/span&gt;
&lt;span class="gi"&gt;+test2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;应用&lt;/h4&gt;
&lt;p&gt;利用以上命令，处理单个文件补丁的方法：&lt;/p&gt;
&lt;h5&gt;产生补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -uN from-file to-file &amp;gt;to-file.patch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;打补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;patch -p0 &amp;lt; to-file.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;取消补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;patch -RE -p0 &amp;lt; to-file.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对整个文件夹打补丁的情况：&lt;/p&gt;
&lt;h5&gt;产生补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -uNr  from-docu  to-docu  &amp;gt;to-docu.patch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;打补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd to-docu
patch -p1 &amp;lt; to-docu.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;取消补丁&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;patch -R -p1 &amp;lt;to-docu.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，使用版本控制工具时，可以直接用svn diff或git diff生成补丁文件。&lt;/p&gt;
&lt;p&gt;值得一提的是，由于应用补丁时的目标代码和生成补丁时的代码未必相同，打补丁操作可能失败。补丁失败的文件会以.rej结尾，下面命令可以找出所有rej文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &amp;#39;*.rej&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;patch文件构成&lt;/h4&gt;
&lt;p&gt;补丁文件里到底存储了哪些信息呢？看看这个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- test0       2013-08-18 09:12:01.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ test1       2013-08-18 09:13:09.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
111111
&lt;span class="gd"&gt;-111111&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
111111
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;补丁头&lt;/h5&gt;
&lt;p&gt;补丁头是分别由---/+++开头的两行，用来表示要打补丁的文件。---开头表示旧文件，+++开头表示新文件。
一个补丁文件中的多个补丁
一个补丁文件中可能包含以---/+++开头的很多节，每一节用来打一个补丁。所以在一个补丁文件中可以包含好多个补丁。&lt;/p&gt;
&lt;h5&gt;块&lt;/h5&gt;
&lt;p&gt;块是补丁中要修改的地方。它通常由一部分不用修改的东西开始和结束。他们只是用来表示要修改的位置。他们通常以@@开始，结束于另一个块的开始或者一个新的补丁头。&lt;/p&gt;
&lt;p&gt;块的缩进&lt;/p&gt;
&lt;p&gt;块会缩进一列，而这一列是用来表示这一行是要增加还是要删除的。
块的第一列&lt;/p&gt;
&lt;p&gt;+号表示这一行是要加上的。-号表示这一行是要删除的。没有加号也没有减号表示这里只是引用的而不需要修改。&lt;/p&gt;
&lt;h4&gt;实例分析&lt;/h4&gt;
&lt;p&gt;单文件补丁&lt;/p&gt;
&lt;p&gt;设当前目录有文件 test0：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;111111
111111
111111
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和文件test1：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;222222
111111
222222
111111
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用diff创建补丁test1.patch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -uN test0 test1 &amp;gt; test1.patch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为是单个文件，故不需要 -r 选项。此命令得到如下补丁：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- test0       2006-08-18 09:12:01.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ test1       2006-08-18 09:13:09.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,3 +1,4 @@&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
111111
&lt;span class="gd"&gt;-111111&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
111111
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要应用补丁，只需：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ patch -p0 &amp;lt; test1.patch
patching file test0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时test0就和test1一样了。&lt;/p&gt;
&lt;p&gt;如果要取消补丁做出的更改，恢复旧版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ patch -RE -p0 &amp;lt; test1.patch
patching file test0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文件夹补丁
设有如下环境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--prj0/
    test0
    prj0name
--prj1/
    test1
    prj1name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;prj0/prj0name内容为如下三行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--------
prj0/prj0name
--------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;prj1/prj1name内容为如下三行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--------
prj1/prj1name
--------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 diff -uNr 创建补丁，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -uNr prj0 prj1 &amp;gt; prj1.patch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到的patch文件为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -uNr prj0/prj0name prj1/prj0name&lt;/span&gt;
&lt;span class="gd"&gt;--- prj0/prj0name       2006-08-18 09:25:11.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ prj1/prj0name       1970-01-01 08:00:00.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,3 +0,0 @@&lt;/span&gt;
&lt;span class="gd"&gt;---------&lt;/span&gt;
&lt;span class="gd"&gt;-prj0/prj0name&lt;/span&gt;
&lt;span class="gd"&gt;---------&lt;/span&gt;
&lt;span class="gh"&gt;diff -uNr prj0/prj1name prj1/prj1name&lt;/span&gt;
&lt;span class="gd"&gt;--- prj0/prj1name       1970-01-01 08:00:00.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ prj1/prj1name       2006-08-18 09:26:36.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,3 @@&lt;/span&gt;
&lt;span class="gi"&gt;+---------&lt;/span&gt;
&lt;span class="gi"&gt;+prj1/prj1name&lt;/span&gt;
&lt;span class="gi"&gt;+---------&lt;/span&gt;
&lt;span class="gh"&gt;diff -uNr prj0/test0 prj1/test0&lt;/span&gt;
&lt;span class="gd"&gt;--- prj0/test0  2006-08-18 09:23:53.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ prj1/test0  1970-01-01 08:00:00.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,3 +0,0 @@&lt;/span&gt;
&lt;span class="gd"&gt;-111111&lt;/span&gt;
&lt;span class="gd"&gt;-111111&lt;/span&gt;
&lt;span class="gd"&gt;-111111&lt;/span&gt;

&lt;span class="gh"&gt;diff -uNr prj0/test1 prj1/test1&lt;/span&gt;

&lt;span class="gd"&gt;--- prj0/test1  1970-01-01 08:00:00.000000000 +0800&lt;/span&gt;
&lt;span class="gi"&gt;+++ prj1/test1  2006-08-18 09:26:00.000000000 +0800&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,4 @@&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
&lt;span class="gi"&gt;+111111&lt;/span&gt;
&lt;span class="gi"&gt;+222222&lt;/span&gt;
&lt;span class="gi"&gt;+111111&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要应用此补丁，则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
prj0  prj1  prj1.patch
$ &lt;span class="nb"&gt;cd&lt;/span&gt; prj0
$ patch -p1 &amp;lt; ../prj1.patch
patching file prj0name
patching file prj1name
patching file test0
patching file test1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时可用ls看到打补丁后的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
prj1name  test1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;类似的，如果要回滚补丁操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ patch -R -p1 &amp;lt; ../prj1.patch
patching file prj0name
patching file prj1name
patching file test0
patching file test1
$ ls
prj0name  test0
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Fri, 01 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-11-01:2013/11/01/patch/</guid><category>Linux</category></item><item><title>RPM打包与SPEC分析（二）</title><link>http://king32783784.github.io/2013/10/13/rpm/</link><description>&lt;p&gt;本文大体描述一下rpm打包过程和一些实践。&lt;/p&gt;
&lt;h3&gt;一.RPM制作流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.计划做什么rpm包。软件的？库的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.收集原材料，即收集源码包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.如果需要打补丁，收集补丁文件。此布骤不是必须&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.确定依赖关系包&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;------------------  上述动作可由我们手动编译一次软件来确定  -------------------&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;5.开始动手制作RPM包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.1设定好目录结构，我们在这些目录中制作我们的RPM包，我们需要下列目录&lt;/p&gt;
&lt;p&gt;BUILD 源代码解压后的存放目录
RPMS    制作完成后的RPM包存放目录，里面有与平台相关的子目录
SOURCES 收集的源材料，补丁的存放位置
SPECS   SPEC文件存放目录
SRMPS   存放SRMPS生成的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.2 把源材料放到正确的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.3 创建spec文件，这是纲领文件，rpmbuild命令根据spec文件来制作合适的rpm包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.4 制作src或二进制rpm包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6.测试制作的PRM包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.为RPM包签名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;二.RPM包制作实例&lt;/h3&gt;
&lt;p&gt;1.可以通过rpmbuild --showrc | grep topdir 查看工作目录： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-14: _builddir  %{_topdir}/BUILD 
-14: _buildrootdir  %{_topdir}/BUILDROOT 
-14: _rpmdir    %{_topdir}/RPMS 
-14: _sourcedir %{_topdir}/SOURCES 
-14: _specdir   %{_topdir}/SPECS 
-14: _srcrpmdir %{_topdir}/SRPMS 
-14: _topdir    %{getenv:HOME}/rpmbuild
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.工作目录可以进行自定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rpmmacros&lt;/span&gt; 
&lt;span class="nf"&gt;%_topdir&lt;/span&gt;        &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ibuler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rpmbuild&lt;/span&gt;    &lt;span class="err"&gt;##目录可以自定义&lt;/span&gt;

&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;rpmbuild&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.在topdir下建立需要的目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/rpmbuild  
 mkdir -pv {BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.把收集的源码放到SOURCES下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp stress-1.0.4.tar.gz SOURCES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.在SPECS下建立重要的spec文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd SPECS 
vi stress.spec #内容见文末
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6.用rpmbuild命令制作rpm包，rpmbuild命令会根据spec文件来生成rpm包 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpmbuild  
-ba 既生成src.rpm又生成二进制rpm 
-bs 只生成src的rpm 
-bb 只生二进制的rpm 
-bp 执行到pre 
-bc 执行到 build段 
-bi 执行install段 
-bl 检测有文件没包含
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以一步步试，先rpmbuild -bp ,再-bc 再-bi 如果没问题，rpmbuild -ba 生成src包与二进制包吧&lt;/p&gt;
&lt;p&gt;7.安装测试有没有问题，能否正常安装运行，能否正常升级，卸载有没有问题&lt;/p&gt;
&lt;p&gt;8.如果没问题为rpm包签名吧，防止有人恶意更改&lt;/p&gt;
&lt;p&gt;到此整个流程完毕&lt;/p&gt;
&lt;h3&gt;附stress.spec文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stress&lt;/span&gt;
&lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0.4&lt;/span&gt;
&lt;span class="nl"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stress&lt;/span&gt;

&lt;span class="nl"&gt;License&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GPL&lt;/span&gt;
&lt;span class="nl"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stress&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="nl"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.stress.org/&lt;/span&gt;

&lt;span class="nl"&gt;BuildRequires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;

&lt;span class="nf"&gt;%description&lt;/span&gt;

&lt;span class="nf"&gt;%package&lt;/span&gt; &lt;span class="n"&gt;devel&lt;/span&gt;
&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Requires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;%description&lt;/span&gt; &lt;span class="n"&gt;devel&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devel&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;libraries&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
&lt;span class="n"&gt;developing&lt;/span&gt; &lt;span class="n"&gt;applications&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;

&lt;span class="nf"&gt;%prep&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;

&lt;span class="nf"&gt;%build&lt;/span&gt;
&lt;span class="nf"&gt;%configure&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt;

&lt;span class="nf"&gt;%install&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;%makeinstall&lt;/span&gt; &lt;span class="n"&gt;bindir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;%files&lt;/span&gt;
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;%{_mandir}/*/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="nf"&gt;%changelog&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Wed&lt;/span&gt; &lt;span class="n"&gt;Mar&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="n"&gt;penglee&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.0.4&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Rebuild&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;  &lt;span class="n"&gt;release&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-10-13:2013/10/13/rpm/</guid><category>Linux</category></item><item><title>RPM打包与SPEC分析（一）</title><link>http://king32783784.github.io/2013/10/09/rpm/</link><description>&lt;p&gt;本文主要分析spec文件的编写。&lt;/p&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;rpm是Red Hat包管理器，rpm 包有五种基本操作：安装、卸载、升级、查询、验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 ： rpm -i [options] file1.rpm ....&lt;/li&gt;
&lt;li&gt;卸载 ： rpm -e [options] pkg1&lt;/li&gt;
&lt;li&gt;升级 ： rpm -U [options] ....&lt;/li&gt;
&lt;li&gt;查询 ： rpm -q [options] ...&lt;/li&gt;
&lt;li&gt;验证： rpm -V [options] ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;spec文件规范&lt;/h3&gt;
&lt;p&gt;制作RPM的关键就是编写SPEC软件包描述文件。这个文件包含了软件包的诸多信息，如软件包的名字、版本、类别、说明摘要、创建时执行什么指令、安装时执行什么操作、以及软件包要包含哪些文件等等
个人理解，rpm包就是把手工安装软件进行了封装（类似一键安装或自动化安装）。&lt;/p&gt;
&lt;h4&gt;文件头&lt;/h4&gt;
&lt;p&gt;开头一般包含以下几个域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Summary ：用一句话概括软件尽量多的信息，方便以后查阅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name: 软件包的名字，最终RPM软件包读这个名字，再和版本号、release号进行拼接软件包名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Version: 软件版本号， 一般大的变动才会升级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release: 软件发布号， 比如小的变动、小的补丁可以进行+1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vendor: 软件开发者名字，不做强制要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copyright : 版权说明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group: 软件包分组，从属那个组，如core app等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source: 软件包的名字，如stress-1.0.4.tar.gz 可以使用Source1、Source2等多个，后面也可以使用%{source1}等引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BuildRoot:安装或编译时使用的“虚拟目录",考虑到多用户环境，一般%{_tmppath}/%{name}-%{version}-%{release}-root
或%{_tmppath}/%{name}-%{version}-%{release}-buildroot-%(%{__id_u} -n}
该参数非常重要，因为在生成rpm的过程中，执行make install时就会把软件安装到上述的路径中，在打包的时候，同样依赖“虚拟目录”为“根目录”进行操作。后面可使用$RPM_BUILD_ROOT 方式引用。
%description: 软件包详细说明，可以多行 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Patch: 补丁源码，可使用Patch1、Patch2等标识多个补丁，使用%patch0或%{patch0}引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefix: %{_prefix} 这个主要是为了解决今后安装rpm包时，并不一定把软件安装到rpm中打包的目录的情况。这样，必须在这里定义该标识，并在编写%install脚本的时候引用，才能实现rpm安装时重新指定位置的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefix: %{_sysconfdir} 这个原因和上面的一样，但由于%{_prefix}指/usr，而对于其他的文件，例如/etc下的配置文件，则需要用%{_sysconfdir}标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build Arch: 指编译的目标处理器架构，noarch标识不指定，但通常都是以/usr/lib/rpm/marcros中的内容为默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Requires: 该rpm包所依赖的软件包名称，可以用&amp;gt;=或&amp;lt;=表示大于或小于某一特定版本，例如：
libpng-devel &amp;gt;= 1.0.20 zlib 
※“&amp;gt;=”号两边需用空格隔开，而不同软件名称也用空格分开
还有例如PreReq、Requires(pre)、Requires(post)、Requires(preun)、Requires(postun)、BuildRequires等都是针对不同阶段的依赖指定 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides: 指明本软件一些特定的功能，以便其他rpm识别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packager: 打包者的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;%prep段&lt;/h4&gt;
&lt;p&gt;预处理阶段，可以执行一些解压命令，或则是安装前脚本，安装前设置等等。 %prep、%build、%install，除了可以执行RPM的宏命令（%开头），还可以执行shell命令。&lt;/p&gt;
&lt;p&gt;%setup -n %{name}-%{vesion}  把源码解压并放好&lt;/p&gt;
&lt;p&gt;通常是从/usr/src/asianux/SOURCES里的包解压到/usr/src/asianux/BUILD/%{name}-%{version}中。
一般用%setup -c就可以了，
但有两种情况：一就是同时编译多个源码包，二就是源码的tar包的名称与解压出来的目录不一致，此时，就需要使用-n参数指定一下了。&lt;/p&gt;
&lt;p&gt;%patch 打补丁&lt;/p&gt;
&lt;p&gt;通常补丁都会一起在源码tar.gz包中，或放到SOURCES目录下。一般参数为：&lt;/p&gt;
&lt;p&gt;%patch -p1 使用前面定义的Patch补丁进行，-p1是忽略patch的第一层目录&lt;/p&gt;
&lt;p&gt;%Patch2 -p1 -b xxx.patch 打上指定的补丁，-b是指生成备份文件&lt;/p&gt;
&lt;p&gt;补充一下setup、patch参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="err"&gt;不加任何选项，仅将软件包打开。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;newdir&lt;/span&gt; &lt;span class="err"&gt;将软件包解压在&lt;/span&gt;&lt;span class="n"&gt;newdir&lt;/span&gt;&lt;span class="err"&gt;目录。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="err"&gt;解压缩之前先产生目录。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="err"&gt;将第&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="err"&gt;个&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="err"&gt;文件解压缩。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="err"&gt;不使用&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="err"&gt;的解压缩操作。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;将第&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;个源代码文件解压缩。&lt;/span&gt; 
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;newdir&lt;/span&gt; &lt;span class="err"&gt;指定目录名称&lt;/span&gt;&lt;span class="n"&gt;newdir&lt;/span&gt;&lt;span class="err"&gt;，并在此目录产生&lt;/span&gt;&lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="err"&gt;套件。&lt;/span&gt;  
&lt;span class="nf"&gt;%patch&lt;/span&gt; &lt;span class="err"&gt;最简单的补丁方式，自动指定&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt; 
&lt;span class="nf"&gt;%patch&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;使用第&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;个补丁文件，相当于&lt;/span&gt;&lt;span class="nf"&gt;%patch&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt; 
&lt;span class="nf"&gt;%patch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;不显示打补丁时的信息。&lt;/span&gt; 
&lt;span class="nf"&gt;%patch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="err"&gt;将所有打补丁时产生的输出文件删除。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;%build段&lt;/h4&gt;
&lt;p&gt;生成阶段，或则是编译阶段。一般包含%configure、 make 等等，同样也可以根据不同的软件需要，添加不同的辅助编译的命令&lt;/p&gt;
&lt;p&gt;%configure 这个不是关键字，而是rpm定义的标准宏命令。意思是执行源代码的configure配置
在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行 ，使用标准写法，会引用/usr/lib/rpm/marcros中定义的参数。
另一种不标准的写法是，可参考源码中的参数自定义，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CFLAGS=&amp;quot;$RPM_OPT_FLAGS&amp;quot; CXXFLAGS=&amp;quot;$RPM_OPT_FLAGS&amp;quot; ./configure --prefix=%{_prefix}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行make的工作 ，常见写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make %{?_smp_mflags} OPTIMIZE=&amp;quot;%{optflags}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;都是一些优化参数，定义在/usr/lib/rpm/marcros中&lt;/p&gt;
&lt;h4&gt;%install&lt;/h4&gt;
&lt;p&gt;安装阶段，类似于make install。这里把软件安装到虚拟的根目录中，比如${RPM_BUILD_ROOT}/%{_bindir}&lt;/p&gt;
&lt;p&gt;在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行make install的操作。这个很重要，因为如果这里的路径不对的话，则下面%file中寻找文件的时候就会失败。 
常见内容有：
%makeinstall 这不是关键字，而是rpm定义的标准宏命令。也可以使用非标准写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make DESTDIR=$RPM_BUILD_ROOT install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make prefix=$RPM_BUILD_ROOT install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要说明的是，这里的%install主要就是为了后面的%file服务的。所以，还可以使用常规的系统命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install -d $RPM_BUILD_ROOT/
cp -a * $RPM_BUILD_ROOT/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;%clean 清理临时文件
通常内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ &amp;quot;$RPM_BUILD_ROOT&amp;quot; != &amp;quot;/&amp;quot; ] &amp;amp;&amp;amp; rm -rf &amp;quot;$RPM_BUILD_ROOT&amp;quot;
rm -rf $RPM_BUILD_DIR/%{name}-%{version}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※注意区分&lt;span class="math"&gt;\(RPM_BUILD_ROOT和\)&lt;/span&gt;RPM_BUILD_DIR：&lt;/p&gt;
&lt;p&gt;$RPM_BUILD_ROOT是指开头定义的BuildRoot，&lt;/p&gt;
&lt;p&gt;而$RPM_BUILD_DIR通常就是指/usr/src/asianux/BUILD，其中，前面的才是%file需要的。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%pre&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="err"&gt;安装前执行的脚本&lt;/span&gt;
&lt;span class="nf"&gt;%post&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="err"&gt;安装后执行的脚本&lt;/span&gt;
&lt;span class="nf"&gt;%preun&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="err"&gt;卸载前执行的脚本&lt;/span&gt;
&lt;span class="nf"&gt;%postun&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="err"&gt;卸载后执行的脚本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;%preun %postun 的区别是什么呢？&lt;/p&gt;
&lt;p&gt;前者在升级的时候会执行，后者在升级rpm包的时候不会执行&lt;/p&gt;
&lt;h4&gt;%files段&lt;/h4&gt;
&lt;p&gt;本段是文件段，用于定义软件包所包含的文件，分为三类--说明文档（doc），配置文件（config）及执行程序，还可定义文件存取权限，拥有者及组别。&lt;/p&gt;
&lt;p&gt;这里会在虚拟根目录下进行，千万不要写绝对路径，而应用宏或变量表示相对路径。 如果描述为目录，表示目录中除%exclude外的所有文件。
%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755&lt;/p&gt;
&lt;p&gt;%exclude 列出不想打包到rpm中的文件
※小心，如果%exclude指定的文件不存在，也会出错的。 &lt;/p&gt;
&lt;h4&gt;%changelog段&lt;/h4&gt;
&lt;p&gt;本段是修改日志段。你可以将软件的每次修改记录到这里，保存到发布的软件包中，以便查询之用。每一个修改日志都有这样一种格式：第一行是：* 星期 月 日 年 修改人 电子信箱。其中：星期、月份均用英文形式的前3个字母，用中文会报错。接下来的行写的是修改了什么地方，可写多行。一般以减号开始，便于后续的查阅。&lt;/p&gt;
&lt;h4&gt;注意事项&lt;/h4&gt;
&lt;p&gt;※特别需要注意的是：%install部分使用的是绝对路径，而%file部分使用则是相对路径，虽然其描述的是同一个地方。千万不要写错。&lt;/p&gt;
&lt;p&gt;就是%file中必须明白，用的是相对目录引用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%files&lt;/span&gt; 
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_libdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_datadir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nf"&gt;%exclude&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_libdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何编写%file段 &lt;/p&gt;
&lt;p&gt;由于必须在%file中包括所有套件中的文件，所以，我们需要清楚编译完的套件到底包括那些文件？
常见的做法是，人工模拟一次编译的过程：
 这样，整个套件的内容就会被放到/usr/local/xxx中，可根据情况编写%file和%exclude段。&lt;/p&gt;
&lt;p&gt;※当然，这个只能对源码按GNU方式编写，并使用GNU autotool创建的包有效，若自定义Makefile则不能一概而论。 &lt;/p&gt;
&lt;p&gt;关于rpm中的执行脚本 &lt;/p&gt;
&lt;p&gt;如果正在制作的rpm包是准备作为放到系统安装光盘中的话，则需要考虑rpm中定义的脚本是否有问题。由于系统在安装的时候只是依赖于一个小环境进行，而该环境与实际安装完的环境有很大的区别，所以，大部分的脚本在该安装环境中都是无法生效，甚至会带来麻烦的。
所以，对于这样的，需要放到安装光盘中的套件，不加入执行脚本是较佳的方法。&lt;/p&gt;
&lt;p&gt;另外，为提供操作中可参考的信息，rpm还提供了一种信号机制：不同的操作会返回不同的信息，并放到默认变量$1中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0代表卸载、1代表安装、2代表升级
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;SPEC文件示例&lt;/h3&gt;
&lt;p&gt;示例一：&lt;/p&gt;
&lt;p&gt;打包 gzip&lt;/p&gt;
&lt;p&gt;简单进行说明，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
&lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;
&lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;
&lt;span class="nl"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nl"&gt;License&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GPLv3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;GFDL&lt;/span&gt;
&lt;span class="nl"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//ftp.gnu.org/gnu/gzip/gzip-%{version}.tar.xz&lt;/span&gt;
&lt;span class="nl"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.gzip.org/&lt;/span&gt;
&lt;span class="nl"&gt;Conflicts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;定义&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="err"&gt;至少版本&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;，否则存在冲突&lt;/span&gt;
&lt;span class="nl"&gt;Provides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gunzip&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;功能&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nl"&gt;Provides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gzip&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;功能&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;Provides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zcat&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;功能&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="cp"&gt;#for one check&lt;/span&gt;
&lt;span class="nl"&gt;BuildRequires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;

&lt;span class="nf"&gt;%description&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;popular&lt;/span&gt; &lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt;
&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Gzipped&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Gzip&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;commonly&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nf"&gt;%prep&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="nf"&gt;%build&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DEFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NO_ASM&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;CPPFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-DHAVE_LSTAT&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="err"&gt;前设置环境变量&lt;/span&gt;
&lt;span class="nf"&gt;%configure&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;_smp_mflags&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;%install&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;清空临时目录&lt;/span&gt;
&lt;span class="nf"&gt;%makeinstall&lt;/span&gt;  &lt;span class="n"&gt;bindir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;二进制导向临时目录&lt;/span&gt;

&lt;span class="cp"&gt;# we don&amp;#39;t ship it, so let&amp;#39;s remove it from ${RPM_BUILD_ROOT}&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_infodir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;删除&lt;/span&gt;&lt;span class="n"&gt;infodir&lt;/span&gt;
&lt;span class="cp"&gt;# uncompress is a part of ncompress package&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RPM_BUILD_ROOT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uncompress&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;删除&lt;/span&gt;&lt;span class="n"&gt;uncompress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;避免冲突&lt;/span&gt;

&lt;span class="nf"&gt;%check&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;      &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;进行检查测试&lt;/span&gt;

&lt;span class="nf"&gt;%files&lt;/span&gt;
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;%{_mandir}/*/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="nf"&gt;%changelog&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Fri&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Rebuild&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 09 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-10-09:2013/10/09/rpm/</guid><category>Linux</category></item><item><title>PMON启动信息详解</title><link>http://king32783784.github.io/2013/08/29/pmon/</link><description>&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/P5LS1TUY3V.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;p&gt;启动过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PMON2000 MIPS Initializing. Standby... /*CPU  Initializing*/

 0xbfe00190 : 00008062f0f8f0f0 
CPU CLK SEL : 00000002
CPU clk frequency = SYSCLK x 0x00000020 /  1 /×CPU的频率×/
MEM CLK SEL : 00000003
DDR clk frequency = MEMCLK x 0x00000021 /  3 /*DDR的频率×/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CPU 1 READ TEST...
CPU 1 READ TEST OK./×CPU 读测试×/
HT0 frequency reconfig  /×总线时钟重新设置×/
Fix L1xbar illegal access at NODE 0
Fix L1xbar illegal access at NODE 1 /×修复节点的一级缓存×/&lt;/p&gt;
&lt;p&gt;Fix L2xbar in NODE 0
Fix L2xbar in NODE 1  /×修复节点的二级缓存×/
Init tlb...  /×初始化TLB×/
Init htpcitlb.../×初始化PCI总线TLB×/
godson2 caches found /×初始化缓存×/
Jump to 9fc /×跳转到9fc&lt;em&gt;/
scache init done /×chache 初始化完成&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;Start Init Memory, wait a while......
NODE 0 MEMORY CONFIG BEGIN/*开始初始化内存，首先是节点0的内存×/&lt;/p&gt;
&lt;p&gt;Open SMBUS controller/*开启SMBUS控制器×/&lt;/p&gt;
&lt;p&gt;Probing DDR MC1 SLOT:    /&lt;em&gt;侦测 DDR控制器MC1 插槽&lt;/em&gt;/ 
Probe MC1 slot 0.       /*侦测到MC1 slot0 内存颗粒×/
Probe MC1 slot 1.
NO DIMM in this slot. /×MC1 slot 1 没有内存颗粒×/&lt;/p&gt;
&lt;p&gt;Probing DDR MC0 SLOT: 
Probe MC0 slot 0.
Probe MC0 slot 1.
NO DIMM in this slot./×MC0同MC1*/&lt;/p&gt;
&lt;p&gt;s1 = 0xf0a10400__f0a10400
/*&lt;/p&gt;
&lt;p&gt;new s1 = 0xf0a10400__f0a10400
Disable cpu buffered read  /*关闭CPU缓存读×/
Disable read buffer      &lt;/p&gt;
&lt;p&gt;Enable register space of MEMORY   /×设置内存寄存器模块使能×/&lt;/p&gt;
&lt;p&gt;The MC param is:
00000100  00000100
00000001  00010001
...&lt;/p&gt;
&lt;p&gt;/×写入内存参数×/&lt;/p&gt;
&lt;p&gt;Disable register space of MEMORY
/&lt;em&gt;关闭内存的寄存器模块&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;NODE ID:00000000
Lock Scache Node x--9800?01000000000~4K...
Lock Scache Done.      &lt;/p&gt;
&lt;p&gt;Start ARB Leveling....
/&lt;em&gt;启动ARB训练&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;Start Write Leveling. Wait a while...
Min value: 0x0000000000000000
Max value: 0x4e46443c44484e50
Cal Mid value: 0x120a0800080c1214
/×写入练习×/&lt;/p&gt;
&lt;p&gt;Start read leveling..&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000007
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3c
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003a3a
This Slice level success, use first value.
/*这一级片训练成功，采用第一个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000006
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3a
RDLVL_DELAYN_GD_MIN: 0x00000808
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000005
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3a
RDLVL_DELAYN_GD_MIN: 0x00000808
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000004
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3a
RDLVL_DELAYN_GD_MIN: 0x00000808
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000003
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003c3c
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000002
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003e3e
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003e3e
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000001
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003e3e
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000000
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003e3e
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.
/*这一级片训练成功，采用第二个值×/&lt;/p&gt;
&lt;p&gt;ARB Leveling Finished./&lt;em&gt;ARB训练完成，MC设置如下：&lt;/em&gt;/
After ARB level. The MC configuration is:&lt;br /&gt;
...
00000c2d  00000c2d&lt;/p&gt;
&lt;p&gt;Unlock Scache Node x--9800?01000000000~4K...
Unlock Scache Done.&lt;/p&gt;
&lt;p&gt;Disable register space of MEMORY&lt;/p&gt;
&lt;p&gt;MC0 Config DONE&lt;/p&gt;
&lt;p&gt;Enable register space of MEMORY&lt;/p&gt;
&lt;p&gt;The MC param is:
00000100  00000100&lt;/p&gt;
&lt;p&gt;00000000  00000000&lt;/p&gt;
&lt;p&gt;...
Disable register space of MEMORY&lt;/p&gt;
&lt;p&gt;NODE ID:00000000
Lock Scache Node x--9800?01000000000~4K...
Lock Scache Done.&lt;/p&gt;
&lt;p&gt;Start ARB Leveling....&lt;/p&gt;
&lt;p&gt;Start Write Leveling. Wait a while...
Wrlvl Error: This Byte Window not found.
Failed byte is byte: 00000006
Try another pad compensation.&lt;/p&gt;
&lt;p&gt;Start Write Leveling. Wait a while...
Wrlvl Error: This Byte Window not found.
Failed byte is byte: 00000006
Try another pad compensation.&lt;/p&gt;
&lt;p&gt;Start Write Leveling. Wait a while...
Wrlvl Error: This Byte Window not found.
Failed byte is byte: 00000006
Try another pad compensation.&lt;/p&gt;
&lt;p&gt;Write level failed. Write default value(0x30).&lt;/p&gt;
&lt;p&gt;/*写训练失败×/&lt;/p&gt;
&lt;p&gt;Start read leveling..&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000007
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x0000383a
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use first value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000006
Wait a while...
RDLVL_FAIL_MARK: 0x00000003
RDLVL_GATE_CFG: 0x00000000
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00000000
RDLVL_DELAYP_GD_MIN: 0x00000000
RDLVL_DELAYP_GD_MAX: 0x00000000
RDLVL_DELAYN_GD_MIN: 0x00000000
RDLVL_DELAYN_GD_MAX: 0x00000000
Try another pad compensation.&lt;/p&gt;
&lt;p&gt;ERROR: This Slice level failed, write default value.&lt;/p&gt;
&lt;p&gt;/×读训练失败×/&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000005
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00001c1c
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3a
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003e3e
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000004
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00001818
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003a3a
RDLVL_DELAYN_GD_MIN: 0x00000808
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000003
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00001a1a
RDLVL_DELAYP_GD_MIN: 0x00000808
RDLVL_DELAYP_GD_MAX: 0x00003e3e
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003e3e
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000002
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00001e1e
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003e3e
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003c3c
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000001
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002020
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00004040
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003e3e
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;Level slice: 0x00000000
Wait a while...
RDLVL_FAIL_MARK: 0x00000000
RDLVL_GATE_CFG: 0x00000101
RDLVL_GATE_GD_MIN: 0x00000000
RDLVL_GATE_GD_MAX: 0x00002222
RDLVL_DELAYP_GD_MIN: 0x00000404
RDLVL_DELAYP_GD_MAX: 0x00003c3c
RDLVL_DELAYN_GD_MIN: 0x00000404
RDLVL_DELAYN_GD_MAX: 0x00003e3e
This Slice level success, use second value.&lt;/p&gt;
&lt;p&gt;ERROR!!!: ARB Leveling Fail&lt;/p&gt;
&lt;p&gt;/*内存训练失败×/&lt;/p&gt;
&lt;p&gt;RW Diff 0x0010000000000000
RD Diff 0x0010000000000000
Unlock Scache Node x--9800?01000000000~4K...
Unlock Scache Done.&lt;/p&gt;
&lt;p&gt;Disable register space of MEMORY&lt;/p&gt;
&lt;p&gt;MC1 Config DONE&lt;/p&gt;
&lt;p&gt;msize = 0x00000008
!!!MEM is at NO_INTERLEAVE mode. If this is not the expected setting, 
please check whether the two MC_MEMSIZE is equal
DDR space open : 0x00000000 - 0x0FFFFFFF
PCI space open: 0x80000000 - 0x8FFFFFFF
MC0 space open : 0x80000000 - 0xFFFFFFFF
MC1 space open : 0x100000000 - 0x17FFFFFFF
DDR space open : 0x080000000 - 0x17FFFFFFF
Full PCI space opened as cpu.
NODE 1 MEMORY CONFIG BEGIN
/节点1 开始内存训练×/&lt;/p&gt;
&lt;p&gt;Open SMBUS controller&lt;/p&gt;
&lt;p&gt;Probing DDR MC1 SLOT: 
Probe MC1 slot 0.
Probe MC1 slot 1.
NO DIMM in this slot.&lt;/p&gt;
&lt;p&gt;Probing DDR MC0 SLOT: 
Probe MC0 slot 0.
Probe MC0 slot 1.
NO DIMM in this slot.&lt;/p&gt;
&lt;p&gt;s1 = 0xf0a10400__f0a10401&lt;/p&gt;
&lt;p&gt;new s1 = 0xf0a10400__f0a10401
Disable cpu buffered read
Disable read buffer&lt;/p&gt;
&lt;p&gt;MC1 Config DONE&lt;/p&gt;
&lt;p&gt;msize = 0x00000800
!!!MEM is at NO_INTERLEAVE mode. If this is not the expected setting, /×内存未启用交错模式×/
please check whether the two MC_MEMSIZE is equal
DDR space open : 0x00000000 - 0x0FFFFFFF
PCI space open: 0x80000000 - 0x8FFFFFFF
MC0 space open : 0x80000000 - 0xFFFFFFFF
MC1 space open : 0x100000000 - 0x17FFFFFFF
DDR space open : 0x080000000 - 0x17FFFFFFF
Full PCI space opened as cpu.&lt;/p&gt;
&lt;p&gt;system msize = 0x00000808
system s3 = 0x0003030f76543210
Init Memory done.&lt;/p&gt;
&lt;p&gt;store DIMM info of MC0&lt;/p&gt;
&lt;p&gt;store DIMM info of MC1
32 bit PCI space translate to 64 bit HT space
Waiting HyperTransport bus to be up.&amp;gt;
00110020
HT RX DMA address ENABLE
HT RX DMA address ENABLE done 1
HT RX DMA address ENABLE done 2
Setting HyperTransport Controller to be 8-bit width
00110020
Setting HyperTransport Controller to be 800Mhz
80258523
SET HT as HOST
2001000820010008
Setting HyperTransport Southbridge to be 8-bit width
00110020
Setting HyperTransport Southbridge to be 800M
1c750060
Setting Watch Dog to make a WARM RESET
Watch dog Enable&lt;/p&gt;
&lt;p&gt;Watch dog decode enable
00000000
Watch dog control value
00000000
00000000
Set Watch dog control value
Waiting HyperTransport bus to be down.&amp;gt;
00110010
Waiting HyperTransport bus to be up.&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;=
00110020
Setting HyperTransport Southbridge back to be 8-bit width and 200Mhz for next RESET
1c750560
Checking HyperTransport bus CRC error bit.
Checking HyperTransport SouthBridge CRC error bit.
Done
Read HT Channel priority
00904321&lt;/p&gt;
&lt;p&gt;======This is cww's world:1&lt;/p&gt;
&lt;p&gt;enable rs780 dev8...&lt;/p&gt;
&lt;p&gt;test GPPSB&lt;/p&gt;
&lt;p&gt;Enabled GPPSB success...&lt;/p&gt;
&lt;p&gt;sb700 lpc init...&lt;/p&gt;
&lt;p&gt;set boottimerdisable&lt;/p&gt;
&lt;p&gt;enable lpc controller&lt;/p&gt;
&lt;p&gt;enable port 80 LPC decode&lt;/p&gt;
&lt;p&gt;Decode port 0x3f8-0x3ff&lt;/p&gt;
&lt;p&gt;Decode port 0x60-0x66&lt;/p&gt;
&lt;p&gt;SuperIO RTC&lt;/p&gt;
&lt;p&gt;======This is cww's world:2&lt;/p&gt;
&lt;p&gt;======X1 core0 map windows:
900000003ff02000: 0000000018000000
900000003ff02008: 00000e0000000000
900000003ff02010: 0000000000000000
900000003ff02018: 0000000040000000
900000003ff02020: 000000001e000000
900000003ff02028: 00000c0000000000
900000003ff02030: 0000200000000000
900000003ff02038: 000000fdfe000000
900000003ff02040: fffffffffc000000
900000003ff02048: ffffff0000000000
900000003ff02050: 0000000000000000
900000003ff02058: ffffffffc0000000
900000003ff02060: ffffffffff000000
900000003ff02068: 00000c0000000000
900000003ff02070: 0000200000000000
900000003ff02078: 000000fffe000000
900000003ff02080: 00000efdfc0000f7
900000003ff02088: 00000e00000000f7
900000003ff02090: 0000000000000000
900000003ff02098: 00000e00400000f7
900000003ff020a0: 00000e00000000f7
900000003ff020a8: 00000c00000000f7
900000003ff020b0: 00002000000000f7
900000003ff020b8: 000000fdfe0000f7&lt;/p&gt;
&lt;p&gt;======X2 cpu map windows:
900000003ff00000: 000000001fc00000
900000003ff00008: 0000000010000000
900000003ff00010: 0000000000000000
900000003ff00018: 0000000000000000
900000003ff00020: 0000000080000000
900000003ff00028: 0000000100000000
900000003ff00030: 0000000000000000
900000003ff00038: 0000000000000000
900000003ff00040: fffffffffff00000
900000003ff00048: fffffffff0000000
900000003ff00050: fffffffff0000000
900000003ff00058: 0000000000000000
900000003ff00060: ffffffff80000000
900000003ff00068: ffffffff80000000
900000003ff00070: 0000000000000000
900000003ff00078: 0000000000000000
900000003ff00080: 000000001fc000f2
900000003ff00088: 0000000010000082
900000003ff00090: 00000000000000f0
900000003ff00098: 0000000000000000
900000003ff000a0: 00000000000000f0
900000003ff000a8: 00000000000000f1
900000003ff000b0: 0000000000000000
900000003ff000b8: 0000000000000000&lt;/p&gt;
&lt;p&gt;======X2 pci map windows:
900000003ff00100: 0000000080000000
900000003ff00108: 0000000000000000
900000003ff00110: 0000000080000000
900000003ff00118: 0000000080000000
900000003ff00120: 0000000080000000
900000003ff00128: 0000000100000000
900000003ff00130: 0000000000000000
900000003ff00138: 0000000000000000
900000003ff00140: ffffffff80000000
900000003ff00148: 0000000000000000
900000003ff00150: fffffffff0000000
900000003ff00158: 0000000000000000
900000003ff00160: ffffffff80000000
900000003ff00168: ffffffff80000000
900000003ff00170: 0000000000000000
900000003ff00178: 0000000000000000
900000003ff00180: 0000000000000000
900000003ff00188: 0000000000000000
900000003ff00190: 00000000000000f0
900000003ff00198: 0000000000000000
900000003ff001a0: 00000000000000f0
900000003ff001a8: 00000000000000f1
900000003ff001b0: 0000000000000000
900000003ff001b8: 0000000000000000&lt;/p&gt;
&lt;p&gt;======read HT config reg:
90000efdfb000000: 0000000000000000
90000efdfb000060: 0080fff0c0000000
90000efdfb000068: 00008000c0000000
90000efdfb000070: 0000000000000000&lt;/p&gt;
&lt;p&gt;======X1 core0 map windows:
900010003ff02000: 0000000000000000
900010003ff02008: 0000000000000000
900010003ff02010: 0000000000000000
900010003ff02018: 0000000000000000
900010003ff02020: 0000000000000000
900010003ff02028: 00001c0000000000
900010003ff02030: 0000200000000000
900010003ff02038: 00000efdfe000000
900010003ff02040: 0000000000000000
900010003ff02048: 0000000000000000
900010003ff02050: 0000000000000000
900010003ff02058: 0000000000000000
900010003ff02060: 0000000000000000
900010003ff02068: 00001c0000000000
900010003ff02070: 0000200000000000
900010003ff02078: 0000fffffe000000
900010003ff02080: 0000000000000000
900010003ff02088: 0000000000000000
900010003ff02090: 0000000000000000
900010003ff02098: 0000000000000000
900010003ff020a0: 0000000000000000
900010003ff020a8: 00001c00000000f7
900010003ff020b0: 00002000000000f7
900010003ff020b8: 000000fdfe0000f6&lt;/p&gt;
&lt;p&gt;======X2 cpu map windows:
900010003ff00000: 0000000000000000
900010003ff00008: 0000100010000000
900010003ff00010: 0000100000000000
900010003ff00018: 0000000000000000
900010003ff00020: 0000100080000000
900010003ff00028: 0000100100000000
900010003ff00030: 0000000000000000
900010003ff00038: 0000000000000000
900010003ff00040: fffffffff0000000
900010003ff00048: fffffffff0000000
900010003ff00050: fffffffff0000000
900010003ff00058: 0000000000000000
900010003ff00060: ffffffff80000000
900010003ff00068: ffffffff80000000
900010003ff00070: 0000000000000000
900010003ff00078: 0000000000000000
900010003ff00080: 0000000000000000
900010003ff00088: 0000000010000082
900010003ff00090: 00000000000000f0
900010003ff00098: 0000000000000000
900010003ff000a0: 00000000000000f0
900010003ff000a8: 00000000000000f1
900010003ff000b0: 0000000000000000
900010003ff000b8: 0000000000000000&lt;/p&gt;
&lt;p&gt;======X2 pci map windows:
900010003ff00100: 0000000080000000
900010003ff00108: 0000000000000000
900010003ff00110: 0000100080000000
900010003ff00118: 0000000080000000
900010003ff00120: 0000100080000000
900010003ff00128: 0000100100000000
900010003ff00130: 0000000000000000
900010003ff00138: 0000000000000000
900010003ff00140: ffffffff80000000
900010003ff00148: 0000000000000000
900010003ff00150: fffffffff0000000
900010003ff00158: 0000000000000000
900010003ff00160: ffffffff80000000
900010003ff00168: ffffffff80000000
900010003ff00170: 0000000000000000
900010003ff00178: 0000000000000000
900010003ff00180: 0000000000000000
900010003ff00188: 0000000000000000
900010003ff00190: 00000000000000f0
900010003ff00198: 0000000000000000
900010003ff001a0: 00000000000000f0
900010003ff001a8: 00000000000000f1
900010003ff001b0: 0000000000000000
900010003ff001b8: 0000000000000000&lt;/p&gt;
&lt;p&gt;======read HT config reg:
90001efdfb000000: 0000000000000000
90001efdfb000060: 0080fff0c0000000
90001efdfb000068: 00008000c0000000
90001efdfb000070: 0000000000000000&lt;/p&gt;
&lt;p&gt;spd_info_store begain.&lt;/p&gt;
&lt;p&gt;spd_info_store done.
Copy PMON to execute location...
  start = 0x81000000
  s0 = 0x3ec00000
81000000
81010000
81020000
81030000
81040000
81050000
81060000
81070000
81080000
81090000
810a0000
810b0000
copy text section done.
Copy PMON to execute location done.
sp=80ffc000
Uncompressing Bios..................................................................................OK,Booting Bios
memorysize_high_n1 0xf0000000
FREQ
RTC: 12-15-03 08:40:12
FREI
cpu fre 799980000
DONE
DEVI
ENVI
MAPV
in envinit
nvram=bfc00000
NVRAM@bfcfd800
STDV
80100000:  memory between 82fff000-83000000  is already been allocated,heap is already above this point
SBDD
rs780_early_setup
sb700_early_setup
rs780_before_pci_fixup
sb700_before_pci_fixup
rs780_enable
sb700_enable
disable bus0 device pcie bridges
disable OHCI and EHCI controller
enable OHCI controller
P12PCIH
PCIH
pcie-slot device: vendor:ffff product:ffff
PCIS
PCIR
PCIW
vga_dev =:0
pcie_dev :0 vga_dev ==:82fff348
vga_dev =:82fff348
pcie_dev :0 vga_dev ==:82fff348
sb700_after_pci_fixup
NETI
RTCL
PCID
VGAI
memorysize=b000000,base=82efe4f0,sysMem=82eee4e8,vram=be0a0000
in setup_int_vect!done!USE inter-graphic device: vendor:1002, device=0x:9615
vgarom romaddress:0x8014a940
Rom base addr: 8014a940
VGA bios found
rom size is 59k
PCI data structure at offset 1c0
video bios address: c7f00000
lock vga
starting bios emu...
ax=0,bx=0,cx=0,dx=0
just before emu done ax(0x128)
bios emu done&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;vesa_mode : 0x0&lt;/dt&gt;
&lt;dt&gt;ax 4f02 bx 4114&lt;/dt&gt;
&lt;dt&gt;run_bios_int,intno=10,ret=1&lt;/dt&gt;
&lt;dt&gt;VESA&lt;/dt&gt;
&lt;dt&gt;VESA FB init complete.&lt;/dt&gt;
&lt;dt&gt;fbaddress 0x40000000 ioaddress 0x48000000&lt;/dt&gt;
&lt;dt&gt;fbaddress = c0000000&lt;/dt&gt;
&lt;dt&gt;begin fb_init&lt;/dt&gt;
&lt;dt&gt;cfb_console init,fb=c0000000&lt;/dt&gt;
&lt;dt&gt;CONSOLE_SIZE 960000&lt;/dt&gt;
&lt;dt&gt;after fb_init&lt;/dt&gt;
&lt;dt&gt;in configure&lt;/dt&gt;
&lt;dt&gt;mainbus0 (root)&lt;/dt&gt;
&lt;dt&gt;localbus0 at mainbus0&lt;/dt&gt;
&lt;dt&gt;loopdev0 at mainbus0pcibr0 at mainbus0&lt;/dt&gt;
&lt;dt&gt;pci0 at pcibr0 bus 0&lt;/dt&gt;
&lt;dt&gt;ppb0 at pci0 dev 1 function 0 vendor/product: 0x1022/0x9602 (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci1 at ppb0 bus 1&lt;/dt&gt;
&lt;dt&gt;vendor/product: 0x1002/0x9615 (display, VGA) at pci1 dev 5 function 0 not configured&lt;/dt&gt;
&lt;dt&gt;ppb1 at pci0 dev 2 function 0 vendor/product: 0x1022/0x9603 (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci2 at ppb1 bus 2&lt;/dt&gt;
&lt;dt&gt;ppb2 at pci0 dev 3 function 0 vendor/product: 0x1022/0x960b (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci3 at ppb2 bus 3&lt;/dt&gt;
&lt;dt&gt;ppb3 at pci0 dev 4 function 0 vendor/product: 0x1022/0x9604 (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci4 at ppb3 bus 4&lt;/dt&gt;
&lt;dt&gt;ppb4 at pci0 dev 9 function 0 vendor/product: 0x1022/0x9608 (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci5 at ppb4 bus 5&lt;/dt&gt;
&lt;dt&gt;em0 at pci5 dev 0 function 0 vendor/product: 0x8086/0x10d3 (network, ethernet)ent-&amp;gt;driver_data is 0x3&lt;/dt&gt;
&lt;dt&gt;em_probe done!&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;generic poll, address 00:23:90:10:96:93&lt;/dt&gt;
&lt;dt&gt;in if attach&lt;/dt&gt;
&lt;dt&gt;ppb5 at pci0 dev 10 function 0 vendor/product: 0x1022/0x9609 (bridge, PCI)&lt;/dt&gt;
&lt;dt&gt;pci6 at ppb5 bus 6&lt;/dt&gt;
&lt;dt&gt;em1 at pci6 dev 0 function 0 vendor/product: 0x8086/0x10d3 (network, ethernet)ent-&amp;gt;driver_data is 0x3&lt;/dt&gt;
&lt;dt&gt;em_probe done!&lt;/dt&gt;
&lt;dd&gt;generic poll, address 00:23:90:10:20:59
in if attach
pciide0 at pci0 dev 17 function 0 vendor/product: 0x1002/0x4390 (mass storage, IDE): DMA, (partial support), ch 0 cfg to native-PCI, ch 1 cfg to native-PCI
pciide0: using generic poll for native-PCI interrupt
wd0 at pciide0 channel 0 drive 0: &lt;WDC WD5000AAKX-221CA1&gt;
wd0: can use 16-bit, PIO mode 4, DMA mode 2
wd0: 16-sector PIO, LBA, 131071MB, 16383 cyl, 16 head, 63 sec, 268435455 sectors
wd1 at pciide0 channel 1 drive 0: &lt;WDC WD5000AAKX-221CA1&gt;
wd1: can use 16-bit, PIO mode 4, DMA mode 2
wd1: 16-sector PIO, LBA, 131071MB, 16383 cyl, 16 head, 63 sec, 268435455 sectors
pciide0:0:0: using DMA data transfers
pciide0:1:0: using DMA data transfers
ohci0 at pci0 dev 18 function 0 vendor/product: 0x1002/0x4397 (serialbus, USB)usb base addr : 0xc8708000, bus_base is : 0xc0000000
OHCI revision: 0x00000110
  RH: a: 0x02000b03 b: 0x00000000
early period(0x0)
OHCI 8b01f000 initialized ok
drive at ohci0 devnum 1, Product OHCI Root Hub
 not configured
ohci1 at pci0 dev 18 function 1 vendor/product: 0x1002/0x4398 (serialbus, USB)usb base addr : 0xc8707000, bus_base is : 0xc0000000
OHCI revision: 0x00000110
  RH: a: 0x02000b03 b: 0x00000000
early period(0x0)
OHCI 8b026c00 initialized ok
drive at ohci1 devnum 3, Product Wired Keyboard 600
 not configured
Read Capacity returns: 0xff17ef00, 0x20000
Capacity = 0xef1800, blocksz = 0x200
usb0 at ohci1 devnum 4, Product OnlyDisk                    &lt;br /&gt;
drive at ohci1 devnum 2, Product OHCI Root Hub
 not configured
vendor/product: 0x1002/0x4396 (serialbus, USB) at pci0 dev 18 function 2 not configured
vendor/product: 0x1002/0x4397 (serialbus, USB) at pci0 dev 19 function 0 not configured
vendor/product: 0x1002/0x4398 (serialbus, USB) at pci0 dev 19 function 1 not configured
vendor/product: 0x1002/0x4396 (serialbus, USB) at pci0 dev 19 function 2 not configured
vendor/product: 0x1002/0x4385 (serialbus, subclass: 0x05) at pci0 dev 20 function 0 not configured
pciide1 at pci0 dev 20 function 1 vendor/product: 0x1002/0x439c (mass storage, IDE): DMA, (partial support), ch 0 cfg to compat, ch 1 cfg to compat
vendor/product: 0x1002/0x4383 (multimedia, subclass: 0x03) at pci0 dev 20 function 2 not configured
vendor/product: 0x1002/0x439d (bridge, ISA) at pci0 dev 20 function 3 not configured
ppb6 at pci0 dev 20 function 4 vendor/product: 0x1002/0x4384 (bridge, PCI)
pci7 at ppb6 bus 7
vendor/product: 0x1002/0x4399 (serialbus, USB) at pci0 dev 20 function 5 not configured
out configure
Self test cmd failed,ignored!
KBD_TEST cmd failed,ignored!
Keyboard succesfully initialized.
Press &lt;Del&gt; to set BIOS,waiting for 3 seconds here..... 
devconfig done.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;-----------------godson3a_smbus_fixup---------------
 set smbus reg (0xbe) :1212 (usb intr map)
 set smbus reg (0xaf) :1c (sata intr map)
SB700 interrupt PIC set begin,&lt;br /&gt;
set pic_5 pass
set pic_5 pass
set pic_6 pass
set pic_5 pass
set pic_5 pass
set pic_a pass
set pic_9 pass
set pic_5 pass
PIC control bit: 00007d37
original int mode: 0x00000000 
&amp;lt;1&amp;gt; now int mode: 0x00000078 
waiting....
&amp;lt;1&amp;gt; now int mode: 0x00007878 
SB700 interrupt PIC set done 
SB700 device interrupt route begin &lt;/p&gt;
&lt;p&gt;rte0 fixup: em0 ---------------&amp;gt; int5
SB700 device  route em0: int5 
SB700 device  route em1: int6 &lt;/p&gt;
&lt;p&gt;godson3a_sata_fixup: sata ---------------&amp;gt; int5 
-----------------tset sata------------------
sata pci_config 0x40 (14)
godson3a_sata: fix sata mode==:5
godson3a_ide_fixup: fix ide mode
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: usb ------&amp;gt; int6 
godson3a fixup: VGA ------&amp;gt; int6 
godson3a fixup: VGA ------&amp;gt; int6 
05:00:00 interrupt line : Error
06:00:00 interrupt line : Error
ifinit done.
domaininit done.
init_proc....
HSTI
SYMI
SBDE&lt;/p&gt;
&lt;p&gt;[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
[[  [[[[[[[[[       [[[[[       [[[[   [[[[[  [[[[[      [[[[[       [[[[[       [[[[   [[[[[  [[
[[  [[[[[[[[   [[[[  [[[   [[[[  [[[    [[[[  [[[[  [[[[  [[[   [[[[  [[[   [[[[  [[[    [[[[  [[
[[  [[[[[[[[  [[[[[[ [[[  [[[[[[ [[[  [  [[[  [[[  [[[[[[[[[[[[   [[[[[[[  [[[[[[ [[[  [  [[[  [[
[[  [[[[[[[[  [[[[[[ [[[  [[[[[[ [[[  [[  [[  [[[  [[[    [[[[[[[    [[[[  [[[[[[ [[[  [[  [[  [[
[[  [[[[[[[[  [[[[[[ [[[  [[[[[[ [[[  [[[  [  [[[  [[[[[  [[[[[[[[[[  [[[  [[[[[[ [[[  [[[  [  [[
[[  [[[[[[[[   [[[[  [[[   [[[[  [[[  [[[[    [[[   [[[[  [[[   [[[  [[[[   [[[[  [[[  [[[[    [[
[[       [[[[       [[[[[       [[[[  [[[[[   [[[[       [[[[[      [[[[[[       [[[[  [[[[[   [[
[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[2011 Loongson][[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[&lt;/p&gt;
&lt;p&gt;Configuration [Bonito,EL,NET,SCSI,IDE]
Version: PMON2013 V3.1R052B0053D0201 (Bonito) #1: Fri Feb  1 09:22:13 CST 2013 commit 39e53a7fafbe17ff77b63e61c49f1794f1907570 Author: Chen Xinke &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#99;&amp;#104;&amp;#101;&amp;#110;&amp;#120;&amp;#105;&amp;#110;&amp;#107;&amp;#101;&amp;#64;&amp;#105;&amp;#99;&amp;#116;&amp;#46;&amp;#97;&amp;#99;&amp;#46;&amp;#99;&amp;#110;"&gt;&amp;#99;&amp;#104;&amp;#101;&amp;#110;&amp;#120;&amp;#105;&amp;#110;&amp;#107;&amp;#101;&amp;#64;&amp;#105;&amp;#99;&amp;#116;&amp;#46;&amp;#97;&amp;#99;&amp;#46;&amp;#99;&amp;#110;&lt;/a&gt; Date:   Sun Jan 27 15:20:17 2013 +0800 .
Supported loaders [txt, srec, elf, bin]
Supported filesystems [net, fat, fs, disk, iso9660, socket, tty, ram]
This software may be redistributed under the BSD copyright.
Copyright 2000-2002, Opsycon AB, Sweden.
Copyright 2005, ICT CAS.
CPU GODSON3 @ 799.98 MHz/ Bus @ 275 MHz
Memory size 8192 MB .
Primary Instruction cache size 64kb (32 line, 4 way)
Primary Data cache size 64kb (32 line, 4 way)
Secondary cache size 4096kb&lt;/p&gt;
&lt;p&gt;BEV1
BEV0
BEV in SR set to zero.
Token is correct!
flag is 0x0003030f76543210
Store MC info of Node 0 MC 0
Now enable ddr config windows &lt;/p&gt;
&lt;p&gt;Now Read out DDR parameter from DDR MC0 controler after DDR training
Read out DDR MC0 config Done.
Programming flash 8000b888:5c8 into bfc0d000
Disable all space write protection of 49LF008A. 
Erasing FLASH block  13      | Done.
Enable all space write protection of 49LF008A. Programming FLASH. Disable all space write protection of 49LF008A. / Done.
Enable all space write protection of 49LF008A. Verifying FLASH.  No Errors found.
Store MC info of Node 0 MC 1
Now enable ddr config windows &lt;/p&gt;
&lt;p&gt;Now Read out DDR parameter from DDR MC1 controler after DDR training
Read out DDR MC1 config Done.
Programming flash 8000b888:5c8 into bfc0e000
Disable all space write protection of 49LF008A. 
Erasing FLASH block  14       Done.
Enable all space write protection of 49LF008A. Programming FLASH. Disable all space write protection of 49LF008A. -\ Done.
Enable all space write protection of 49LF008A. Verifying FLASH.  No Errors found.
Store MC info of Node 1 MC 0
Now enable ddr config windows &lt;/p&gt;
&lt;p&gt;Now Read out DDR parameter from DDR MC0 controler after DDR training
Read out DDR MC0 config Done.
Programming flash 8000b888:5c8 into bfc0f000
Disable all space write protection of 49LF008A. 
Erasing FLASH block  15       Done.
Enable all space write protection of 49LF008A. Programming FLASH. Disable all space write protection of 49LF008A. | Done.
Enable all space write protection of 49LF008A. Verifying FLASH. / No Errors found.
Store MC info of Node 1 MC 1
Now enable ddr config windows &lt;/p&gt;
&lt;p&gt;Now Read out DDR parameter from DDR MC1 controler after DDR training
Read out DDR MC1 config Done.
Programming flash 8000b888:5c8 into bfc10000
Disable all space write protection of 49LF008A. 
Erasing FLASH block  16       Done.
Enable all space write protection of 49LF008A. Programming FLASH. Disable all space write protection of 49LF008A. - Done.
Enable all space write protection of 49LF008A. Verifying FLASH.  No Errors found.
There is no 1 linux partion
we can't locate root directory in super block!
usage: bl -d cdrom/ide boot_config_file
\|usage: bl -d cdrom/ide boot_config_file
usage: bl -d cdrom/ide boot_config_file
Now booting the LoongsonLinuxSystem
Loading file: /dev/fs/ext2@wd0/boot/vmlinux20130419.numa (elf)
(elf)
0x80300000/11711552  + 0x80e2b440/17428768(z)  + 19271 syms /-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/
Entry address is 80305bf0
Boot with parameters: console=tty root=/dev/sda1
/home/TMP/wanghongmei/28/pmon-loongson3/pmon/common/env.c:length of boot_param is 00000090
ac = 00000003, nsp @ 8a7fff00, env @ 8a7fff30, en @ 801453d0
vsp = 08xffffffff8a7fff10, ssp @ 08xffffffff8a7fff30
board_name:Loongson-3A-780E-2w-V1.02-demo ---0x80142730 10
Shutdown:0x80074b68 reset:0x80074cb4
   zero      at       v0       v1       a0       a1       a2       a3 &lt;br /&gt;
 00000000 00000000 00000000 00000000 00000003 8a7fff00 8a7fff30 801453d0
    t0       t1       t2       t3       t4       t5       t6       t7 &lt;br /&gt;
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    s0       s1       s2       s3       s4       s5       s6       s7 &lt;br /&gt;
 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    t8       t9       k0       k1       gp       sp       s8       ra &lt;br /&gt;
 00000000 00000000 00000000 00000000 00000000 8a7ffee0 00000000 800aa3f0
CP0_Config3: CP0 16.3 (0xa0)
CP0_PageGrain: CP0 5.1 (0x20000000)
Caller cpu 0
NUMA: Discovered 8 cpus on 2 nodes
Debug: node_id:0, mem_type:1, mem_start:0x1000000, mem_size:0xf0 MB
       start_pfn:0x0, end_pfn:0x4000, num_physpages:0x4000
Debug: node_id:0, mem_type:2, mem_start:0x90000000, mem_size:0xf00 MB
       start_pfn:0x24000, end_pfn:0x60000, num_physpages:0x40000
smbios_addr : 0xfffe000
node0's addrspace_offset is 0x0
node0's start_pfn is 0x0, end_pfn is 0x60000, freepfn is 0x7b3
Debug: node_id:0, mem_type:3, mem_start:0xfffe000, mem_size:0x0 MB
Mengxf: total_memsize :0x1000 MB
Debug: node_id:1, mem_type:1, mem_start:0x1000000, mem_size:0xf0 MB
       start_pfn:0x40000000, end_pfn:0x40004000, num_physpages:0x44000
Debug: node_id:1, mem_type:2, mem_start:0x90000000, mem_size:0xf00 MB
       start_pfn:0x40024000, end_pfn:0x40060000, num_physpages:0x80000
node1's addrspace_offset is 0x100000000000
node1's start_pfn is 0x40000000, end_pfn is 0x40060000, freepfn is 0x40000000
Mengxf: total_memsize :0x1000 MB
NUMA: set cpumask cpu 0 on node 0
NUMA: set cpumask cpu 1 on node 0
NUMA: set cpumask cpu 2 on node 0
NUMA: set cpumask cpu 3 on node 0
NUMA: set cpumask cpu 4 on node 1
NUMA: set cpumask cpu 5 on node 1
NUMA: set cpumask cpu 6 on node 1
NUMA: set cpumask cpu 7 on node 1
SET HT_DMA CACHED
[    0.000000] Linux version 2.6.36.3+ (git@ubuntu) (gcc version 4.4.0 (GCC) ) #18 SMP Fri Apr 19 15:23:35 CST 2013
[    0.000000] shutdown:0xffffffff80074b68 reset:0xffffffff80074cb4
[    0.000000] vbios locate in ffffffff8014a940
[    0.000000] Version:1 PMON_Version_V3.1R052B0053D0201
[    0.000000] Board name:Loongson-3A-780E-2w-V1.02-demo ffffffff80142730 10
[    0.000000] Board type:0(RS780E)
[    0.000000] cpu_clock:799980000, cputye:2, nr_cpus:8, ccnuma_smp:65536,single_double_way:131072
[    0.000000] lp:ffffffff8a7fff58, irq_source:ffffffff80142698, offset:-174840000, ht_int_bit:1000000,ht_enable:d17b
[    0.000000] pci_mem_start:40000000, pci_mem_end:7fffffff
[    0.000000] Caller cpu 0
[    0.000000] NUMA: Discovered 8 cpus on 2 nodes
[    0.000000] bootconsole [early0] enabled
[    0.000000] CPU revision is: 00006305 (ICT Loongson-3A5)
[    0.000000] FPU revision is: 00770501
[    0.000000] Checking for the multiply/shift bug... no.
[    0.000000] Checking for the daddiu bug... no.
[    0.000000] Determined physical RAM map:
[    0.000000] Initrd not found or empty - disabling initrd
[    0.000000] swiotlb:restricted 32bit dma!
[    0.000000] SWIOTLB: swiotlbsize = 0x4000000
[    0.000000] Placing 64MB software IO TLB between 98000000026dc000 - 98000000066dc000
[    0.000000] software IO TLB at phys 0x26dc000 - 0x66dc000
[    0.000000] Zone PFN ranges:
[    0.000000]   DMA32    0x00000000 -&amp;gt; 0x00040000
[    0.000000]   Normal   0x00040000 -&amp;gt; 0x40060000
[    0.000000] Movable zone start PFN for each node
[    0.000000] early_node_map[4] active PFN ranges
[    0.000000]     0: 0x00000000 -&amp;gt; 0x00004000
[    0.000000]     0: 0x00024000 -&amp;gt; 0x00060000
[    0.000000]     1: 0x40000000 -&amp;gt; 0x40004000
[    0.000000]     1: 0x40024000 -&amp;gt; 0x40060000
[    0.000000] sizhiying--nr_node_ids:2,highest:3 FILE:mm/page_alloc.c,func:setup_nr_node_ids
[    0.000000] Detected 7 available secondary CPU(s)
[    0.000000] PERCPU: Embedded 3 pages/cpu @9800000006758000 s13376 r8192 d27584 u65536
[    0.000000] pcpu-alloc: s13376 r8192 d27584 u65536 alloc=4*16384
[    0.000000] pcpu-alloc: [0] 0 [0] 1 [0] 2 [0] 3 [0] 4 [0] 5 [0] 6 [0] 7 
[    0.000000] Built 2 zonelists in Zone order, mobility grouping on.  Total pages: 521600
[    0.000000] Policy zone: Normal
[    0.000000] Kernel command line: console=tty root=/dev/sda1 
[    0.000000] PID hash table entries: 4096 (order: 1, 32768 bytes)
[    0.000000] c0_config1 = fffffffffee37193
[    0.000000] Primary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.
[    0.000000] Primary data cache 64kB, 4-way, VIPT, no aliases, linesize 32 bytes
[    0.000000] c0_config2 = ffffffff80001743
[    0.000000] Unified secondary cache 4096kB 4-way, linesize 32 bytes, waybit=0.
total ram pages initialed 0
[    0.000000] BUG: Bad page state in process swapper  pfn:007b7
[    0.000000] page:980000010001b008 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] Disabling lock debugging due to kernel taint
[    0.000000] BUG: Bad page state in process swapper  pfn:007b8
[    0.000000] page:980000010001b040 count:0 mapcount:-1048576 mapping:(null) index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:6bdb6db6e00007b9
[    0.000000] page:980000010001b078 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x10000000000000()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:6bdb6db6e00007ba
[    0.000000] page:980000010001b0b0 count:0 mapcount:-15663104 mapping:(null) index:0x0
[    0.000000] page flags: 0x10000000000000()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007bb
[    0.000000] page:980000010001b0e8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007bd
[    0.000000] page:980000010001b158 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007be
[    0.000000] page:980000010001b190 count:0 mapcount:0 mapping:0010000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:6bdb6db6e00007bf
[    0.000000] page:980000010001b1c8 count:0 mapcount:-15663104 mapping:(null) index:0x0
[    0.000000] page flags: 0xff000000000000()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5ef8&gt;] free_hot_cold_page+0x5c/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:6bdb6db6e00007c0
[    0.000000] page:980000010001b200 count:0 mapcount:0 mapping:00ff000000000000 index:0x0
[    0.000000] page flags: 0xff000000000000()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c2
[    0.000000] page:980000010001b270 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c3
[    0.000000] page:980000010001b2a8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c4
[    0.000000] page:980000010001b2e0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c6
[    0.000000] page:980000010001b350 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c7
[    0.000000] page:980000010001b388 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007c8
[    0.000000] page:980000010001b3c0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ca
[    0.000000] page:980000010001b430 count:0 mapcount:0 mapping:0010000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007cb
[    0.000000] page:980000010001b468 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007cc
[    0.000000] page:980000010001b4a0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ce
[    0.000000] page:980000010001b510 count:0 mapcount:0 mapping:0010000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007cf
[    0.000000] page:980000010001b548 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d0
[    0.000000] page:980000010001b580 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d2
[    0.000000] page:980000010001b5f0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d3
[    0.000000] page:980000010001b628 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d4
[    0.000000] page:980000010001b660 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d6
[    0.000000] page:980000010001b6d0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d7
[    0.000000] page:980000010001b708 count:0 mapcount:-1048576 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007d8
[    0.000000] page:980000010001b740 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007da
[    0.000000] page:980000010001b7b0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007db
[    0.000000] page:980000010001b7e8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007dc
[    0.000000] page:980000010001b820 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007de
[    0.000000] page:980000010001b890 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007df
[    0.000000] page:980000010001b8c8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e0
[    0.000000] page:980000010001b900 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e2
[    0.000000] page:980000010001b970 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e3
[    0.000000] page:980000010001b9a8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e4
[    0.000000] page:980000010001b9e0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e6
[    0.000000] page:980000010001ba50 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e7
[    0.000000] page:980000010001ba88 count:0 mapcount:-1048576 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007e8
[    0.000000] page:980000010001bac0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ea
[    0.000000] page:980000010001bb30 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007eb
[    0.000000] page:980000010001bb68 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ec
[    0.000000] page:980000010001bba0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ee
[    0.000000] page:980000010001bc10 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ef
[    0.000000] page:980000010001bc48 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f0
[    0.000000] page:980000010001bc80 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f2
[    0.000000] page:980000010001bcf0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f3
[    0.000000] page:980000010001bd28 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f4
[    0.000000] page:980000010001bd60 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f6
[    0.000000] page:980000010001bdd0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f7
[    0.000000] page:980000010001be08 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007f8
[    0.000000] page:980000010001be40 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007fa
[    0.000000] page:980000010001beb0 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007fb
[    0.000000] page:980000010001bee8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007fc
[    0.000000] page:980000010001bf20 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007fe
[    0.000000] page:980000010001bf90 count:0 mapcount:0 mapping:00ff000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:007ff
[    0.000000] page:980000010001bfc8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:00800
[    0.000000] page:980000010001c000 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:00802
[    0.000000] page:980000010001c070 count:0 mapcount:0 mapping:0010000000000000 index:0x10000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:00803
[    0.000000] page:980000010001c0a8 count:0 mapcount:0 mapping:00ff000000000000 index:0xff000000000000
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] BUG: Bad page state in process swapper  pfn:00804
[    0.000000] page:980000010001c0e0 count:0 mapcount:-1048576 mapping:(null) index:0x0
[    0.000000] page flags: 0x0()
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8031f9b4&gt;] dump_stack+0x8/0x34
[    0.000000] [&lt;ffffffff803a3fec&gt;] bad_page+0x10c/0x138
[    0.000000] [&lt;ffffffff803a4ca4&gt;] free_pages_prepare+0xa8/0x100
[    0.000000] [&lt;ffffffff803a5d3c&gt;] __free_pages_ok+0x38/0x17c
[    0.000000] [&lt;ffffffff80de6ab4&gt;] free_all_bootmem_core+0x12c/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] Unhandled kernel unaligned access[#1]:
[    0.000000] Cpu 0
[    0.000000] $ 0   : 0000000000000000 00000000140000e0 0000000000000000 0000000000000000
[    0.000000] $ 4   : 0000000000000000 ffffffff80cf3c50 0000000000000002 0000000000000001
[    0.000000] $ 8   : 0000000000000040 0000000000000003 0000000000000001 0000000000000006
[    0.000000] $12   : 00000000140000e0 000000001000001e ffffffff80e30560 0000000000000000
[    0.000000] $16   : 0000000000000000 ffffffffdc690008 001af6daee9e5e08 ffffffff80e30540
[    0.000000] $20   : 0000000000000000 00001fffffffffff 0000000000021400 0000000000000009
[    0.000000] $24   : 0000000000000000 ffffffff8032382c                                &lt;br /&gt;
[    0.000000] $28   : ffffffff80cf0000 ffffffff80cf3c20 00000000000215f8 ffffffff80300400
[    0.000000] Hi    : 0000000000000000
[    0.000000] Lo    : 0000000000000003
[    0.000000] epc   : ffffffff8032bacc do_ade+0x1cc/0x594
[    0.000000]     Tainted: G    B    &lt;br /&gt;
[    0.000000] ra    : ffffffff80300400 ret_from_exception+0x0/0x24
[    0.000000] Status: 140000e2    KX SX UX KERNEL EXL 
[    0.000000] Cause : 40008010
[    0.000000] BadVA : 001af6daee9e5e0f
[    0.000000] PrId  : 00006305 (ICT Loongson-3A5)
[    0.000000] Modules linked in:
[    0.000000] Process swapper (pid: 0, threadinfo=ffffffff80cf0000, task=ffffffff80d015c0, tls=0000000000000000)
[    0.000000] Stack : 00000000140000e0 ffffffff80cf3bef 98000001000215f8 0010000000000000
[    0.000000]         0000000000060000 ffffffff80300400 0000000000000000 00000000140000e0
[    0.000000]         0000000000000000 001af6daee9e5e00 001af6db6db80000 0000000000000000
[    0.000000]         0000000000000002 0000000000000001 0000000000000040 0000000000000003
[    0.000000]         0000000000000001 0000000000000006 9800000100021540 98000001000215b0
[    0.000000]         ffffffff80e30560 0000000000000000 98000001000215f8 0010000000000000
[    0.000000]         0000000000060000 ffffffff80e30540 0000000000000000 00001fffffffffff
[    0.000000]         0000000000021400 0000000000000009 0000000000000000 ffffffff8032382c
[    0.000000]         0000000000000001 98000001000215c0 ffffffff80cf0000 ffffffff80cf3d80
[    0.000000]         00000000000215f8 ffffffff803a5f10 00000000140000e2 0000000000000000
[    0.000000]         ...
[    0.000000] Call Trace:
[    0.000000] [&lt;ffffffff8032bacc&gt;] do_ade+0x1cc/0x594
[    0.000000] [&lt;ffffffff80300400&gt;] ret_from_exception+0x0/0x24
[    0.000000] [&lt;ffffffff803a2c60&gt;] get_pageblock_flags_group+0x74/0xd0
[    0.000000] [&lt;ffffffff803a5f10&gt;] free_hot_cold_page+0x74/0x250
[    0.000000] [&lt;ffffffff80de6adc&gt;] free_all_bootmem_core+0x154/0x2ac
[    0.000000] [&lt;ffffffff80ddf980&gt;] mem_init+0xac/0x1b0
[    0.000000] [&lt;ffffffff80ddc8d0&gt;] start_kernel+0x190/0x468
[    0.000000] 
[    0.000000] 
[    0.000000] Code: 00431024  144000c6  00000000 &amp;lt;6a430007&amp;gt; 6e430000  24020000  0060902d  144000b0  00a0202d 
[    0.000000] Kernel panic - not syncing: Attempted to kill the idle task!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 29 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-08-29:2013/08/29/pmon/</guid><category>pmon</category></item><item><title>快速排序</title><link>http://king32783784.github.io/2013/07/01/sort/</link><description>&lt;h4&gt;1.快速排序&lt;/h4&gt;
&lt;p&gt;对于一个给定的数组，从中选择一个元素，以该元素为界将其余元素划分为两个子集，
一个子集的所有元素都小于该元素，另一个子集的元素都大于或等于该元素，
对两个子集递归执行这一过程，当某个子集中的元素小于二时，
这个子集就不需要再次排序，终止递归。&lt;/p&gt;
&lt;h4&gt;2.代码实现及测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//将中点的元素作为比较元素，放到整个数组的最左边&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//last位置放的将是比较元素，左边全是比它小的元素&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//对子集1进行递归调用&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//对子集2进行递归调用&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-07-01:2013/07/01/sort/</guid><category>算法</category></item><item><title>高性能计算机系统浮点性能测试</title><link>http://king32783784.github.io/2013/06/12/linpack/</link><description>&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/P5LS1TUY3V.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;h3&gt;一　工具介绍&lt;/h3&gt;
&lt;p&gt;Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark。通过利用高性能计算机，用高斯消元法求解N元一次稠密线性代数方程组的测试，评价高性能计算机的浮点性能。HPL是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 * N^3－2&lt;em&gt;N^2)。因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 * N^3－2&lt;/em&gt;N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出。
实测浮点峰值是指Linpack测试值，也就是说在这台机器上运行Linpack测试程序，通过各种调优方法得到的最优的测试结果。实际上在实际程序运行过程中，几乎不可能达到实测浮点峰值，更不用说达到理论浮点峰值了。这两个值只是作为衡量机器性能的一个指标，用来表明机器处理能力的一个标尺和潜能的度量。&lt;/p&gt;
&lt;p&gt;HPL作为一个基准测试程序在HPC领域取得了巨大的成功。它对趋势进行了准确的预测，积累的优化技巧对于提高实际应用的性能发挥了重要的作用。但是，随着应用的发展，它与实际应用之间的相关性在逐渐降低，需要寻找替代者。但并不支持淘汰HPL。HPL提供给我们的历史经验数据相当的宝贵，并且HPL促进了HPC应用范围的扩大，这些重要作用都决定了HPL不会被淘汰。HPCG将会作为TOP500排名一个可供选择的基准测试，就像Green500排名一样，重新排名HPC系统。HPCG最诱人的地方就是它包含在实际应用中广泛使用的关键的通讯和计算模式，而且足够简单。HPCG不仅具有实际的数值意义，而且非常容易被大家理解和接受。我们将会在现有和即将出现的平台上，针对实际的应用程序，完成HPCG的验证和校验。验证和校验过程将会提高HPCG的质量，使之逐渐成为一个被大家广泛认可的基准测试程序。&lt;/p&gt;
&lt;h3&gt;二　编译安装&lt;/h3&gt;
&lt;h4&gt;１.mpich2+GotoBLAS2+hpl&lt;/h4&gt;
&lt;h5&gt;1.1 mpich安装&lt;/h5&gt;
&lt;p&gt;普华服务器版本iSoftServerOS3.0_x86-64_Build4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.mpich.org/static/downloads/1.0.8/mpich2-1.0.8.tar.gz
#tar zxf mpich2-1.0.8.tar.gz
#cd mpich2-1.0.8
# ./configure
# make
# make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;普华桌面版本iSoftClientOS3.0SP1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/pacman.d/mirrorlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加SigLevel = Never”一行&lt;/p&gt;
&lt;p&gt;修改地址“Server = http://ftp.isoft.zhcn.cc/&lt;span class="math"&gt;\(repo/os/\)&lt;/span&gt;arch”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pacman -Rdd gcc-multilib
#pacman -Sy gcc-fortran
#wget http://www.mpich.org/static/downloads/1.0.8/mpich2-1.0.8.tar.gz

#tar zxf mpich2-1.0.8.tar.gz
#cd mpich2-1.0.8
# ./configure
# make
# make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;1.2 GotoBlas 2安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget https://www.tacc.utexas.edu/documents/1084364/1087496/GotoBLAS2-1.13.tar.gz/b58aeb8c-9d8d-4ec2-b5f1-5a5843b4d47b
#make TARGET=NEHALEM

For PPC
#vi cpuid_power.c 
if (!strncasecmp(p, &amp;quot;POWER6&amp;quot;, 6)) return CPUTYPE_POWER6;
POWER6改为POWER8
POWER6与POWER8存在差异，部分参数可能需要调整

安装过程中需要lapack-3.1.1.tgz，如果测试机没有外网，请手动下载后放到$HOME目录
#make TARGET=POWER BINARY=64
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;1.3 HPL安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.netlib.org/benchmark/hpl/hpl-2.1.tar.gz
#tar -zxf hpl-2.1.tar.gz
#cd cd hpl-2.1
#cp ./setup/Make.Linux_PII_FBLAS ./Make.goto
#vi Make.goto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改Make.goto文件
以下斜体部分是Make.goto文件的内容，//后为解释部分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;
&lt;span class="nv"&gt;ARCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; goto        //名字需和Make.goto的尾缀名字一致
&lt;span class="nv"&gt;TOPdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/linpack-x86/hpl-2.1    //hpl源码所在目录
&lt;span class="nv"&gt;MPdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/linpack-x86/mpich2-1.0.8    //mpich2源码所在目录
&lt;span class="nv"&gt;LAdir&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/Bench/GotoBLAS2    // GotoBlas源码的目录
&lt;span class="nv"&gt;LAlib&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LAdir&lt;span class="k"&gt;)&lt;/span&gt;/libgoto2.a     // GotoBlas静态库
&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; /usr/bin/mpicc       //mpicc的绝对路径
&lt;span class="nv"&gt;LINKER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; /usr/bin/mpif77     //mpif77绝对路径  ”

&lt;span class="c"&gt;#make arch=Goto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.openmpi+BLAS+hpl&lt;/h4&gt;
&lt;h5&gt;2.1 Openmpi安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.open-mpi.org/software/ompi/v1.7/downloads/openmpi-1.7.2.tar.bz2
#tar xf openmpi-1.7.2.tar.bz2
# ./configure --prefix=/shared/openmpi/openmpi-1.7.2 --enable-orterun-prefix-by-default
# make 
#make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;2.2 BLAS&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# wget http://www.netlib.org/lapack/lapack-3.4.2.tgz
#tar zxf lapack-3.4.2.tgz
#cd lapack-3.4.2
#cp INSTALL/make.inc.gfortran ./make.inc
#make blaslib
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;2.3 HPL&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://www.netlib.org/benchmark/hpl/hpl.tgz
#tar zxf hpl.tgz
#cd hpl-2.1
#cp setup/Make.Linux_PII_FBLAS ./Make.ompi17
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改Make.ompi17 注：部分绝对路径根据实际环境做相应调整&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--- setup/Make.Linux_PII_FBLAS    &lt;/span&gt;
&lt;span class="s2"&gt;+++ Make.ompi17&lt;/span&gt;
&lt;span class="s2"&gt;@@ -64 +64 @@&lt;/span&gt;
&lt;span class="s2"&gt;-ARCH         = Linux_PII_FBLAS&lt;/span&gt;
&lt;span class="s2"&gt;+ARCH         = ompi17&lt;/span&gt;
&lt;span class="s2"&gt;@@ -70 +70 @@&lt;/span&gt;
&lt;span class="s2"&gt;-TOPdir       = $(HOME)/hpl&lt;/span&gt;
&lt;span class="s2"&gt;+TOPdir       = /home/testtool-gcc-ppc/hpc-mpi/lapack-3.4.2/hpl-2.1&lt;/span&gt;
&lt;span class="s2"&gt;@@ -84 +84 @@&lt;/span&gt;
&lt;span class="s2"&gt;-MPdir        = /usr/local/mpi&lt;/span&gt;
&lt;span class="s2"&gt;+MPdir        = /shared/openmpi/openmpi-1.7.2/&lt;/span&gt;
&lt;span class="s2"&gt;@@ -86 +86 @@&lt;/span&gt;
&lt;span class="s2"&gt;-MPlib        = $(MPdir)/lib/libmpich.a&lt;/span&gt;
&lt;span class="s2"&gt;+MPlib        =&lt;/span&gt;
&lt;span class="s2"&gt;@@ -95 +95 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LAdir        = $(HOME)/netlib/ARCHIVES/Linux_PII&lt;/span&gt;
&lt;span class="s2"&gt;+LAdir        =/home/testtool-gcc-ppc/hpc-mpi/lapack-3.4.2&lt;/span&gt;
&lt;span class="s2"&gt;@@ -97 +97 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LAlib        = $(LAdir)/libf77blas.a $(LAdir)/libatlas.a&lt;/span&gt;
&lt;span class="s2"&gt;+LAlib        =  $(LAdir)/librefblas.a&lt;/span&gt;
&lt;span class="s2"&gt;@@ -169 +169 @@&lt;/span&gt;
&lt;span class="s2"&gt;-CC           = /usr/bin/gcc&lt;/span&gt;
&lt;span class="s2"&gt;+CC           = /shared/openmpi/openmpi-1.7.2/bin/mpicc&lt;/span&gt;
&lt;span class="s2"&gt;@@ -176 +176 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LINKER       = /usr/bin/g77&lt;/span&gt;
&lt;span class="s2"&gt;+LINKER       = /shared/openmpi/openmpi-1.7.2/bin/mpif90&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#make arch=ompi17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.运行时可能会出现找到mpi库的问题，请将mpi库移动到/lib64或修改程序库搜索路径。

2.如果Openmpi启动失败，可以采用mpich2+BLAS+hpl进行编译测试。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;三.测试执行&lt;/h3&gt;
&lt;h4&gt;1.测试调优参数&lt;/h4&gt;
&lt;p&gt;测试参数保存在HPL.out文件，修改参数时，直接修改HPL.out文件。HPL文件内容如下，注：斜体部分为文本内容，//号为解释部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HPL.out      output file name (if any)  //输出文件名，同下一行一起设定

6            device out (6=stdout,7=stderr,file)  //6标准输出，7标准错误输出，file可以设定为保存至特定文件，文件名上一行设定

4            # of problems sizes (N)//选择测试规模的数量

29 30 34 35  Ns   //计算规模的大小,一般规模越大，得出的结果越优，但规模越大，占用的内存也就越大，对系统造成的影响也越明显。所以，一般根据实际物理内存大小进行计算：N*N*8=内存总量*0.8

1            # of NBs //分块矩阵的数量

1 2 3 4      NBs //分块矩阵的大小，HPL采用分块矩阵的算法。分块的大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得到最优值，一般在256以下，NB × 8最好为
Cache line的倍数。

0 PMAP process mapping (0=Row-,1=Column-major)  //选择处理器阵列是列的排列方式还是按行的排列方式。按列的排列方式适用于节点数较多、每个节点内CPU数较少的系统；而按行的排列方式适用于节点数较少、每个节点内CPU数较多系统。在机群系统上，按列的排列方式的性能远好于按行的排列方式。

1            # of process grids (P x Q) //选择测试线程类型的数量

1 1 4        Ps

1 4 1        Qs    //二维处理器网格（P × Q），P × Q = 系统CPU数 = 进程数。P≤Q，一般来说，P的值尽量取得小一点，因为列向通信量（通信次数和通信数据量）要远大于横向通信（和实际CPU物理阵列有关）。P = 2n，即P最好选择2的幂。HPL中，L分解的列向通信采用二元交换法（Binary Exchange），当列向处理器个数P为2的幂时，性能最优。例如，当系统进程数为4的时候，P × Q选择为1 × 4的效果要比选择2 × 2好一些。 这主要取决于CPU物理互联网络。在集群测试中，P × Q  系统CPU总核数

16.0         threshold   //测试的精度，保持默认即可

1            # of panel fact  //选PFACTS算法的方式，可以进行试验进行选择

0 1 2        PFACTs (0=left, 1=Crout, 2=Right)// 用PFACTs算法对nn列作消元

2            # of recursive stopping criterium //选择NBMINS的值，递归L分解

2 4          NBMINs (&amp;gt;= 1) //设定NBMINS的值，一般推荐2、4、8

1            # of panels in recursion  //选择NDIVS的值

2            NDIVs  //设定NDIVS的值

1            # of recursive panel fact.  //选择PFACTs算法

0 1 2        RFACTs (0=left, 1=Crout, 2=Right)


1            # of broadcast    //选择L的横向广播方式


0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)  // HPL提供六种广播方式。其中前四种适合于快速网络；后两种采用将数据切割后传送的方式，主要适合于速度较慢的 网络。前四种算法，分别采用单环/双环、第一列处理器不优先/优先。 01234567t=0t=1t=2t=3t=4t=5t=6t=70)Increasing-ring:单环,不优先01234567t=0,1t= 2t=3t=4t=5t=6t=71)Increasing-ring(M):单环,优先01234567t=0,1t=1t=2t=3t=2t=3t= 4t=52)Increasing-2-ring:双环,不优先01234567t=0,1,2t=2t=3t=3t=4t=5t=63) Increasing-2-ring(M):双环,优先。对于系统规模较小、处理器数（进程数）较少的系统来说，这四个选择对性能影响很小。对于横向处理器数Q较大的网络来来说，选择双环可以减少横向通信宽度，较小横向通信延迟。另外，第一列处理器优先算法也可以确保下一次L分解的尽早开始。在小规模系统中，一般选择0或1；对于大规模系统，一般选3


1            # of lookahead depth //选择横向通信的通信深度


0            DEPTHs (&amp;gt;=0)  // DEPTHs＝0表明将L一次性广播出去，也就是将整个L分解完成以后在一次性广播； DEPTHs＝1表示将L分两次广播；依此类推.小规模系统中，DEPTHs一般选择1或2；对于大规模系统，选择2～5之间


2            SWAP (0=bin-exch,1=long,2=mix)


64           swapping threshold  // U的广播为列向广播，HPL共提供了三种U的广播算法：二元交换（Binary Exchange）法、Long法和二者混合法。SWAP=“0”，采用二元交换法；SWAP=“1”，采用Long法；SWAP=“2”，采用混合法。二元交换法的通信开销为㏒2P×（Latency＋NB×LocQ（N）/Bandwith），适用于通信量较小的情况；Long法的通信开销为（㏒2P＋ P－1）×Latency＋K×NB×LocQ（N）/Bandwith，适用于通信量较大的情况。其中P为列向处理器数，Latency为网络延迟， Bandwith为网络带宽，K为常数，其经验值约为2.4。LocQ（N）＝NB×NN为通信量，NN随着求解过程的进行逐步减少。由于NN在求解过程中在不断的变化，为了充分发挥两种算法的优势，HPL提供了混合法，当NN≤swapping threshold（第27行指定）时，采用二元交换；否则采用Long法。一般来说，我们选择混合法，阈值可通过公式求得一个大概值。对于小规模系统来说，此值性能影响不大，采用其缺省值即可。


0            L1 in (0=transposed,1=no-transposed) form  //选择L的数据存放方式


0          U  in (0=transposed,1=no-transposed) form   //选择U的数据存放格式。C语言矩阵在内存是按行存放的，Fortran语言是按列存放的。由于HPL采用C语言书写，而调用的BLAS库有可能采用C语言，也有可能采用Fortran语言编写。若选择“transposed”，则采用按列存放，否则按行存放。可以根据实际测试进行选择。


1            Equilibration (0=no,1=yes)  //选择是否回代，默认即可


8            memory alignment in double (&amp;gt; 0)  // 内存分配中作地址对齐,根据实际测试结果选择
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.单核单线程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#cd /home/linpack-x86/hpl-2.1/bin/goto
#vi HPL.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置PQ值为1x1&lt;/p&gt;
&lt;p&gt;物理内存为8G，设置规模大小为28800&lt;/p&gt;
&lt;p&gt;其余值可以保持默认，测试时，可以根据实际物理平台，进行试验，进行选择。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#./xhpl
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.多核多线程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echo secretword=abc123 &amp;gt; /etc/mpd.conf&lt;/span&gt;

&lt;span class="c1"&gt;#chmod 600 /etc/mpd.conf&lt;/span&gt;

&lt;span class="c1"&gt;#mpd&amp;amp;&lt;/span&gt;

&lt;span class="err"&gt;注：普华服务器系统&lt;/span&gt;&lt;span class="n"&gt;iSoftServerOS3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;_x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="n"&gt;_Build4&lt;/span&gt; &lt;span class="err"&gt;启动&lt;/span&gt;&lt;span class="n"&gt;mpd&lt;/span&gt;&lt;span class="err"&gt;时会出现以下提示：&lt;/span&gt;

&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;popen2&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;popen2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from  md5       import  new as md5new”&lt;/p&gt;
&lt;p&gt;应该为python版本问题造成，可以降低python版本或忽略该问题。&lt;/p&gt;
&lt;p&gt;CPU实际的物理核数为4.修改hpl文件中的PQ值为1x4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 4 ./xhpl
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.大页模式测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#umount /mnt
#mount -t hugetlbfs none /mnt
#echo 3 &amp;gt; /proc/sys/vm/drop_caches
#cat /proc/meminfo | grep Hugepagesize // iSoftServerOS3.0_x86-64_Build4的单页大小为2048KB
#echo 3276&amp;gt; /proc/sys/vm/nr_hugepages //实际物理内存为8G，大页面数量应该为8Gx0.8x1024/2=3276
# echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf 
#mpd&amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CPU实际的物理核数为4.修改hpl文件中的PQ值为1x4
修改规模大小：N&lt;em&gt;N&lt;/em&gt;8=3276&lt;em&gt;2&lt;/em&gt;1024&lt;em&gt;1024&lt;/em&gt;0.8
N设定为26112&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 4 ./xhpl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：此处调用的xhpl，需对hpl代码进行修改，使其调用hugpage&lt;/p&gt;
&lt;h4&gt;5.集群测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf
注：每个Node都必须添加该文件，并且正确设置该文件的权限
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面以2个节点进行测试说明。
设定每个节点的名字&lt;/p&gt;
&lt;p&gt;临时修改hostname方法：&lt;/p&gt;
&lt;p&gt;设定主节点为node0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#hostname node0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设定第1个次节点为node1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#hostname node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;永久修改hostname方法：&lt;/p&gt;
&lt;p&gt;iSoftServerOS3.0_x86-64_Build4 平台&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/sysconfig/network
修改HOSTNAME=node0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;iSoftClientOS3.0 SP1 平台&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/hostname
输入 node0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置主机名与ip地址映射&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#vi /etc/hosts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主节点node0 添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;“192.168.32.165 node0
192.168.32.171 node1”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Node1添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;“192.168.32.165 node0
192.168.32.171 node1”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置免密码登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#ssh-keygen -t rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连续点击enter键&lt;/p&gt;
&lt;p&gt;将主节点node0的公钥文件复制到集群的node1节点上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#scp /root/.ssh/id_rsa.pub root@node1:/root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;登录到节点node1上，将主节点的公钥信息追加到/root/.ssh/authorized_keys文件中，并设置authorized_keys的权限，顺序执行以下两条命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node1 ~]#cat id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys 
[root@node1 ~]#chmod 600 .ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Node1，方法同步骤（1）-（3），即在每个节点上都生成一对公私密钥，并且将各自的公钥信息追加到主节点的/root/.ssh/authorized_keys文件中。 
设置完成后验证一下节点之间是否可以实现无密码登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#ssh root@node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;无需输入密码，可以直接登录。&lt;/p&gt;
&lt;p&gt;将主节点node0系统中的hpl文件复制到其他节点相同目录位置&lt;/p&gt;
&lt;p&gt;[root@node0 home]#scp -r linpack-x86 root@node1:/home/&lt;/p&gt;
&lt;p&gt;在主节点的hpl目录下新建mpd.hosts文件&lt;/p&gt;
&lt;p&gt;内容如下：
“node1
node2”&lt;/p&gt;
&lt;p&gt;分别在各节点启动mpd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpd &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主节点启动集群系统&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node0 goto]#mpdboot -n 2 -f mpd.hosts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行测试&lt;/p&gt;
&lt;p&gt;2个节点总核数为8，PQ值设定为8*1&lt;/p&gt;
&lt;p&gt;规模大小以集群总内存进行计算，设定为29184&lt;/p&gt;
&lt;p&gt;注:如果内存不一致，一般以最小内存的倍数进行计算&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node0 goto]#mpiexec -n 8 ./xhpl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意确保网络连通，如果出现网络断开，则测试失败。&lt;/p&gt;
&lt;h4&gt;4.测试结果分析&lt;/h4&gt;
&lt;p&gt;测试结果的常见输出信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;================================================================================
HPLinpack 2.1  --  High-Performance Linpack benchmark  --   October 26, 2012
Written by A. Petitet and R. Clint Whaley,  Innovative Computing Laboratory, UTK
Modified by Piotr Luszczek, Innovative Computing Laboratory, UTK
Modified by Julien Langou, University of Colorado Denver
================================================================================

An explanation of the input/output parameters follows:
T/V    : Wall time / encoded variant.
N      : The order of the coefficient matrix A.
NB     : The partitioning blocking factor.
P      : The number of process rows.
Q      : The number of process columns.
Time   : Time in seconds to solve the linear system.
Gflops : Rate of execution for solving the linear system.

The following parameter values will be used:

N      :   17280 
NB     :     256 
PMAP   : Row-major process mapping
P      :       1 
Q      :       1 
PFACT  :    Left 
NBMIN  :       2 
NDIV   :       2 
RFACT  :    Left 
BCAST  :   1ring 
DEPTH  :       0 
SWAP   : Mix (threshold = 64)
L1     : transposed form
U      : transposed form
EQUIL  : yes
ALIGN  : 8 double precision words

--------------------------------------------------------------------------------

- The matrix A is randomly generated for each test.
- The following scaled residual check will be computed:
      ||Ax-b||_oo / ( eps * ( || x ||_oo * || A ||_oo + || b ||_oo ) * N )
- The relative machine precision (eps) is taken to be               1.110223e-16
- Computational tests pass if scaled residuals are less than                16.0

================================================================================
T/V                N    NB     P     Q               Time                 Gflops
--------------------------------------------------------------------------------
WR00L2L2       17280   256     1     1              75.77              4.541e+01  //测试结果
HPL_pdgesv() start time Sun Jan  4 09:33:11 2015

HPL_pdgesv() end time   Sun Jan  4 09:34:27 2015

--------------------------------------------------------------------------------
||Ax-b||_oo/(eps*(||A||_oo*||x||_oo+||b||_oo)*N)=        0.0050103 ...... PASSED
================================================================================

Finished      1 tests with the following results:
              1 tests completed and passed residual checks,
              0 tests completed and failed residual checks,
              0 tests skipped because of illegal input values.
--------------------------------------------------------------------------------

End of Tests.
================================================================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中4.541e+01Gflops为测试结果，表示Linpack测试浮点值为45.41 Gflops&lt;/p&gt;
&lt;p&gt;由此可以计算该系统的效率。以此次测试为例：&lt;/p&gt;
&lt;p&gt;该平台所用CPU为 Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz&lt;/p&gt;
&lt;p&gt;为4核CPU。&lt;/p&gt;
&lt;p&gt;INTELcore系列CPU每个时钟周期执行浮点运算的次数一般为8次，CPU的主频为3.1G。可以计算得出该CPU的理论浮点值为 3.1&lt;em&gt;4&lt;/em&gt;8=99.2G&lt;/p&gt;
&lt;p&gt;所以该平台的系统的效率为45.41/99.2约45.8%。&lt;/p&gt;
&lt;h3&gt;附1HPCG（高性能共轭梯度基准测试）&lt;/h3&gt;
&lt;p&gt;普通编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.hpcg-benchmark.org/downloads/hpcg-2.4.tar.gz
#tar zxf hpcg-2.4.tar.gz
#cd hpcg-2.4
#make arch=GCC_OMP
#cd bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;hpcg.dat 保持默认即可 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#./xhpcg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多核编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget  http://www.mpich.org/static/downloads/3.1.3/mpich-3.1.3.tar.gz
#tar zxf mpich-3.1.3.tar.gz
#cd mpich-3.1.3
#./configure
#make
#make install
#wget http://www.hpcg-benchmark.org/downloads/hpcg-2.4.tar.gz
#tar zxf hpcg-2.4.tar.gz
#cd hpcg-2.4
#make  arch=Linux_MPI
#cd bin/
#echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf 
#mpd&amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;hpcg.dat 保持默认即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 2 ./xhpcg
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;附2. Intel MPI 和 已编译好的linpack测试&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;解压缩 tar –zxvf l_mpi_p_3.2.011.tgz

创建安装目录 mkdir /Clusterr/intelmpi ,拷贝license 到解压缩的目录中

执行 ./install.sh

root@mng l_mpi_p_3.1.038]# ./install.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完intel mpi后，使用intel编译好的linpack测试包  将l_lpk_p_10.0.2.010.tgz解压缩 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar –zxvf l_lpk_p_10.0.2.010.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试方法同上面。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Wed, 12 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-06-12:2013/06/12/linpack/</guid><category>benchmark</category></item><item><title>通过printf函数简单实现解析不定参数表</title><link>http://king32783784.github.io/2013/05/27/C/</link><description>&lt;p&gt;&lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/P5LS1TUY3V.jpg" height="280" width="420"&gt;&lt;/p&gt;
&lt;p&gt;先看代码，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;minprintf&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include&amp;lt;stdarg.h&amp;gt;
/*minprintf:minimal printf with variable argument list */

void minprintf(char *fmt,...)

{

va_list ap; /*points to unnamed arg in turn */

char *p, *sval;

int ival;

double dval;

va_start(ap,fmt); /*make ap point to 1st unamed arg*/

for (p = fmt; *p; p++) {

if (*p != &amp;#39;%&amp;#39;) {

putchar(*p);

continue;

}

switch(*++p) {


case &amp;#39;d&amp;#39;:

ival = va_arg(ap ,int);

printf(&amp;quot;%d&amp;quot;, ival);

break;


case &amp;#39;f&amp;#39;:

ival = va_arg(ap ,double);

printf(&amp;quot;%f&amp;quot;, ival);

break;

case &amp;#39;s&amp;#39;:

for(sval = va_arg(ap,char *);*sval;sval ++)

putchar(*sval);

break;

default:

putchar(*p);

break;

}

}

va_end(ap) ; /*clean up when done*/

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在C语言中，没有函数重载。所以要想实现不定数目的函数参数，变得比较复杂。了解这个问题，涉及到标准头文件&lt;stdarg,h&gt;几个宏定义，va_start和va_end 等。在此之前，先看一下C语言中传递函数的参数时的用法和原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.在c中，当我们无法列出传递函数的所有实参的类型和数目时，，可以用省略号指定参数列表。&lt;/p&gt;
&lt;p&gt;void foo(...);&lt;/p&gt;
&lt;p&gt;void foo(parm_list,..);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是C中一种传参的形式，多用于变长参数表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.函数参数传递的原理&lt;/p&gt;
&lt;p&gt;函数参数是以数据结构：栈的形式存取，从右至左入栈。这跟栈的机制有关。&lt;/p&gt;
&lt;p&gt;参数的内存存放格式：参数存放在内存的堆栈段中，在执行函数时，从最后一个开始入栈。因此栈底的高地址，栈顶低地址。void func(int x,float y,char z),在函数调用的时候，是参char z先进栈，然后是 floaty,intx,出的时候顺序是相反的。理论上说，如果我们找到任意变量的地址，并知道其他变量的类型，便可以通过移动位置（指针移位运算，找到其他的输入变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看几个宏定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef char* va_list;

void va_start(va_list ap, prev_param):/ANSI version*/

type va_arg(va_list ao,type);

void va_end(va_list ap);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;va_list是一个字符指针，可以理解为当前参数的一个指针，取参必须通过这个指针进行。&lt;/p&gt;
&lt;p&gt;1在调用参数表之前，定义一个va_list类型的变量（假设va_list类型变量被定义为ap）；&lt;/p&gt;
&lt;p&gt;2然后应该对ap进行初始化，让它指向可变参数列表的第一个参数，是通过va_start实现的，第一个参数是ap本身，第二个参数是在变参表前面紧挨着的一个变量，即“...”之前的那个参数。&lt;/p&gt;
&lt;p&gt;3 获取参数，调用va_arg,他的第一个参数是ap，第二个参数是获取的参数的指定类型，然后返回这个指定类型的值，并且把ap指向参数的下一个变量位置&lt;/p&gt;
&lt;p&gt;4 获取所有参加之后，我们有必要将ap指针关掉，调用va_end ，他是将ap指向为空，应该养成取完参数之后，关闭指针的习惯，一般情况下，vstart 和 vend 同时出现。&lt;/p&gt;
&lt;p&gt;如下面的小例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,..)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取省略号指定的参数&lt;/p&gt;
&lt;p&gt;在函数体声明一个va_list，然后用va_start函数获取参数列表中的参数,使用完毕后调用va_end（）结束，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void TestFun(char *pszDest, int DestLen, const char* pszFormat,...)

{

  va_list args;

  va_start(args,pszFormat); //&amp;quot;一定要&amp;quot;...&amp;quot;之前的那个参数

  _vsnprintf(pszDest,Destlen,pszFormat,args);

  va_end(args);
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.如何使用参数个数可变的函数,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/*注意函数原型声明,至少有一个确定的参数,后面跟省略号*/&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,...)&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DEMO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;demo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,...)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="cm"&gt;/*定义保存函数参数的结构*/&lt;/span&gt;

&lt;span class="kt"&gt;va_list&lt;/span&gt; &lt;span class="n"&gt;argp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*argp 指向第一个可选参数,msg是最后一个确定的参数*/&lt;/span&gt;

&lt;span class="n"&gt;va_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;va_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Parameter #%d is :%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;argno&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;va_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;retrun&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6 回过头来看一下一开始那个程序.&lt;/p&gt;
&lt;p&gt;minprintf函数用来遍历printf函数的参数表,它的参数为printf函数中参数的指针
指针ap 用来实现遍历函数的参数列表.在函数运行中ap会先后指向参数表中的每一个参数.&lt;/p&gt;
&lt;p&gt;va_start(ap,fmt).ap指向省略中的第一个参数.fmt指向最后一个函数参数表中有名参数.即开始时ap指向的参数的前一个参数.&lt;/p&gt;
&lt;p&gt;for(p =fmt;&lt;em&gt;p;p++),p初始为&lt;/em&gt;fmt ,即指向ap前一个参数,通过对p的循环实现ap指针遍历省略的参数表.&lt;/p&gt;
&lt;p&gt;就有了下面的switch,来讨论可能出现的参数.&lt;/p&gt;
&lt;p&gt;最后通过va_end(ap),将ap指向NULL.避免出现异常.注意:，应该养成，关闭指针的习惯.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 27 May 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-05-27:2013/05/27/C/</guid><category>C</category></item><item><title>wireshark使用指南</title><link>http://king32783784.github.io/2011/11/01/Tool/</link><description>&lt;h3&gt;工具安装&lt;/h3&gt;
&lt;p&gt;大部分linux系统都有对应的软件包，直接按照软件安装即可。
比如： yum install wireshark&lt;/p&gt;
&lt;h3&gt;抓取报文&lt;/h3&gt;
&lt;p&gt;启动Wireshark并且在接口列表中选择接口名，然后开始在此接口上抓包。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark01.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;例如，在捕获筛选器选择enp1s0.
点击enp1s0后，就可以看到实时的接收的报文。
上端面板每一行对应一个网络报文，默认显示报文接收时间（相对开始抓取的时间点），源和目标IP地址，使用协议和报文相关信息。点击某一行可以在下面两个窗口看到更多信息。“+”图标显示报文里面每一层的详细信息。底端窗口同时以十六进制和ASCII码的方式列出报文内容。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark02.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;需要停止的时候，点击左上角的停止按键。
色彩标识：
进行到这里已经看到报文以绿色，蓝色，黑色显示出来。Wireshark通过颜色让各种流量的报文一目了然。比如默认绿色是TCP报文，深蓝色是DNS，浅蓝是UDP，黑色标识出有问题的TCP报文——比如乱序报文。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark03.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;h3&gt;报文样本&lt;/h3&gt;
&lt;p&gt;打开一个抓取文件相当简单，在主界面上点击Open并浏览文件即可。也可以在Wireshark里保存自己的抓包文件并稍后打开&lt;/p&gt;
&lt;h3&gt;过滤报文&lt;/h3&gt;
&lt;p&gt;如果正在尝试分析问题，比如打电话的时候某一程序发送的报文，可以关闭所有其他使用网络的应用来减少流量。但还是可能有大批报文需要筛选，这时要用到Wireshark过滤器。&lt;/p&gt;
&lt;p&gt;最基本的方式就是在窗口顶端过滤栏输入并点击Apply（或按下回车）。例如，输入“dns”就会只看到DNS报文。输入的时候，Wireshark会帮助自动完成过滤条件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark04.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;也可以点击分析菜单选择显示筛选器来创建新的过滤条件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark05.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;另一件很有趣的事情是你可以右键报文并选择Follow TCP Stream。
你会看到在服务器和目标端之间的全部会话。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark06.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;
&lt;p&gt;关闭窗口之后，你会发现过滤条件自动被引用了——Wireshark显示构成会话的报文。&lt;/p&gt;
&lt;h3&gt;检查报文&lt;/h3&gt;
&lt;p&gt;选中一条报文，就可以深入挖掘它的内容了。&lt;/p&gt;
&lt;p&gt;也可以在这里创建过滤条件——只需右键细节并使用Apply as Filter子菜单，就可以根据此细节创建过滤条件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/wireshark07.png?raw=true" height="280" width="480"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Tue, 01 Nov 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2011-11-01:2011/11/01/Tool/</guid><category>wireshark</category></item><item><title>C-宏定义</title><link>http://king32783784.github.io/2011/08/15/C/</link><description>&lt;p&gt;&lt;strong&gt;1.简单的宏定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define MAXTIME 1000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简单的MATIME定义好了，它代表1000，如果在程序中写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if(i&amp;lt;MAXTIME){...}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译器在处理这个代码之前会对MAXTIME进行替换为1000。
宏定义类同于简单的文本替换，而不是变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.define的“函数定义”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;define可以像函数那样接受一些参数，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define max(x,y)(x)&amp;gt;(y)?(x):(y);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个定义将返回两个数中最大的，而且这个函数没有经过类型检查，好像函数模板，但没有模板安全。存在隐患：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define Add(a,b) a+b;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果代数式 c&lt;em&gt;Add(a,b)&lt;/em&gt;d,本意为a+b然后去和c、d相乘，而define只是一个简单替换，式子反而变为了： c&lt;em&gt;a + b&lt;/em&gt;d ,忽略了运算规则。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define pin(int*);
pin a,b;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本来是想定义a，b都是int型指针，而一替换变成了 int*a,b; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.宏的单行定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define A(x) T_##x
#define B (x)#@x
#define C (x)#x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们假设x=1,则有：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A(1): T_1
B(1): &amp;#39;1&amp;#39;
C(1): &amp;quot;1&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;3.define的多行定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;define可以替换多行的代码，例如MFC中的宏定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define MACRO(arg1, arg2) do{/
    /*declarations*/
stmt1;/
stmt2;/
}while(0) /*(no trailing;)*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每行换行时加上换行符“/”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.条件编译&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在大规模的开发中，define最重要的功能就是条件编译。也就是本文的用法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef UCLINU&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译时，可以通过#define设置编译环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5如何定义宏，取消宏&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//定义宏&lt;/span&gt;
&lt;span class="cp"&gt;#define [MarcoName] [Macro Value]&lt;/span&gt;
&lt;span class="c1"&gt;//取消宏&lt;/span&gt;
&lt;span class="cp"&gt;#undef [MacroName]&lt;/span&gt;
&lt;span class="c1"&gt;//普通宏&lt;/span&gt;
&lt;span class="cp"&gt;#define PI(3.14]&lt;/span&gt;
&lt;span class="c1"&gt;//带参数的宏&lt;/span&gt;
&lt;span class="cp"&gt;#define max(a,b)((a)&amp;gt;(b)?(a),(b))&lt;/span&gt;
&lt;span class="err"&gt;加括号是个好习惯哦&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;6.头文件(.h)可以被头文件或C文件包含&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重复包含（重复定义）
由于头文件包含可以嵌套，那么C文件就有可能包含多次同一个头文件，就可能出现重复定义的问题的。
通过条件编译开关来避免重复包含（重复定义）&lt;/p&gt;
&lt;p&gt;例如
    #ifndef &lt;strong&gt;headerfileXXX&lt;/strong&gt;
    #define &lt;strong&gt;headerfileXXX&lt;/strong&gt;
    …
    //文件内容
    …
    #endif&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.define命令的一些高级用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;define中的三个特殊符号“#” “##” “#@”，前面提到过但未解释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define Conn(x,y) x##y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;x##y 表示什么？ 表示x连接y,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int n = Conn(123, 456); //表示n=123456 相信你已经猜到了
char* str = Conn(&amp;quot;asdf&amp;quot;, &amp;quot;adf&amp;quot;); //表示str = &amp;quot;asdfadf&amp;quot;

#define ToChar(x) #@x
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;@x，就是给x加上单引号，返回一个const char:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;char a = ToChar(1) //a=&amp;#39;1&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;x, 就是加双引号.&lt;/h1&gt;
&lt;p&gt;下面看一下宏定义常用用法：&lt;/p&gt;
&lt;p&gt;防止头文件被重复包含：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef BODYDEF_H&lt;/span&gt;
&lt;span class="cp"&gt;#define BODYDEF_H&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到指定地址上的一个字节或字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define MEM_B( x ) ( *( (byte *) (x) ) )
#define MEM_W( x ) ( *( (word *) (x) ) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到一个field在结构体(struct)中的偏移量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define OFFSETOF( type, field ) ( (size_t) &amp;amp;(( type *) 0)-&amp;gt; field )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到一个结构体中field所占用的字节数 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define FSIZ( type, field ) sizeof( ((type *) 0)-&amp;gt;field )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到一个变量的地址（word宽度） &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define B_PTR( var ) ( (byte *) (void *) &amp;amp;(var) ) 
#define W_PTR( var ) ( (word *) (void *) &amp;amp;(var) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将一个字母转换为大写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define UPCASE( c ) ( ((c) &amp;gt;= &amp;#39;&amp;#39;a&amp;#39;&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;&amp;#39;z&amp;#39;&amp;#39;) ? ((c) - 0x20) : (c) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;判断字符是不是10进值的数字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define DECCHK( c ) ((c) &amp;gt;= &amp;#39;&amp;#39;0&amp;#39;&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;&amp;#39;9&amp;#39;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;判断字符是不是16进值的数字 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define HEXCHK( c ) ( ((c) &amp;gt;= &amp;#39;&amp;#39;0&amp;#39;&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;&amp;#39;9&amp;#39;&amp;#39;) ||((c) &amp;gt;= &amp;#39;&amp;#39;A&amp;#39;&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;&amp;#39;F&amp;#39;&amp;#39;) ||((c) &amp;gt;= &amp;#39;&amp;#39;a&amp;#39;&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;&amp;#39;f&amp;#39;&amp;#39;) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;防止溢出的一个方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define INC_SAT( val ) (val = ((val)+1 &amp;gt; (val)) ? (val)+1 : (val))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回数组元素的个数 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用一些宏跟踪调试
在调试时，我们可以设置__DEBUG宏，也可以再Makefile中使用-D编译选项设置，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[cpp] view plain copy print?
#define __DEBUG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用方法为，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;plain&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef __DEBUG  &lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...);&lt;/span&gt;  
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，ANSI C标准中有几个标准预定义宏，前面几个（func...STDC）常用于printf(sprintf)等语句中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;__func__：在源代码中插入当前所在函数名；
__LINE__：在源代码中插入当前源代码行号；

__FILE__：在源文件中插入当前源文件名；

__DATE__：在源文件中插入当前的编译日期

__TIME__：在源文件中插入当前编译时间；

__STDC__：当要求程序严格遵循ANSI C标准时该标识被赋值为1；

__cplusplus：当编写C++程序时该标识符被定义。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中__cplusplus常用于头文件中，格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;plain&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef _ZX_FUNC_H  &lt;/span&gt;
&lt;span class="cp"&gt;#define _ZX_FUNC_H&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef __cplusplus  &lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cm"&gt;/* functions */&lt;/span&gt;  
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;strdup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef __cplusplus  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;extern"C"表示将其中的代码按照C编译方法编译，目的是实现C++与C语言的调用。&lt;/p&gt;
&lt;p&gt;C编译与C++编译的区别是：C会将上面strdup编译成_STRDUP符号，而C++会编译成_STRDUP_CHAR，这也是C++为什么能实现函数重载的原因。extern只能出现在C++文件中，一般如上面的方式置于头文件中。
要在C中调用C++代码，需要在C代码中的函数或变量声明为extern类型，在C++中将函数或变量用extern "C"修饰。&lt;/p&gt;
&lt;p&gt;简单数学计算（绝对值，三角函数等）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[cpp] view plain copy print?
#define ABS( a ) ( ((a)&amp;gt;0) ? (a) : (-(a)) )
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;define 一个复杂语句&lt;/h1&gt;
&lt;p&gt;比如交换a,b的值，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[cpp] view plain copy print?
#define(a,b) do { \  
    int t = 0;  
    t = a; \  
    a = b; \  
    b = t; \  
} while(0)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;define的这些高级用法在Linux内核源代码很多处出现，可阅读参考内核源代码。&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 15 Aug 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2011-08-15:2011/08/15/C/</guid><category>C</category></item><item><title>C-结构体声明</title><link>http://king32783784.github.io/2011/07/11/C/</link><description>&lt;p&gt;&lt;strong&gt;结构体声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如：
    struct Student
    {
         char name[20];
         char sex;
         int age;
         char addr[40];
     }
     /&lt;em&gt;定义一个Student 类型的student变量&lt;/em&gt;/
     struct Student student;&lt;/p&gt;
&lt;p&gt;定义结构体的时候每次都要写struct显得比较繁琐，可以用typedef来方便声明。这样就可以想int、char一样定义结构体类型了。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct _TEST_T {
    int i;
    char c[10];
}TEST_T;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.初始化的就是定义一个结构体变量，并且给它赋值比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEST_T gst  = {1, “12345”}; /*可以初始化，设置i为1，c为一个字符串.*/
TEST_T gst  = {1}; /*初始化个数少于实际个数时，只初始化前面的成员。*/
TEST_T gst  = {.c=“12345”}; /*有选择的初始化成员。*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、复合字面量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gst = (TEST_T){122, &amp;quot;1256&amp;quot;}; /*这是一个赋值语句，也可以作为初始化。可以出现在程序的任何地方。*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然也可以使用复合字面量来初始化：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gst = (TEST_T){.i=122, .c=&amp;quot;123&amp;quot;};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、结构体数组&lt;/p&gt;
&lt;p&gt;可以用多个大括号括起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEST_T gst[10] = \{\{\},\{\},\{\},\{\}\}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以初始化其中的一个元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEST_T gst[10] = {[2]={}, [3]={}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以使用复合字面量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEST_T gst[10] = {[2].i=0, [3].i={}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;为什么要初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、对局部变量初始化可以防止随机值产生的危害。&lt;/p&gt;
&lt;p&gt;2、对全局变量初始化可以告诉编译器，这是一个定义，而不是一个声明。（如果两个c中有相同的全局变量定义，且没有初始化，编译器会认为第二个是声明而不是定义。）&lt;/p&gt;
&lt;p&gt;声明和定义的区别在于是否分配内存进行存储。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 11 Jul 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2011-07-11:2011/07/11/C/</guid><category>C</category></item><item><title>常用shell命令</title><link>http://king32783784.github.io/2011/01/01/cmds/</link><description>&lt;h4&gt;Linux常用命令备忘&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.查找大于100M的文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find / -type f -size +100M
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2.换行符替换为空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sed ':label;N;s/\n/ /;t label'&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.在文本指定行首加空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 01 Jan 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2011-01-01:2011/01/01/cmds/</guid><category>shell</category></item><item><title>信号</title><link>http://king32783784.github.io/2009/10/12/UNIX/</link><description>&lt;p&gt;&lt;strong&gt;信号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们运行如下命令，可看到Linux支持的信号列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;kill&lt;/span&gt; -l1&lt;span class="o"&gt;)&lt;/span&gt; SIGHUP        &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGINT        &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGQUIT       &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGILL &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGTRAP       &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGABRT       &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGBUS        &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGFPE &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGKILL      &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGUSR1      &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGSEGV      &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGUSR213&lt;span class="o"&gt;)&lt;/span&gt; SIGPIPE      &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGALRM      &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGTERM      &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGCHLD18&lt;span class="o"&gt;)&lt;/span&gt; SIGCONT      &lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGSTOP      &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGTSTP      &lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGTTIN22&lt;span class="o"&gt;)&lt;/span&gt; SIGTTOU      &lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGURG       &lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGXCPU      &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGXFSZ26&lt;span class="o"&gt;)&lt;/span&gt; SIGVTALRM    &lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGPROF      &lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGWINCH     &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGIO30&lt;span class="o"&gt;)&lt;/span&gt; SIGPWR       &lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGSYS       &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN     &lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+136&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+2   &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+3   &lt;span class="m"&gt;38&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+4   &lt;span class="m"&gt;39&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+540&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+6   &lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+7   &lt;span class="m"&gt;42&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+8   &lt;span class="m"&gt;43&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+944&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+10 &lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+11 &lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+12 &lt;span class="m"&gt;47&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+1348&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+14 &lt;span class="m"&gt;49&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMIN+15 &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-14 &lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-1352&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-12 &lt;span class="m"&gt;53&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-11 &lt;span class="m"&gt;54&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-10 &lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-956&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-8   &lt;span class="m"&gt;57&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-7   &lt;span class="m"&gt;58&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-6   &lt;span class="m"&gt;59&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-560&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-4   &lt;span class="m"&gt;61&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-3   &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-2   &lt;span class="m"&gt;63&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX-164&lt;span class="o"&gt;)&lt;/span&gt; SIGRTMAX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列表中，编号为1 ~ 31的信号为传统UNIX支持的信号，是不可靠信号(非实时的)，编号为32 ~ 63的信号是后来扩充的，称做可靠信号(实时信号)。不可靠信号和可靠信号的区别在于前者不支持排队，可能会造成信号丢失，而后者不会。&lt;/p&gt;
&lt;p&gt;下面我们对编号小于SIGRTMIN的信号进行说明。&lt;/p&gt;
&lt;p&gt;1) SIGHUP&lt;/p&gt;
&lt;p&gt;本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。&lt;/p&gt;
&lt;p&gt;登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程 序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP 信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。不过可以捕获这个信号，比如wget能捕获SIGHUP信号，并忽 略它，这样就算退出了Linux登录，wget也能继续下载。&lt;/p&gt;
&lt;p&gt;此外，对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。&lt;/p&gt;
&lt;p&gt;2) SIGINT&lt;/p&gt;
&lt;p&gt;程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。&lt;/p&gt;
&lt;p&gt;3) SIGQUIT&lt;/p&gt;
&lt;p&gt;和SIGINT类似, 但由QUIT字符(通常是Ctrl-)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。&lt;/p&gt;
&lt;p&gt;4) SIGILL&lt;/p&gt;
&lt;p&gt;执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。&lt;/p&gt;
&lt;p&gt;5) SIGTRAP&lt;/p&gt;
&lt;p&gt;由断点指令或其它trap指令产生. 由debugger使用。&lt;/p&gt;
&lt;p&gt;6) SIGABRT&lt;/p&gt;
&lt;p&gt;调用abort函数生成的信号。&lt;/p&gt;
&lt;p&gt;7) SIGBUS&lt;/p&gt;
&lt;p&gt;非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。&lt;/p&gt;
&lt;p&gt;8) SIGFPE&lt;/p&gt;
&lt;p&gt;在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。&lt;/p&gt;
&lt;p&gt;9) SIGKILL&lt;/p&gt;
&lt;p&gt;用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。&lt;/p&gt;
&lt;p&gt;10) SIGUSR1&lt;/p&gt;
&lt;p&gt;留给用户使用&lt;/p&gt;
&lt;p&gt;11) SIGSEGV&lt;/p&gt;
&lt;p&gt;试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.&lt;/p&gt;
&lt;p&gt;12) SIGUSR2&lt;/p&gt;
&lt;p&gt;留给用户使用&lt;/p&gt;
&lt;p&gt;13) SIGPIPE&lt;/p&gt;
&lt;p&gt;管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。&lt;/p&gt;
&lt;p&gt;14) SIGALRM&lt;/p&gt;
&lt;p&gt;时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号.&lt;/p&gt;
&lt;p&gt;15) SIGTERM&lt;/p&gt;
&lt;p&gt;程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。&lt;/p&gt;
&lt;p&gt;17) SIGCHLD&lt;/p&gt;
&lt;p&gt;子进程结束时, 父进程会收到这个信号。&lt;/p&gt;
&lt;p&gt;如果父进程没有处理这个信号，也没有等待(wait)子进程，子进程虽然终止，但是还会在内核 进程表中占有表项，这时的子进程称为僵尸进程。这种情况我们应该避免(父进程或者忽略SIGCHILD信号，或者捕捉它，或者wait它派生的子进程，或 者父进程先终止，这时子进程的终止自动由init进程来接管)。&lt;/p&gt;
&lt;p&gt;18) SIGCONT&lt;/p&gt;
&lt;p&gt;让一个停止(stopped)的进程继续执行. 本信号不能被阻塞. 可以用一个handler来让程序在由stopped状态变为继续执行时完成特定的工作. 例如, 重新显示提示符&lt;/p&gt;
&lt;p&gt;19) SIGSTOP&lt;/p&gt;
&lt;p&gt;停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束, 只是暂停执行. 本信号不能被阻塞, 处理或忽略.&lt;/p&gt;
&lt;p&gt;20) SIGTSTP&lt;/p&gt;
&lt;p&gt;停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是Ctrl-Z)发出这个信号&lt;/p&gt;
&lt;p&gt;21) SIGTTIN&lt;/p&gt;
&lt;p&gt;当后台作业要从用户终端读数据时, 该作业中的所有进程会收到SIGTTIN信号. 缺省时这些进程会停止执行.&lt;/p&gt;
&lt;p&gt;22) SIGTTOU&lt;/p&gt;
&lt;p&gt;类似于SIGTTIN, 但在写终端(或修改终端模式)时收到.&lt;/p&gt;
&lt;p&gt;23) SIGURG&lt;/p&gt;
&lt;p&gt;有"紧急"数据或out-of-band数据到达socket时产生.&lt;/p&gt;
&lt;p&gt;24) SIGXCPU&lt;/p&gt;
&lt;p&gt;超过CPU时间资源限制. 这个限制可以由getrlimit/setrlimit来读取/改变。&lt;/p&gt;
&lt;p&gt;25) SIGXFSZ&lt;/p&gt;
&lt;p&gt;当进程企图扩大文件以至于超过文件大小资源限制。&lt;/p&gt;
&lt;p&gt;26) SIGVTALRM&lt;/p&gt;
&lt;p&gt;虚拟时钟信号. 类似于SIGALRM, 但是计算的是该进程占用的CPU时间.&lt;/p&gt;
&lt;p&gt;27) SIGPROF&lt;/p&gt;
&lt;p&gt;类似于SIGALRM/SIGVTALRM, 但包括该进程用的CPU时间以及系统调用的时间.&lt;/p&gt;
&lt;p&gt;28) SIGWINCH&lt;/p&gt;
&lt;p&gt;窗口大小改变时发出.&lt;/p&gt;
&lt;p&gt;29) SIGIO&lt;/p&gt;
&lt;p&gt;文件描述符准备就绪, 可以开始进行输入/输出操作.&lt;/p&gt;
&lt;p&gt;30) SIGPWR&lt;/p&gt;
&lt;p&gt;Power failure&lt;/p&gt;
&lt;p&gt;31) SIGSYS&lt;/p&gt;
&lt;p&gt;非法的系统调用。&lt;/p&gt;
&lt;p&gt;在以上列出的信号中，程序不可捕获、阻塞或忽略的信号有：SIGKILL,SIGSTOP&lt;/p&gt;
&lt;p&gt;不能恢复至默认动作的信号有：SIGILL,SIGTRAP&lt;/p&gt;
&lt;p&gt;默认会导致进程流产的信号有：SIGABRT,SIGBUS,SIGFPE,SIGILL,SIGIOT,SIGQUIT,SIGSEGV,SIGTRAP,SIGXCPU,SIGXFSZ&lt;/p&gt;
&lt;p&gt;默认会导致进程退出的信号有：SIGALRM,SIGHUP,SIGINT,SIGKILL,SIGPIPE,SIGPOLL,SIGPROF,SIGSYS,SIGTERM,SIGUSR1,SIGUSR2,SIGVTALRM&lt;/p&gt;
&lt;p&gt;默认会导致进程停止的信号有：SIGSTOP,SIGTSTP,SIGTTIN,SIGTTOU&lt;/p&gt;
&lt;p&gt;默认进程忽略的信号有：SIGCHLD,SIGPWR,SIGURG,SIGWINCH&lt;/p&gt;
&lt;p&gt;此外，SIGIO在SVR4是退出，在4.3BSD中是忽略；SIGCONT在进程挂起时是继续，否则是忽略，不能被阻塞&lt;/p&gt;
&lt;p&gt;可靠信号与不可靠信号测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sigme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;signo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;signal received:%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="cm"&gt;/*signal(SIGRTMIN, sigme);*/&lt;/span&gt;
     &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在3秒内向这个程序发送SIGUSR1，只有第一个被接收到，而SIGRTMIN则不会有这样的问题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Mon, 12 Oct 2009 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2009-10-12:2009/10/12/UNIX/</guid><category>unix编程</category></item><item><title>原子操作</title><link>http://king32783784.github.io/2009/10/10/UNIX/</link><description>&lt;h4&gt;一、追加至一个文件&lt;/h4&gt;
&lt;p&gt;一个进程，将数据添加到一个文件尾端。早期不支持open的O_APPEND选项。所有程序被编写成下列形式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (lseek(fd, 0L, 2 ) &amp;lt; 0) /* position to EOF*/

    err_sys(&amp;quot;lseek error&amp;quot;);

if (write(fd, buf, 100) != 100) /* and write */

    err_sys(&amp;quot;write error&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;单个进程而言，可以正常工作，但若有多个进程同事使用这种方法将数据添加到同一文件，则会产生问题。&lt;/p&gt;
&lt;p&gt;UNIX系统提供了一种方法使这种操作成为原子操作。该方法是在打开文件时设置O_APPEND标志。使内核每次对这种文件进行写之前，都将当前偏移量设置到该文件的尾端处，每次写之前就不在需要调用lseek。&lt;/p&gt;
&lt;h4&gt;二、pread和 pwrite函数&lt;/h4&gt;
&lt;p&gt;原型如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include　＜unistd.h&amp;gt;

ssize_t pread (int filedes, void *buf, size_t nbytes, off_t offset);

返回值：读到的字节数，若已到文件结尾则返回0，若出错则返回-1

ssize_t pwrite(int filedes, const void *buf, size_t nbytes, off_t offset);

若成功，返回已写的字节数，若出错则返回-1
调用pread相当于顺序调用lseek和read,但是pread与这种顺序调用存在区别
调用pread时，无法中断其定位和读写作。
不能更新文件指针
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;三、创建一个文件&lt;/h4&gt;
&lt;p&gt;当用open进行打开文件时，如果该文件已经存在，open将失败。检查文件是否存在和创建该文件这两个操作是作为一个原子操作执行的。如果没有这个原子操作，需要用下面程序段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if((fd = open(pathname, O_WRONLY)) &amp;lt; 0 ) {

    if （errno == ENOENT) {

        if ((fd = creat(pathname, mode)) &amp;lt; 0)
            err_sys(&amp;quot;creat error&amp;quot;);
    } else {

        err_sys(&amp;quot;open error&amp;quot;);

    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在open和creat之间，另一个进程创建了该文件，那么就会引起问题。例如，若在这两个函数调用之间，另一个进程创建了该文件，并且写进了一些数据。然后，原先的进程执行这段程序的creat。刚由另一个进程写上去的数据就会被擦除。这样两则合并为一个原子操作，就不会发生该问题。&lt;/p&gt;
&lt;p&gt;一般而言，原子操作，指的是由多步组成的操作，如果操作原子地执行，那么执行完所有步骤，要么不执行，不可能只执行一部分。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Sat, 10 Oct 2009 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2009-10-10:2009/10/10/UNIX/</guid><category>unix编程</category></item><item><title>排序-希尔排序法</title><link>http://king32783784.github.io/2009/10/01/%E6%8E%92%E5%BA%8F/</link><description>&lt;h3&gt;（一）算法讲解&lt;/h3&gt;
&lt;p&gt;原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。V. Pratt的书[1] 对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。&lt;/p&gt;
&lt;p&gt;希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。&lt;/p&gt;
&lt;p&gt;假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。&lt;/p&gt;
&lt;p&gt;一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用i += step_size而不是i++）。&lt;/p&gt;
&lt;p&gt;例如，假设有这样一组数[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：&lt;/p&gt;
&lt;p&gt;13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10&lt;/p&gt;
&lt;p&gt;然后我们对每列进行排序：&lt;/p&gt;
&lt;p&gt;10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45&lt;/p&gt;
&lt;p&gt;将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：&lt;/p&gt;
&lt;p&gt;10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45&lt;/p&gt;
&lt;p&gt;排序之后变为：&lt;/p&gt;
&lt;p&gt;10 14 13 25 23 33 27 25 59 39 65 73 45 94 82 94&lt;/p&gt;
&lt;p&gt;最后以1步长进行排序（此时就是简单的插入排序了）。 步长串行&lt;/p&gt;
&lt;p&gt;步长的选择是希尔排序的重要部分。只要最终步长为1任何步长串行都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。&lt;/p&gt;
&lt;p&gt;Donald Shell 最初建议步长选择为\frac{n}{2}并且对步长取半直到步长达到 1。虽然这样取可以比\mathcal{O}(n^2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。 可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。 步长串行 最坏情况下复杂度 {n/2^i} \mathcal{O}(n^2) 2^k - 1 \mathcal{O}(n^{3/2}) 2^i 3^j \mathcal{O}( n\log^2 n )&lt;/p&gt;
&lt;p&gt;已知的最好步长串行是由Sedgewick提出的 (1, 5, 19, 41, 109,...)，该串行的项来自 9 * 4^i - 9 * 2^i + 1 和 4^i - 3 * 2^i + 1 这两个算式[1].这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长串行的希尔排序比插入排序和堆排序都要快，甚至在小数组中比快速排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。&lt;/p&gt;
&lt;p&gt;另一个在大数组中表现优异的步长串行是(斐波那契数列除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列)：（1, 9, 34, 182, 836, 4025, 19001, 90358, 428481, 2034035, 9651787, 45806244, 217378076, 1031612713, …）[2] 伪代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="n"&gt;numbered&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;≥&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
    &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;（二）代码示例&lt;/h3&gt;
&lt;h4&gt;（1）C示例代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
                     &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                          &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="p"&gt;}&lt;/span&gt;
                     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;（2）C++示例代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shellsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;（3）Java中的示例代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shellsort&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李鹏</dc:creator><pubDate>Thu, 01 Oct 2009 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2009-10-01:2009/10/01/排序/</guid><category>算法</category></item></channel></rss>